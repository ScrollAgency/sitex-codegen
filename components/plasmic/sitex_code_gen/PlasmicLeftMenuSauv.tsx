/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: Q2bN9z8H_VHS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonLeftMenu from "../../ButtonLeftMenu"; // plasmic-import: ksk0caXhHiA4/component
import LeftMenu2 from "../../LeftMenu2"; // plasmic-import: fWjlLt6IwrU8/component

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicLeftMenuSauv.module.css"; // plasmic-import: Q2bN9z8H_VHS/css

import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: mPYk0ZEUw6Wc/icon
import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: vxoLwbtBRoIB/icon

createPlasmicElementProxy;

export type PlasmicLeftMenuSauv__VariantMembers = {};
export type PlasmicLeftMenuSauv__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeftMenuSauv__VariantsArgs;
export const PlasmicLeftMenuSauv__VariantProps = new Array<VariantPropType>();

export type PlasmicLeftMenuSauv__ArgsType = {};
type ArgPropType = keyof PlasmicLeftMenuSauv__ArgsType;
export const PlasmicLeftMenuSauv__ArgProps = new Array<ArgPropType>();

export type PlasmicLeftMenuSauv__OverridesType = {
  root?: Flex__<"div">;
  sidebarMenu?: Flex__<"div">;
  logo?: Flex__<"div">;
  menuLinksWrapper?: Flex__<"div">;
  frame1437254281?: Flex__<"div">;
  sidebarMenuSublink?: Flex__<"div">;
  label?: Flex__<"div">;
  sidebarMenuSublink2?: Flex__<"div">;
  label2?: Flex__<"div">;
  buttonLeftMenu?: Flex__<typeof ButtonLeftMenu>;
  frame1437254283?: Flex__<"div">;
  urgenceWrapper?: Flex__<"div">;
  statusBadge?: Flex__<"div">;
  statusBadge2?: Flex__<"div">;
  sidebarMenu2?: Flex__<"div">;
  logo2?: Flex__<"div">;
  picto2?: Flex__<"div">;
  menuLinksWrapper2?: Flex__<"div">;
  accueil2?: Flex__<typeof LeftMenu2>;
  mainCourante2?: Flex__<typeof LeftMenu2>;
  operations2?: Flex__<typeof LeftMenu2>;
  frame1437254282?: Flex__<"div">;
  sidebarMenuSublink3?: Flex__<"div">;
  label3?: Flex__<"div">;
  sidebarMenuSublink4?: Flex__<"div">;
  label4?: Flex__<"div">;
  bilanRetex2?: Flex__<typeof LeftMenu2>;
  positionsSite2?: Flex__<typeof LeftMenu2>;
  annuaire2?: Flex__<typeof LeftMenu2>;
  parametres2?: Flex__<typeof LeftMenu2>;
  frame1437254284?: Flex__<"div">;
  deconnexion2?: Flex__<typeof LeftMenu2>;
  urgenceWrapper2?: Flex__<"div">;
  statusBadge3?: Flex__<"div">;
  statusBadge4?: Flex__<"div">;
};

export interface DefaultLeftMenuSauvProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeftMenuSauv__RenderFunc(props: {
  variants: PlasmicLeftMenuSauv__VariantsArgs;
  args: PlasmicLeftMenuSauv__ArgsType;
  overrides: PlasmicLeftMenuSauv__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"sidebarMenu"}
        data-plasmic-override={overrides.sidebarMenu}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebarMenu)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          hasGap={true}
          className={classNames(projectcss.all, sty.logo)}
          onClick={async event => {
            const $steps = {};

            $steps["goToMainCourante"] = true
              ? (() => {
                  const actionArgs = { destination: `/main_courante` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToMainCourante"] != null &&
              typeof $steps["goToMainCourante"] === "object" &&
              typeof $steps["goToMainCourante"].then === "function"
            ) {
              $steps["goToMainCourante"] = await $steps["goToMainCourante"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__boQoe
            )}
          >
            {"Sitex"}
          </div>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___3UTmk)}
            displayHeight={"33px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"14px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/sitex_code_gen/images/pictoSvg.svg",
              fullWidth: 19,
              fullHeight: 35,
              aspectRatio: 0.542857
            }}
          />
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox___9IbgA)}>
          <PhGearFillIcon
            className={classNames(projectcss.all, sty.svg__gizzl)}
            onClick={async event => {
              const $steps = {};

              $steps["goToParametres"] = true
                ? (() => {
                    const actionArgs = { destination: `/parametres` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToParametres"] != null &&
                typeof $steps["goToParametres"] === "object" &&
                typeof $steps["goToParametres"].then === "function"
              ) {
                $steps["goToParametres"] = await $steps["goToParametres"];
              }
            }}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"menuLinksWrapper"}
          data-plasmic-override={overrides.menuLinksWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuLinksWrapper)}
        >
          {(() => {
            try {
              return (
                $ctx.pagePath === "/operations" ||
                $ctx.pagePath === "/modeles" ||
                $ctx.pagePath.includes("modele") ||
                $ctx.pagePath.includes("runsheet")
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"frame1437254281"}
              data-plasmic-override={overrides.frame1437254281}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1437254281)}
            >
              <div
                data-plasmic-name={"sidebarMenuSublink"}
                data-plasmic-override={overrides.sidebarMenuSublink}
                className={classNames(projectcss.all, sty.sidebarMenuSublink)}
              >
                <div
                  data-plasmic-name={"label"}
                  data-plasmic-override={overrides.label}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToOperations"] = true
                      ? (() => {
                          const actionArgs = { destination: `/operations` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToOperations"] != null &&
                      typeof $steps["goToOperations"] === "object" &&
                      typeof $steps["goToOperations"].then === "function"
                    ) {
                      $steps["goToOperations"] = await $steps["goToOperations"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        color:
                          $ctx.pagePath === "/operations" ||
                          $ctx.pagePath.includes("/runsheet")
                            ? "#7641F1"
                            : "#FBFBFB",
                        "font-weight":
                          $ctx.pagePath === "/operations" ||
                          $ctx.pagePath.includes("/runsheet")
                            ? "700"
                            : "400"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"Op\u00e9rations"}
                </div>
              </div>
              <div
                data-plasmic-name={"sidebarMenuSublink2"}
                data-plasmic-override={overrides.sidebarMenuSublink2}
                className={classNames(projectcss.all, sty.sidebarMenuSublink2)}
              >
                <div
                  data-plasmic-name={"label2"}
                  data-plasmic-override={overrides.label2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label2
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToModeles"] = true
                      ? (() => {
                          const actionArgs = { destination: `/modeles` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToModeles"] != null &&
                      typeof $steps["goToModeles"] === "object" &&
                      typeof $steps["goToModeles"].then === "function"
                    ) {
                      $steps["goToModeles"] = await $steps["goToModeles"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        color:
                          $ctx.pagePath === "/modeles" ||
                          $ctx.pagePath.includes("modele")
                            ? "#7641F1"
                            : "#FBFBFB",
                        "font-weight":
                          $ctx.pagePath === "/modeles" ||
                          $ctx.pagePath.includes("modele")
                            ? "700"
                            : "400"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"Mod\u00e8les"}
                </div>
              </div>
            </Stack__>
          ) : null}
          <ButtonLeftMenu
            data-plasmic-name={"buttonLeftMenu"}
            data-plasmic-override={overrides.buttonLeftMenu}
            className={classNames("__wab_instance", sty.buttonLeftMenu)}
          />
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame1437254283"}
          data-plasmic-override={overrides.frame1437254283}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1437254283)}
        />

        {false ? (
          <div
            data-plasmic-name={"urgenceWrapper"}
            data-plasmic-override={overrides.urgenceWrapper}
            className={classNames(projectcss.all, sty.urgenceWrapper)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge"}
              data-plasmic-override={overrides.statusBadge}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg___9XYkV)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hpmkB
                )}
              >
                {"0"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge2"}
              data-plasmic-override={overrides.statusBadge2}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge2)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__kfAsu)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Fu6K
                )}
              >
                {"0"}
              </div>
            </Stack__>
          </div>
        ) : null}
      </Stack__>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"sidebarMenu2"}
          data-plasmic-override={overrides.sidebarMenu2}
          hasGap={true}
          className={classNames(projectcss.all, sty.sidebarMenu2)}
        >
          <div
            data-plasmic-name={"logo2"}
            data-plasmic-override={overrides.logo2}
            className={classNames(projectcss.all, sty.logo2)}
            onClick={async event => {
              const $steps = {};

              $steps["goToDashboard"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToDashboard"] != null &&
                typeof $steps["goToDashboard"] === "object" &&
                typeof $steps["goToDashboard"].then === "function"
              ) {
                $steps["goToDashboard"] = await $steps["goToDashboard"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ed5Hw
              )}
            >
              {"Sitex"}
            </div>
            <div
              data-plasmic-name={"picto2"}
              data-plasmic-override={overrides.picto2}
              className={classNames(projectcss.all, sty.picto2)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__d310)}
                displayHeight={"8.442129135131836px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"31.71537208557129px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/sitex_code_gen/images/frame66.svg",
                  fullWidth: 31.71537208557129,
                  fullHeight: 8.442129135131836,
                  aspectRatio: 3.555556
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bAshz)}
                displayHeight={"8.442129135131836px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"31.71537208557129px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/sitex_code_gen/images/frame67.svg",
                  fullWidth: 31.71537208557129,
                  fullHeight: 8.442129135131836,
                  aspectRatio: 2.833333
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oqQxt)}>
            <PhGearFillIcon
              className={classNames(projectcss.all, sty.svg__fYlxe)}
              onClick={async event => {
                const $steps = {};

                $steps["goToParametres"] = true
                  ? (() => {
                      const actionArgs = { destination: `/parametres` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToParametres"] != null &&
                  typeof $steps["goToParametres"] === "object" &&
                  typeof $steps["goToParametres"].then === "function"
                ) {
                  $steps["goToParametres"] = await $steps["goToParametres"];
                }
              }}
              role={"img"}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"menuLinksWrapper2"}
            data-plasmic-override={overrides.menuLinksWrapper2}
            hasGap={true}
            className={classNames(projectcss.all, sty.menuLinksWrapper2)}
          >
            <LeftMenu2
              data-plasmic-name={"accueil2"}
              data-plasmic-override={overrides.accueil2}
              className={classNames("__wab_instance", sty.accueil2)}
            />

            <LeftMenu2
              data-plasmic-name={"mainCourante2"}
              data-plasmic-override={overrides.mainCourante2}
              className={classNames("__wab_instance", sty.mainCourante2)}
            />

            <LeftMenu2
              data-plasmic-name={"operations2"}
              data-plasmic-override={overrides.operations2}
              className={classNames("__wab_instance", sty.operations2)}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"frame1437254282"}
              data-plasmic-override={overrides.frame1437254282}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1437254282)}
            >
              <div
                data-plasmic-name={"sidebarMenuSublink3"}
                data-plasmic-override={overrides.sidebarMenuSublink3}
                className={classNames(projectcss.all, sty.sidebarMenuSublink3)}
              >
                <div
                  data-plasmic-name={"label3"}
                  data-plasmic-override={overrides.label3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label3
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToOperations"] = true
                      ? (() => {
                          const actionArgs = { destination: `/operations` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToOperations"] != null &&
                      typeof $steps["goToOperations"] === "object" &&
                      typeof $steps["goToOperations"].then === "function"
                    ) {
                      $steps["goToOperations"] = await $steps["goToOperations"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        color:
                          $ctx.pagePath === "/operations" ||
                          $ctx.pagePath.includes("/runsheet")
                            ? "#7641F1"
                            : "#FBFBFB",
                        "font-weight":
                          $ctx.pagePath === "/operations" ||
                          $ctx.pagePath.includes("/runsheet")
                            ? "700"
                            : "400"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"Op\u00e9rations"}
                </div>
              </div>
              <div
                data-plasmic-name={"sidebarMenuSublink4"}
                data-plasmic-override={overrides.sidebarMenuSublink4}
                className={classNames(projectcss.all, sty.sidebarMenuSublink4)}
              >
                <div
                  data-plasmic-name={"label4"}
                  data-plasmic-override={overrides.label4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label4
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToModeles"] = true
                      ? (() => {
                          const actionArgs = { destination: `/modeles` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToModeles"] != null &&
                      typeof $steps["goToModeles"] === "object" &&
                      typeof $steps["goToModeles"].then === "function"
                    ) {
                      $steps["goToModeles"] = await $steps["goToModeles"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        color:
                          $ctx.pagePath === "/modeles" ? "#7641F1" : "#FBFBFB",
                        "font-weight":
                          $ctx.pagePath === "/modeles" ? "700" : "400"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"Mod\u00e8les"}
                </div>
              </div>
            </Stack__>
            <LeftMenu2
              data-plasmic-name={"bilanRetex2"}
              data-plasmic-override={overrides.bilanRetex2}
              className={classNames("__wab_instance", sty.bilanRetex2)}
            />

            <LeftMenu2
              data-plasmic-name={"positionsSite2"}
              data-plasmic-override={overrides.positionsSite2}
              className={classNames("__wab_instance", sty.positionsSite2)}
            />

            <LeftMenu2
              data-plasmic-name={"annuaire2"}
              data-plasmic-override={overrides.annuaire2}
              className={classNames("__wab_instance", sty.annuaire2)}
            />

            <LeftMenu2
              data-plasmic-name={"parametres2"}
              data-plasmic-override={overrides.parametres2}
              className={classNames("__wab_instance", sty.parametres2)}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254284"}
            data-plasmic-override={overrides.frame1437254284}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254284)}
          >
            <LeftMenu2
              data-plasmic-name={"deconnexion2"}
              data-plasmic-override={overrides.deconnexion2}
              className={classNames("__wab_instance", sty.deconnexion2)}
            />
          </Stack__>
          {false ? (
            <div
              data-plasmic-name={"urgenceWrapper2"}
              data-plasmic-override={overrides.urgenceWrapper2}
              className={classNames(projectcss.all, sty.urgenceWrapper2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"statusBadge3"}
                data-plasmic-override={overrides.statusBadge3}
                hasGap={true}
                className={classNames(projectcss.all, sty.statusBadge3)}
              >
                {false ? (
                  <DotIcon
                    className={classNames(projectcss.all, sty.svg__qcEmV)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gxtL
                  )}
                >
                  {"0"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"statusBadge4"}
                data-plasmic-override={overrides.statusBadge4}
                hasGap={true}
                className={classNames(projectcss.all, sty.statusBadge4)}
              >
                {false ? (
                  <DotIcon
                    className={classNames(projectcss.all, sty.svg__gq57M)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Y0I
                  )}
                >
                  {"0"}
                </div>
              </Stack__>
            </div>
          ) : null}
        </Stack__>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebarMenu",
    "logo",
    "menuLinksWrapper",
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonLeftMenu",
    "frame1437254283",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2",
    "sidebarMenu2",
    "logo2",
    "picto2",
    "menuLinksWrapper2",
    "accueil2",
    "mainCourante2",
    "operations2",
    "frame1437254282",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "bilanRetex2",
    "positionsSite2",
    "annuaire2",
    "parametres2",
    "frame1437254284",
    "deconnexion2",
    "urgenceWrapper2",
    "statusBadge3",
    "statusBadge4"
  ],
  sidebarMenu: [
    "sidebarMenu",
    "logo",
    "menuLinksWrapper",
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonLeftMenu",
    "frame1437254283",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  logo: ["logo"],
  menuLinksWrapper: [
    "menuLinksWrapper",
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonLeftMenu"
  ],
  frame1437254281: [
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2"
  ],
  sidebarMenuSublink: ["sidebarMenuSublink", "label"],
  label: ["label"],
  sidebarMenuSublink2: ["sidebarMenuSublink2", "label2"],
  label2: ["label2"],
  buttonLeftMenu: ["buttonLeftMenu"],
  frame1437254283: ["frame1437254283"],
  urgenceWrapper: ["urgenceWrapper", "statusBadge", "statusBadge2"],
  statusBadge: ["statusBadge"],
  statusBadge2: ["statusBadge2"],
  sidebarMenu2: [
    "sidebarMenu2",
    "logo2",
    "picto2",
    "menuLinksWrapper2",
    "accueil2",
    "mainCourante2",
    "operations2",
    "frame1437254282",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "bilanRetex2",
    "positionsSite2",
    "annuaire2",
    "parametres2",
    "frame1437254284",
    "deconnexion2",
    "urgenceWrapper2",
    "statusBadge3",
    "statusBadge4"
  ],
  logo2: ["logo2", "picto2"],
  picto2: ["picto2"],
  menuLinksWrapper2: [
    "menuLinksWrapper2",
    "accueil2",
    "mainCourante2",
    "operations2",
    "frame1437254282",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "bilanRetex2",
    "positionsSite2",
    "annuaire2",
    "parametres2"
  ],
  accueil2: ["accueil2"],
  mainCourante2: ["mainCourante2"],
  operations2: ["operations2"],
  frame1437254282: [
    "frame1437254282",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4"
  ],
  sidebarMenuSublink3: ["sidebarMenuSublink3", "label3"],
  label3: ["label3"],
  sidebarMenuSublink4: ["sidebarMenuSublink4", "label4"],
  label4: ["label4"],
  bilanRetex2: ["bilanRetex2"],
  positionsSite2: ["positionsSite2"],
  annuaire2: ["annuaire2"],
  parametres2: ["parametres2"],
  frame1437254284: ["frame1437254284", "deconnexion2"],
  deconnexion2: ["deconnexion2"],
  urgenceWrapper2: ["urgenceWrapper2", "statusBadge3", "statusBadge4"],
  statusBadge3: ["statusBadge3"],
  statusBadge4: ["statusBadge4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebarMenu: "div";
  logo: "div";
  menuLinksWrapper: "div";
  frame1437254281: "div";
  sidebarMenuSublink: "div";
  label: "div";
  sidebarMenuSublink2: "div";
  label2: "div";
  buttonLeftMenu: typeof ButtonLeftMenu;
  frame1437254283: "div";
  urgenceWrapper: "div";
  statusBadge: "div";
  statusBadge2: "div";
  sidebarMenu2: "div";
  logo2: "div";
  picto2: "div";
  menuLinksWrapper2: "div";
  accueil2: typeof LeftMenu2;
  mainCourante2: typeof LeftMenu2;
  operations2: typeof LeftMenu2;
  frame1437254282: "div";
  sidebarMenuSublink3: "div";
  label3: "div";
  sidebarMenuSublink4: "div";
  label4: "div";
  bilanRetex2: typeof LeftMenu2;
  positionsSite2: typeof LeftMenu2;
  annuaire2: typeof LeftMenu2;
  parametres2: typeof LeftMenu2;
  frame1437254284: "div";
  deconnexion2: typeof LeftMenu2;
  urgenceWrapper2: "div";
  statusBadge3: "div";
  statusBadge4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftMenuSauv__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftMenuSauv__VariantsArgs;
    args?: PlasmicLeftMenuSauv__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftMenuSauv__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeftMenuSauv__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftMenuSauv__ArgProps,
          internalVariantPropNames: PlasmicLeftMenuSauv__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeftMenuSauv__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftMenuSauv";
  } else {
    func.displayName = `PlasmicLeftMenuSauv.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftMenuSauv = Object.assign(
  // Top-level PlasmicLeftMenuSauv renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebarMenu: makeNodeComponent("sidebarMenu"),
    logo: makeNodeComponent("logo"),
    menuLinksWrapper: makeNodeComponent("menuLinksWrapper"),
    frame1437254281: makeNodeComponent("frame1437254281"),
    sidebarMenuSublink: makeNodeComponent("sidebarMenuSublink"),
    label: makeNodeComponent("label"),
    sidebarMenuSublink2: makeNodeComponent("sidebarMenuSublink2"),
    label2: makeNodeComponent("label2"),
    buttonLeftMenu: makeNodeComponent("buttonLeftMenu"),
    frame1437254283: makeNodeComponent("frame1437254283"),
    urgenceWrapper: makeNodeComponent("urgenceWrapper"),
    statusBadge: makeNodeComponent("statusBadge"),
    statusBadge2: makeNodeComponent("statusBadge2"),
    sidebarMenu2: makeNodeComponent("sidebarMenu2"),
    logo2: makeNodeComponent("logo2"),
    picto2: makeNodeComponent("picto2"),
    menuLinksWrapper2: makeNodeComponent("menuLinksWrapper2"),
    accueil2: makeNodeComponent("accueil2"),
    mainCourante2: makeNodeComponent("mainCourante2"),
    operations2: makeNodeComponent("operations2"),
    frame1437254282: makeNodeComponent("frame1437254282"),
    sidebarMenuSublink3: makeNodeComponent("sidebarMenuSublink3"),
    label3: makeNodeComponent("label3"),
    sidebarMenuSublink4: makeNodeComponent("sidebarMenuSublink4"),
    label4: makeNodeComponent("label4"),
    bilanRetex2: makeNodeComponent("bilanRetex2"),
    positionsSite2: makeNodeComponent("positionsSite2"),
    annuaire2: makeNodeComponent("annuaire2"),
    parametres2: makeNodeComponent("parametres2"),
    frame1437254284: makeNodeComponent("frame1437254284"),
    deconnexion2: makeNodeComponent("deconnexion2"),
    urgenceWrapper2: makeNodeComponent("urgenceWrapper2"),
    statusBadge3: makeNodeComponent("statusBadge3"),
    statusBadge4: makeNodeComponent("statusBadge4"),

    // Metadata about props expected for PlasmicLeftMenuSauv
    internalVariantProps: PlasmicLeftMenuSauv__VariantProps,
    internalArgProps: PlasmicLeftMenuSauv__ArgProps
  }
);

export default PlasmicLeftMenuSauv;
/* prettier-ignore-end */
