/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: HVRo_Ra5E0gW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { HoursCalculator } from "../../../others/hoursCalculator/hoursCalculator"; // plasmic-import: NUh3K8InU4PR/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: lhUOZcKCH_AK/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import TextInput from "../../TextInput"; // plasmic-import: lm9M4C5ynpU1/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicCreateDispo.module.css"; // plasmic-import: HVRo_Ra5E0gW/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicCreateDispo__VariantMembers = {};
export type PlasmicCreateDispo__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateDispo__VariantsArgs;
export const PlasmicCreateDispo__VariantProps = new Array<VariantPropType>();

export type PlasmicCreateDispo__ArgsType = {
  open?: boolean;
  type?: string;
  positions?: any;
  tasks?: any;
  staff?: any;
  operation?: any;
  modelId?: number;
  onOpenChange?: (val: string) => void;
  clientId?: number;
};
type ArgPropType = keyof PlasmicCreateDispo__ArgsType;
export const PlasmicCreateDispo__ArgProps = new Array<ArgPropType>(
  "open",
  "type",
  "positions",
  "tasks",
  "staff",
  "operation",
  "modelId",
  "onOpenChange",
  "clientId"
);

export type PlasmicCreateDispo__OverridesType = {
  modalCreateDispo?: Flex__<typeof Modal>;
  frame1437254022?: Flex__<"div">;
  name2?: Flex__<"div">;
  frame1437254023?: Flex__<"div">;
  hoursCalculator?: Flex__<typeof HoursCalculator>;
  formCreate?: Flex__<typeof FormWrapper>;
  event3?: Flex__<typeof FormItemWrapper>;
  select4?: Flex__<typeof AntdSelect>;
  title2?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  title4?: Flex__<typeof FormItemWrapper>;
  input4?: Flex__<typeof AntdInput>;
  generalDescription3?: Flex__<typeof FormItemWrapper>;
  textAreaInput4?: Flex__<typeof TextAreaInput>;
  startingTaskDispo?: Flex__<typeof FormItemWrapper>;
  select15?: Flex__<typeof AntdSelect>;
  formStartingTaskDispo?: Flex__<typeof FormWrapper>;
  dispositifs3?: Flex__<"div">;
  dateStart2?: Flex__<typeof FormItemWrapper>;
  timePicker4?: Flex__<typeof AntdDatePicker>;
  minBefore?: Flex__<typeof FormItemWrapper>;
  select34?: Flex__<typeof AntdSelect>;
  position2?: Flex__<typeof FormItemWrapper>;
  select33?: Flex__<typeof AntdSelect>;
  libele?: Flex__<typeof FormItemWrapper>;
  input18?: Flex__<typeof AntdInput>;
  libele2?: Flex__<typeof FormItemWrapper>;
  input19?: Flex__<typeof AntdInput>;
  generalDescription8?: Flex__<typeof FormItemWrapper>;
  textAreaInput6?: Flex__<typeof TextAreaInput>;
  dateEnd2?: Flex__<typeof FormItemWrapper>;
  timePicker5?: Flex__<typeof AntdDatePicker>;
  minBefore2?: Flex__<typeof FormItemWrapper>;
  select35?: Flex__<typeof AntdSelect>;
  endingTaskDispo?: Flex__<typeof FormItemWrapper>;
  select21?: Flex__<typeof AntdSelect>;
  formEndingTaskDispo?: Flex__<typeof FormWrapper>;
  dispositifs4?: Flex__<"div">;
  dateStart3?: Flex__<typeof FormItemWrapper>;
  timePicker6?: Flex__<typeof AntdDatePicker>;
  minBefore3?: Flex__<typeof FormItemWrapper>;
  select36?: Flex__<typeof AntdSelect>;
  position3?: Flex__<typeof FormItemWrapper>;
  select37?: Flex__<typeof AntdSelect>;
  libele3?: Flex__<typeof FormItemWrapper>;
  input20?: Flex__<typeof AntdInput>;
  libele4?: Flex__<typeof FormItemWrapper>;
  input21?: Flex__<typeof AntdInput>;
  generalDescription9?: Flex__<typeof FormItemWrapper>;
  textAreaInput7?: Flex__<typeof TextAreaInput>;
  dateEnd3?: Flex__<typeof FormItemWrapper>;
  timePicker7?: Flex__<typeof AntdDatePicker>;
  minBefore4?: Flex__<typeof FormItemWrapper>;
  select38?: Flex__<typeof AntdSelect>;
  codeTarif?: Flex__<typeof FormItemWrapper>;
  select14?: Flex__<typeof AntdSelect>;
  detailsTarif?: Flex__<"div">;
  title6?: Flex__<typeof FormItemWrapper>;
  textInput?: Flex__<typeof TextInput>;
  detailsHeures?: Flex__<"div">;
  nbAgent?: Flex__<typeof FormItemWrapper>;
  input7?: Flex__<typeof AntdInput>;
  title7?: Flex__<typeof FormItemWrapper>;
  input10?: Flex__<typeof AntdInput>;
  detailsTotal?: Flex__<"div">;
  mainMission2?: Flex__<typeof FormItemWrapper>;
  select18?: Flex__<typeof AntdSelect>;
  thematic5?: Flex__<typeof FormItemWrapper>;
  select16?: Flex__<typeof AntdSelect>;
  thematic6?: Flex__<typeof FormItemWrapper>;
  select17?: Flex__<typeof AntdSelect>;
  thematic7?: Flex__<typeof FormItemWrapper>;
  select11?: Flex__<typeof AntdSelect>;
  thematic9?: Flex__<typeof FormItemWrapper>;
  select19?: Flex__<typeof AntdSelect>;
  thematic10?: Flex__<typeof FormItemWrapper>;
  select20?: Flex__<typeof AntdSelect>;
  generalDescription4?: Flex__<typeof FormItemWrapper>;
  textAreaInput5?: Flex__<typeof TextAreaInput>;
  upload3?: Flex__<typeof UploadWrapper>;
};

export interface DefaultCreateDispoProps {
  open?: boolean;
  type?: string;
  positions?: any;
  tasks?: any;
  staff?: any;
  operation?: any;
  modelId?: number;
  onOpenChange?: (val: string) => void;
  clientId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateDispo__RenderFunc(props: {
  variants: PlasmicCreateDispo__VariantsArgs;
  args: PlasmicCreateDispo__ArgsType;
  overrides: PlasmicCreateDispo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          type: "runsheet"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modalCreateDispo.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "formCreate.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formCreate",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formCreate.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formCreate",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "formStartingTaskDispo.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formStartingTaskDispo",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formStartingTaskDispo.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formStartingTaskDispo",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select34.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select33.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "timePicker5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "dispoId2",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "select35.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formEndingTaskDispo.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEndingTaskDispo",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEndingTaskDispo.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEndingTaskDispo",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "timePicker6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select36.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select37.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textAreaInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select38.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "taskdispoStartEnd",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "showHours",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showCost",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showUnitPrice",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showStartingTask",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hoursCalculator2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $refs.hoursCalculator.getCurrentResult();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "prices2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          unit_price_day: 0,
          unit_price_night: 0,
          unit_price_sun_day: 0,
          unit_price_sun_night: 0,
          unit_price_holiday_day: 0,
          unit_price_holiday_night: 0,
          unit_price_sun_holiday_day: 0,
          unit_price_sun_holiday_night: 0
        })
      },
      {
        path: "agentCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "changedValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    variables: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "adaaa90a-e17e-4d86-9000-e03195d2d4d0",
        userArgs: {
          filters: [$props.clientId]
        },
        cacheKey: `plasmic.$.adaaa90a-e17e-4d86-9000-e03195d2d4d0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <Modal
      data-plasmic-name={"modalCreateDispo"}
      data-plasmic-override={overrides.modalCreateDispo}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modalCreateDispo)}
      closeOnBackdropClick={false}
      content={
        <React.Fragment>
          <HoursCalculator
            data-plasmic-name={"hoursCalculator"}
            data-plasmic-override={overrides.hoursCalculator}
            className={classNames("__wab_instance", sty.hoursCalculator)}
            dateEnd={(() => {
              try {
                return $state.formEndingTaskDispo.value.date_end;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            dateStart={(() => {
              try {
                return $state.formStartingTaskDispo.value.date_start;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            ref={ref => {
              $refs["hoursCalculator"] = ref;
            }}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.formCreate),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["formCreate", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);

                (async (changedValues, allValues) => {
                  const $steps = {};

                  $steps["changedValues"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["changedValues"]
                          },
                          operation: 0,
                          value: changedValues
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["changedValues"] != null &&
                    typeof $steps["changedValues"] === "object" &&
                    typeof $steps["changedValues"].then === "function"
                  ) {
                    $steps["changedValues"] = await $steps["changedValues"];
                  }

                  $steps["startTask"] = (
                    $state.changedValues.starting_task_dispo ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const date_start = $props.tasks.find(
                                x =>
                                  x.id ===
                                  $state.formCreate.value.starting_task_dispo
                              ).date_start;
                              const date_end = $props.tasks.find(
                                x =>
                                  x.id ===
                                  $state.formCreate.value.starting_task_dispo
                              ).date_end;
                              return setTimeout(() => {
                                $state.formStartingTaskDispo.value.date_start =
                                  date_start;
                                $state.formStartingTaskDispo.value.date_end =
                                  date_end;
                              }, 100);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["startTask"] != null &&
                    typeof $steps["startTask"] === "object" &&
                    typeof $steps["startTask"].then === "function"
                  ) {
                    $steps["startTask"] = await $steps["startTask"];
                  }

                  $steps["endTask"] = (
                    $state.changedValues.ending_task_dispo ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const date_start = $props.tasks.find(
                                x =>
                                  x.id ===
                                  $state.formCreate.value.ending_task_dispo
                              ).date_start;
                              const date_end = $props.tasks.find(
                                x =>
                                  x.id ===
                                  $state.formCreate.value.ending_task_dispo
                              ).date_end;
                              return setTimeout(() => {
                                $state.formEndingTaskDispo.value.date_start =
                                  date_start;
                                $state.formEndingTaskDispo.value.date_end =
                                  date_end;
                              }, 100);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["endTask"] != null &&
                    typeof $steps["endTask"] === "object" &&
                    typeof $steps["endTask"].then === "function"
                  ) {
                    $steps["endTask"] = await $steps["endTask"];
                  }

                  $steps["runActionOnHoursCalculator"] = (
                    $state.formEndingTaskDispo.value.date_start &&
                    $state.formEndingTaskDispo.value.date_end &&
                    ($state.changedValues.ending_task_dispo ||
                      $state.changedValues.starting_task_dispo)
                      ? true
                      : false
                  )
                    ? (() => {
                        const actionArgs = {
                          tplRef: "hoursCalculator",
                          action: "calculate"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runActionOnHoursCalculator"] != null &&
                    typeof $steps["runActionOnHoursCalculator"] === "object" &&
                    typeof $steps["runActionOnHoursCalculator"].then ===
                      "function"
                  ) {
                    $steps["runActionOnHoursCalculator"] = await $steps[
                      "runActionOnHoursCalculator"
                    ];
                  }

                  $steps["setHours"] = (
                    $state.formEndingTaskDispo.value.date_start &&
                    $state.formEndingTaskDispo.value.date_end &&
                    ($state.changedValues.ending_task_dispo ||
                      $state.changedValues.starting_task_dispo)
                      ? true
                      : false
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return setTimeout(() => {
                              $state.hoursCalculator2 =
                                $refs.hoursCalculator.getCurrentResult();
                              $state.formCreate.value.total_hours =
                                $state.hoursCalculator2.totalHours;
                            }, 3000);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setHours"] != null &&
                    typeof $steps["setHours"] === "object" &&
                    typeof $steps["setHours"].then === "function"
                  ) {
                    $steps["setHours"] = await $steps["setHours"];
                  }

                  $steps["updatePrices2"] = (
                    $state.changedValues.staff_id ? true : null
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["prices2"]
                          },
                          operation: 0,
                          value: (() => {
                            const sta = $props.staff.data.filter(
                              x =>
                                x.id == Number($state.formCreate.value.staff_id)
                            );
                            return sta.map(x => ({
                              unit_price_day: x.unit_price_day,
                              unit_price_night: x.unit_price_night,
                              unit_price_sun_day: x.unit_price_sun_day,
                              unit_price_sun_night: x.unit_price_sun_night,
                              unit_price_holiday_day: x.unit_price_holiday_day,
                              unit_price_holiday_night:
                                x.unit_price_holiday_night,
                              unit_price_sun_holiday_day:
                                x.unit_price_sun_holiday_day,
                              unit_price_sun_holiday_night:
                                x.unit_price_sun_holiday_night
                            }))[0];
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePrices2"] != null &&
                    typeof $steps["updatePrices2"] === "object" &&
                    typeof $steps["updatePrices2"].then === "function"
                  ) {
                    $steps["updatePrices2"] = await $steps["updatePrices2"];
                  }

                  $steps["updateAgentCount"] = (
                    $state.changedValues.agent_count ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["agentCount"]
                          },
                          operation: 0,
                          value: Number($state.formCreate.value.agent_count)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAgentCount"] != null &&
                    typeof $steps["updateAgentCount"] === "object" &&
                    typeof $steps["updateAgentCount"].then === "function"
                  ) {
                    $steps["updateAgentCount"] = await $steps[
                      "updateAgentCount"
                    ];
                  }

                  $steps["totalPrice"] = (
                    $state.changedValues.staff_id ||
                    $state.changedValues.ending_task_dispo ||
                    $state.changedValues.starting_task_dispo ||
                    $state.changedValues.agent_count
                      ? true
                      : null
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.formCreate.value.total_price =
                              $state.prices2.unit_price_day *
                                $state.hoursCalculator2.regularDayHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_night *
                                $state.hoursCalculator2.regularNightHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_sun_day *
                                $state.hoursCalculator2.sundayDayHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_sun_night *
                                $state.hoursCalculator2.sundayNightHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_holiday_day *
                                $state.hoursCalculator2.holidayDayHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_holiday_night *
                                $state.hoursCalculator2.sundayNightHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_sun_holiday_day *
                                $state.hoursCalculator2.sundayHolidayDayHours *
                                Number($state.formCreate.value.agent_count) +
                              $state.prices2.unit_price_sun_holiday_night *
                                $state.hoursCalculator2
                                  .sundayHolidayNightHours *
                                Number($state.formCreate.value.agent_count));
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["totalPrice"] != null &&
                    typeof $steps["totalPrice"] === "object" &&
                    typeof $steps["totalPrice"].then === "function"
                  ) {
                    $steps["totalPrice"] = await $steps["totalPrice"];
                  }

                  $steps["updateChangedValues"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["changedValues"]
                          },
                          operation: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, undefined);
                          return undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateChangedValues"] != null &&
                    typeof $steps["updateChangedValues"] === "object" &&
                    typeof $steps["updateChangedValues"].then === "function"
                  ) {
                    $steps["updateChangedValues"] = await $steps[
                      "updateChangedValues"
                    ];
                  }
                }).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["supabaseUploadFile"] =
                  $state.upload3.files.length > 0
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                            opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                            userArgs: {
                              path: [$state.upload3.files[0].name],
                              content: [$state.upload3.files[0].contents],
                              contentType: [$state.upload3.files[0].type]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["supabaseUploadFile"] != null &&
                  typeof $steps["supabaseUploadFile"] === "object" &&
                  typeof $steps["supabaseUploadFile"].then === "function"
                ) {
                  $steps["supabaseUploadFile"] = await $steps[
                    "supabaseUploadFile"
                  ];
                }

                $steps["createFile"] =
                  $state.upload3.files.length > 0
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "708f2049-6a58-4cd1-9ad5-d9b37aedc44c",
                            userArgs: {
                              variables: [
                                $steps.supabaseUploadFile?.path,
                                $props.type === "model"
                                  ? null
                                  : $state.formCreate.value
                                      .associated_operation[0].value,
                                $props.modelId || null
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["createFile"] != null &&
                  typeof $steps["createFile"] === "object" &&
                  typeof $steps["createFile"].then === "function"
                ) {
                  $steps["createFile"] = await $steps["createFile"];
                }

                $steps["createDispo"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "e18540a8-135f-4e40-9c8b-227023c30da5",
                          userArgs: {
                            variables: [
                              $state.formCreate.value.additional_notes,
                              $state.formCreate.value.agent_count,
                              $props.type === "model"
                                ? null
                                : $state.formCreate.value
                                    .associated_operation[0].value,
                              $state.formCreate.value.description,
                              $steps.supabaseUploadFile?.path,
                              $state.formCreate.value.function,
                              $state.formCreate.value.id_sitex,
                              $state.formCreate.value.main_mission,
                              $state.formCreate.value.outfit,
                              $state.formCreate.value.role_name,
                              $state.formCreate.value.service_type,
                              $state.formCreate.value.staff_id,
                              $state.formCreate.value.tags,
                              $state.formCreate.value.thematic,
                              $state.formCreate.value.total_hours,
                              $state.formCreate.value.total_price,
                              $state.upload3.files.length > 0
                                ? $steps.createFile.data[0].id
                                : null,
                              $props.type === "model" ? $props.modelId : null,
                              $ctx.SupabaseUser.user == null
                                ? null
                                : $ctx.SupabaseUser.user.id,
                              $props.clientId
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [
                            "8a2f0ee3-a6bf-421f-bcf3-5e61735476c7",
                            "231e308b-653f-44ec-b971-c9e99c82c230",
                            "38496a2c-2970-40cf-bfd9-47a20de7a9d0",
                            "069e9c41-c976-4aab-bc58-904cf4e3c2f9",
                            "9210f008-7e19-4c8b-81b4-e42bc86ae1cc",
                            "b7920d38-aff6-420a-bf62-3075c0d95fcd",
                            "b7920d38-aff6-420a-bf62-3075c0d95fcd",
                            "b7920d38-aff6-420a-bf62-3075c0d95fcd"
                          ],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["createDispo"] != null &&
                  typeof $steps["createDispo"] === "object" &&
                  typeof $steps["createDispo"].then === "function"
                ) {
                  $steps["createDispo"] = await $steps["createDispo"];
                }

                $steps["updateDispoId"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: Number($steps.createDispo.data[0].id),
                        variable: {
                          objRoot: $state,
                          variablePath: ["dispoId2"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDispoId"] != null &&
                  typeof $steps["updateDispoId"] === "object" &&
                  typeof $steps["updateDispoId"].then === "function"
                ) {
                  $steps["updateDispoId"] = await $steps["updateDispoId"];
                }

                $steps["createStartingTaskDispo"] =
                  $state.formCreate.value.starting_task_dispo != undefined
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "30f1dbaa-1b15-458d-aac6-1141e627780b",
                            userArgs: {
                              variables: [
                                $ctx.SupabaseUser.user.id,
                                $props.type === "model" ? $props.modelId : null,
                                $state.formStartingTaskDispo.value.description,
                                $state.dispoId2,
                                $state.formStartingTaskDispo.value.min_after,
                                $state.formStartingTaskDispo.value.min_before,
                                $state.formStartingTaskDispo.value.position_id,
                                $state.formStartingTaskDispo.value
                                  .position_name,
                                $state.formStartingTaskDispo.value
                                  .position_sector,
                                $state.formCreate.value.starting_task_dispo
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: [
                              "330d5325-6e12-4b25-97e4-15853a7883d0",
                              "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                              "ae8f6af7-e283-4770-a3e5-c810ebc5351d"
                            ],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["createStartingTaskDispo"] != null &&
                  typeof $steps["createStartingTaskDispo"] === "object" &&
                  typeof $steps["createStartingTaskDispo"].then === "function"
                ) {
                  $steps["createStartingTaskDispo"] = await $steps[
                    "createStartingTaskDispo"
                  ];
                }

                $steps["createEndingTaskDispo"] =
                  $state.formCreate.value.ending_task_dispo != undefined
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "1b622a21-cde3-4a68-81b4-0a0b32856bd6",
                            userArgs: {
                              variables: [
                                $props.type === "model" ? $props.modelId : null,
                                $state.formEndingTaskDispo.value.description,
                                $state.formEndingTaskDispo.value.min_after,
                                $state.formEndingTaskDispo.value.min_before,
                                $state.formEndingTaskDispo.value.position_id,
                                $state.formEndingTaskDispo.value.position_name,
                                $state.formEndingTaskDispo.value
                                  .position_sector,
                                $state.formCreate.value.ending_task_dispo,
                                $ctx.SupabaseUser.user.id,
                                $state.dispoId2
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: [
                              "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                              "ae8f6af7-e283-4770-a3e5-c810ebc5351d"
                            ],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["createEndingTaskDispo"] != null &&
                  typeof $steps["createEndingTaskDispo"] === "object" &&
                  typeof $steps["createEndingTaskDispo"].then === "function"
                ) {
                  $steps["createEndingTaskDispo"] = await $steps[
                    "createEndingTaskDispo"
                  ];
                }

                $steps["updateTaskdispoIds"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["taskdispoStartEnd"]
                        },
                        operation: 5,
                        value: Number($steps.createStartingTaskDispo.data[0].id)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const arr = $stateGet(objRoot, variablePath);
                        arr.push(value);
                        return arr;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTaskdispoIds"] != null &&
                  typeof $steps["updateTaskdispoIds"] === "object" &&
                  typeof $steps["updateTaskdispoIds"].then === "function"
                ) {
                  $steps["updateTaskdispoIds"] = await $steps[
                    "updateTaskdispoIds"
                  ];
                }

                $steps["updateTaskdispoStartEnd2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["taskdispoStartEnd"]
                        },
                        operation: 5,
                        value: Number($steps.createEndingTaskDispo.data[0].id)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const arr = $stateGet(objRoot, variablePath);
                        arr.push(value);
                        return arr;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTaskdispoStartEnd2"] != null &&
                  typeof $steps["updateTaskdispoStartEnd2"] === "object" &&
                  typeof $steps["updateTaskdispoStartEnd2"].then === "function"
                ) {
                  $steps["updateTaskdispoStartEnd2"] = await $steps[
                    "updateTaskdispoStartEnd2"
                  ];
                }

                $steps["postgresUpdateById"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "8c9ba8e0-cdea-4a6a-b3e4-d1b0db624ed6",
                          userArgs: {
                            keys: [$state.dispoId2],
                            variables: [
                              Number($steps.createEndingTaskDispo.data[0].id),
                              Number($steps.createStartingTaskDispo.data[0].id)
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresUpdateById"] != null &&
                  typeof $steps["postgresUpdateById"] === "object" &&
                  typeof $steps["postgresUpdateById"].then === "function"
                ) {
                  $steps["postgresUpdateById"] = await $steps[
                    "postgresUpdateById"
                  ];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          "Dispositif cr\u00e9\u00e9",
                          undefined,
                          undefined,
                          "bottom"
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }

                $steps["updateTaskdispoStartEnd"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["taskdispoStartEnd"]
                        },
                        operation: 6,
                        startIndex: 0,
                        deleteCount: 2
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const arr = $stateGet(objRoot, variablePath);
                        arr.splice(startIndex, deleteCount);
                        return arr;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTaskdispoStartEnd"] != null &&
                  typeof $steps["updateTaskdispoStartEnd"] === "object" &&
                  typeof $steps["updateTaskdispoStartEnd"].then === "function"
                ) {
                  $steps["updateTaskdispoStartEnd"] = await $steps[
                    "updateTaskdispoStartEnd"
                  ];
                }
              },
              onFinishFailed: async data => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: ["error", "Erreur", ``, undefined, "bottom"]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["formCreate", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["formCreate"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "formCreate.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "formCreate.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"formCreate"}
                data-plasmic-override={overrides.formCreate}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $props.type !== "model";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    data-plasmic-name={"event3"}
                    data-plasmic-override={overrides.event3}
                    className={classNames("__wab_instance", sty.event3)}
                    initialValue={(() => {
                      try {
                        return $props.operation.data.length == 1 &&
                          $props.type !== "model"
                          ? $props.operation.data.map(item => ({
                              value: item.id,
                              label: item.title
                            }))
                          : null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lmOm7
                        )}
                      >
                        {"Op\u00e9ration associ\u00e9e"}
                      </div>
                    }
                    name={"associated_operation"}
                    rules={[
                      { ruleType: "required", message: "Mod\u00e8le requis" }
                    ]}
                  >
                    <AntdSelect
                      data-plasmic-name={"select4"}
                      data-plasmic-override={overrides.select4}
                      className={classNames("__wab_instance", sty.select4)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select4",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      optionClassName={classNames({
                        [sty["pcls_LaPy7fljlitY"]]: true
                      })}
                      options={(() => {
                        try {
                          return $props.operation.data.map(item => ({
                            value: item.id,
                            label: item.title
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sHeT
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      placeholderClassName={classNames({
                        [sty["pcls_tw4dSJ5ixua2"]]: true
                      })}
                      popupClassName={classNames({
                        [sty["pcls_wbFEbMQk8y_S"]]: true
                      })}
                      popupScopeClassName={sty["select4__popup"]}
                      size={"middle"}
                      triggerClassName={classNames({
                        [sty["pcls_wlctdmkbZm7R"]]: true
                      })}
                      value={generateStateValueProp($state, [
                        "select4",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                ) : null}
                <FormItemWrapper
                  data-plasmic-name={"title2"}
                  data-plasmic-override={overrides.title2}
                  className={classNames("__wab_instance", sty.title2)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jwwy7
                      )}
                    >
                      {"Nom fonction *"}
                    </div>
                  }
                  name={"role_name"}
                  rules={[{ ruleType: "required", message: "Titre requis" }]}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input2),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input2", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "Titre",
                      size: "large",
                      value: generateStateValueProp($state, ["input2", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input2.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input2"}
                        data-plasmic-override={overrides.input2}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title4"}
                  data-plasmic-override={overrides.title4}
                  className={classNames("__wab_instance", sty.title4)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ltz1A
                      )}
                    >
                      {"Matricule"}
                    </div>
                  }
                  name={"id_sitex"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input4),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input4", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "Matricule",
                      size: "large",
                      value: generateStateValueProp($state, ["input4", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input4.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input4"}
                        data-plasmic-override={overrides.input4}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"generalDescription3"}
                  data-plasmic-override={overrides.generalDescription3}
                  className={classNames(
                    "__wab_instance",
                    sty.generalDescription3
                  )}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x5Tgr
                      )}
                    >
                      {"Description"}
                    </div>
                  }
                  name={"description"}
                >
                  <TextAreaInput
                    data-plasmic-name={"textAreaInput4"}
                    data-plasmic-override={overrides.textAreaInput4}
                    className={classNames("__wab_instance", sty.textAreaInput4)}
                    inputMode={"text"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textAreaInput4",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"R\u00e9f\u00e9rence, Dimensionnement..."}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"startingTaskDispo"}
                  data-plasmic-override={overrides.startingTaskDispo}
                  className={classNames(
                    "__wab_instance",
                    sty.startingTaskDispo
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u5AO
                      )}
                    >
                      {"Marqueur de d\u00e9but de service"}
                    </div>
                  }
                  name={"starting_task_dispo"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <AntdSelect
                    data-plasmic-name={"select15"}
                    data-plasmic-override={overrides.select15}
                    allowClear={false}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select15)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"single"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select15",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls___HSoJznoRpL"]]: true
                    })}
                    options={(() => {
                      try {
                        return $props.tasks
                          .filter(x => x.type != "situation")
                          .map(x => ({
                            value: x.id,
                            label: x.title
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__afIp9
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_5gjmA6CpCITU"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_g5iKiiW1Ik8q"]]: true
                    })}
                    popupScopeClassName={sty["select15__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_2r3ggPnKXNV3"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select15",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.formCreate.value.starting_task_dispo
                      ? true
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.formStartingTaskDispo
                        ),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["formStartingTaskDispo", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["formStartingTaskDispo", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["formStartingTaskDispo"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "formStartingTaskDispo.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName:
                              "formStartingTaskDispo.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"formStartingTaskDispo"}
                          data-plasmic-override={
                            overrides.formStartingTaskDispo
                          }
                          {...child$Props}
                        >
                          <div
                            data-plasmic-name={"dispositifs3"}
                            data-plasmic-override={overrides.dispositifs3}
                            className={classNames(
                              projectcss.all,
                              sty.dispositifs3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c3UvU
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.tasks.find(
                                      x =>
                                        x.id ==
                                        $state.formCreate.value
                                          .starting_task_dispo
                                    )?.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <FormItemWrapper
                              data-plasmic-name={"dateStart2"}
                              data-plasmic-override={overrides.dateStart2}
                              className={classNames(
                                "__wab_instance",
                                sty.dateStart2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vO5V5
                                  )}
                                >
                                  {"Date et heure de d\u00e9but"}
                                </div>
                              }
                              name={"date_start"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Date de d\u00e9but requis"
                                }
                              ]}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.timePicker4
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["timePicker4", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_fGRziD3zoAv2"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls__DgqQ7e3J-i2"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_kwcgo63mMBxl"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_HiRXysW4ONrt"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["timePicker4__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "timePicker4",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "timePicker4.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"timePicker4"}
                                    data-plasmic-override={
                                      overrides.timePicker4
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gCsBk
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore"}
                              data-plasmic-override={overrides.minBefore}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xroTn
                                  )}
                                >
                                  {
                                    "Convier le dispositif avant le d\u00e9but de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_before"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select34"}
                                data-plasmic-override={overrides.select34}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select34
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select34",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min avant"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min avant"
                                      },
                                      {
                                        value: 60,
                                        label: "60 min avant"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gzMae
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select34__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select34",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"position2"}
                              data-plasmic-override={overrides.position2}
                              className={classNames(
                                "__wab_instance",
                                sty.position2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qQmJi
                                  )}
                                >
                                  {"Positions site"}
                                </div>
                              }
                              name={"position_id"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select33"}
                                data-plasmic-override={overrides.select33}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select33
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select33",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return $props.positions.data.map(
                                      position => ({
                                        value: position.id,
                                        label: position.specific_name
                                      })
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mj5H
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select33__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select33",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__isEZb
                              )}
                            >
                              <FormItemWrapper
                                data-plasmic-name={"libele"}
                                data-plasmic-override={overrides.libele}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___82Q2
                                    )}
                                  >
                                    {"Libell\u00e9"}
                                  </div>
                                }
                                name={"position_name"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input18
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input18", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Libell\u00e9",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input18",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input18.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input18"}
                                      data-plasmic-override={overrides.input18}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                data-plasmic-name={"libele2"}
                                data-plasmic-override={overrides.libele2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele2
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__b7Dzq
                                    )}
                                  >
                                    {"Secteur"}
                                  </div>
                                }
                                name={"position_sector"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input19
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input19", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Secteur",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input19",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input19.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input19"}
                                      data-plasmic-override={overrides.input19}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </Stack__>
                            <FormItemWrapper
                              data-plasmic-name={"generalDescription8"}
                              data-plasmic-override={
                                overrides.generalDescription8
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.generalDescription8
                              )}
                              initialValue={undefined}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bjcWb
                                  )}
                                >
                                  {"Description sp\u00e9cifique"}
                                </div>
                              }
                              name={"description"}
                            >
                              <TextAreaInput
                                data-plasmic-name={"textAreaInput6"}
                                data-plasmic-override={overrides.textAreaInput6}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textAreaInput6
                                )}
                                inputMode={"text"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textAreaInput6",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"dateEnd2"}
                              data-plasmic-override={overrides.dateEnd2}
                              className={classNames(
                                "__wab_instance",
                                sty.dateEnd2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qL0Cn
                                  )}
                                >
                                  {"Date et heure de fin"}
                                </div>
                              }
                              name={"date_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.timePicker5
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["timePicker5", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_YahJLWM8WHvG"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_Lyl56YKH1dQc"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_6CRf3-HMUt6J"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_c4Nx_au-55om"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["timePicker5__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "timePicker5",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "timePicker5.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"timePicker5"}
                                    data-plasmic-override={
                                      overrides.timePicker5
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1T5Yv
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore2"}
                              data-plasmic-override={overrides.minBefore2}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__soOpC
                                  )}
                                >
                                  {
                                    "Cong\u00e9dier le dispositif apr\u00e8s la fin de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_after"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select35"}
                                data-plasmic-override={overrides.select35}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select35
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select35",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min après"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min après"
                                      },
                                      {
                                        value: 60,
                                        label: "60 min après"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bCk0I
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select35__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select35",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                          </div>
                        </FormWrapper>
                      );
                    })()
                  : null}
                <FormItemWrapper
                  data-plasmic-name={"endingTaskDispo"}
                  data-plasmic-override={overrides.endingTaskDispo}
                  className={classNames("__wab_instance", sty.endingTaskDispo)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5OO8I
                      )}
                    >
                      {"Marqueur de fin de service"}
                    </div>
                  }
                  name={"ending_task_dispo"}
                >
                  <AntdSelect
                    data-plasmic-name={"select21"}
                    data-plasmic-override={overrides.select21}
                    allowClear={false}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select21)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"single"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select21",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_pae0wdlGdmQp"]]: true
                    })}
                    options={(() => {
                      try {
                        return $props.tasks
                          .filter(x => x.type != "situation")
                          .map(x => ({
                            value: x.id,
                            label: x.title
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rypjs
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_N7t2Oi9GiAe2"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_11yi_dSljRxG"]]: true
                    })}
                    popupScopeClassName={sty["select21__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_JyWqrmp-YVNf"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select21",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.formCreate.value.ending_task_dispo
                      ? true
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.formEndingTaskDispo
                        ),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["formEndingTaskDispo", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["formEndingTaskDispo", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["formEndingTaskDispo"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "formEndingTaskDispo.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "formEndingTaskDispo.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"formEndingTaskDispo"}
                          data-plasmic-override={overrides.formEndingTaskDispo}
                          {...child$Props}
                        >
                          <div
                            data-plasmic-name={"dispositifs4"}
                            data-plasmic-override={overrides.dispositifs4}
                            className={classNames(
                              projectcss.all,
                              sty.dispositifs4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wPaw
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.tasks.find(
                                      x =>
                                        x.id ==
                                        $state.formCreate.value
                                          .ending_task_dispo
                                    ).title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <FormItemWrapper
                              data-plasmic-name={"dateStart3"}
                              data-plasmic-override={overrides.dateStart3}
                              className={classNames(
                                "__wab_instance",
                                sty.dateStart3
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aahs4
                                  )}
                                >
                                  {"Date et heure de d\u00e9but"}
                                </div>
                              }
                              name={"date_start"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Date de d\u00e9but requis"
                                }
                              ]}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.timePicker6
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["timePicker6", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_9IhuaHDX_zBe"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_ciKq7MoOLwVs"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_So2AzEazyEoK"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_xxVYY3bT2nmh"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["timePicker6__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "timePicker6",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "timePicker6.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"timePicker6"}
                                    data-plasmic-override={
                                      overrides.timePicker6
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8Y9Mk
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore3"}
                              data-plasmic-override={overrides.minBefore3}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore3
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__el2Gw
                                  )}
                                >
                                  {
                                    "Convier le dispositif avant le d\u00e9but de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_before"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select36"}
                                data-plasmic-override={overrides.select36}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select36
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select36",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min avant"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min avant"
                                      },
                                      {
                                        value: 60,
                                        label: "60 min avant"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jkzRe
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select36__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select36",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"position3"}
                              data-plasmic-override={overrides.position3}
                              className={classNames(
                                "__wab_instance",
                                sty.position3
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__a6NL
                                  )}
                                >
                                  {"Positions site"}
                                </div>
                              }
                              name={"position_id"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select37"}
                                data-plasmic-override={overrides.select37}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select37
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select37",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return $props.positions.data.map(
                                      position => ({
                                        value: position.id,
                                        label: position.specific_name
                                      })
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__utN1E
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select37__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select37",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__svf1D
                              )}
                            >
                              <FormItemWrapper
                                data-plasmic-name={"libele3"}
                                data-plasmic-override={overrides.libele3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele3
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nMfnn
                                    )}
                                  >
                                    {"Libell\u00e9"}
                                  </div>
                                }
                                name={"position_name"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input20
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input20", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Libell\u00e9",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input20",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input20.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input20"}
                                      data-plasmic-override={overrides.input20}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                data-plasmic-name={"libele4"}
                                data-plasmic-override={overrides.libele4}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele4
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eW9
                                    )}
                                  >
                                    {"Secteur"}
                                  </div>
                                }
                                name={"position_sector"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input21
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input21", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Secteur",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input21",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input21.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input21"}
                                      data-plasmic-override={overrides.input21}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </Stack__>
                            <FormItemWrapper
                              data-plasmic-name={"generalDescription9"}
                              data-plasmic-override={
                                overrides.generalDescription9
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.generalDescription9
                              )}
                              initialValue={undefined}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__v3Ovm
                                  )}
                                >
                                  {"Description sp\u00e9cifique"}
                                </div>
                              }
                              name={"description"}
                            >
                              <TextAreaInput
                                data-plasmic-name={"textAreaInput7"}
                                data-plasmic-override={overrides.textAreaInput7}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textAreaInput7
                                )}
                                inputMode={"text"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textAreaInput7",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"dateEnd3"}
                              data-plasmic-override={overrides.dateEnd3}
                              className={classNames(
                                "__wab_instance",
                                sty.dateEnd3
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__duhHw
                                  )}
                                >
                                  {"Date et heure de fin"}
                                </div>
                              }
                              name={"date_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.timePicker7
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["timePicker7", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_-THWpdHrJ4rG"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_yqBdrrHhZiSu"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_R1wZz2sKM7hO"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_GufpcwqNhDO2"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["timePicker7__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "timePicker7",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "timePicker7.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"timePicker7"}
                                    data-plasmic-override={
                                      overrides.timePicker7
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kcq9E
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore4"}
                              data-plasmic-override={overrides.minBefore4}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore4
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__z884D
                                  )}
                                >
                                  {
                                    "Cong\u00e9dier le dispositif apr\u00e8s la fin de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_after"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select38"}
                                data-plasmic-override={overrides.select38}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select38
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select38",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min après"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min après"
                                      },
                                      {
                                        value: 60,
                                        label: "60 min après"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qaQls
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select38__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select38",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                          </div>
                        </FormWrapper>
                      );
                    })()
                  : null}
                <FormItemWrapper
                  data-plasmic-name={"codeTarif"}
                  data-plasmic-override={overrides.codeTarif}
                  className={classNames("__wab_instance", sty.codeTarif)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tLBlm
                      )}
                    >
                      {"Code Tarif"}
                    </div>
                  }
                  name={"staff_id"}
                  rules={[
                    { ruleType: "required", message: "Code tarif requis" }
                  ]}
                >
                  <AntdSelect
                    data-plasmic-name={"select14"}
                    data-plasmic-override={overrides.select14}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select14)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select14",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_8g1DHEub8ou-"]]: true
                    })}
                    options={(() => {
                      try {
                        return $props.staff.data.map(item => ({
                          value: item.id,
                          label: `${item.name} - ${item.code_price} - ${item.service_type}`
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uyV4P
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_TPa2OZsiotzG"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_U6R5glN4Syrz"]]: true
                    })}
                    popupScopeClassName={sty["select14__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_O_QyuYwJ43dM"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select14",
                      "value"
                    ])}
                  />

                  <div
                    data-plasmic-name={"detailsTarif"}
                    data-plasmic-override={overrides.detailsTarif}
                    className={classNames(projectcss.all, sty.detailsTarif)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__syFnl
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowUnitPrice"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showUnitPrice"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowUnitPrice"] != null &&
                          typeof $steps["updateShowUnitPrice"] === "object" &&
                          typeof $steps["updateShowUnitPrice"].then ===
                            "function"
                        ) {
                          $steps["updateShowUnitPrice"] = await $steps[
                            "updateShowUnitPrice"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.showUnitPrice
                              ? "Voir moins"
                              : "Voir plus";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Voir moins";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                    {(() => {
                      try {
                        return $state.showUnitPrice;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aeOg5
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Prix unitaire horaire jour (\u20AC HT) : " +
                                $state.prices2.unit_price_day +
                                "\n" +
                                "Prix unitaire nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_night +
                                "\n" +
                                "Prix unitaire dimanche jour (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_day +
                                "\n" +
                                "Prix unitaire dimanche nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_night +
                                "\n" +
                                "Prix unitaire férié jour (\u20AC HT) : " +
                                $state.prices2.unit_price_holiday_day +
                                "\n" +
                                "Prix unitaire férié nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_holiday_night +
                                "\n" +
                                "Prix unitaire dimanche férié jour (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_holiday_day +
                                "\n" +
                                "Prix unitaire dimanche férié nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_holiday_night
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title6"}
                  data-plasmic-override={overrides.title6}
                  className={classNames("__wab_instance", sty.title6)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x1Tm
                      )}
                    >
                      {"Nombre d'heures"}
                    </div>
                  }
                  name={"total_hours"}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    defaultValue={(() => {
                      try {
                        return $state.hoursCalculator2.totalHours;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    inputMode={"decimal"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <div
                    data-plasmic-name={"detailsHeures"}
                    data-plasmic-override={overrides.detailsHeures}
                    className={classNames(projectcss.all, sty.detailsHeures)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__unpvk
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runActionOnHoursCalculator"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "hoursCalculator",
                                action: "calculate"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnHoursCalculator"] != null &&
                          typeof $steps["runActionOnHoursCalculator"] ===
                            "object" &&
                          typeof $steps["runActionOnHoursCalculator"].then ===
                            "function"
                        ) {
                          $steps["runActionOnHoursCalculator"] = await $steps[
                            "runActionOnHoursCalculator"
                          ];
                        }

                        $steps["updateHoursCalculator2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["hoursCalculator2"]
                                },
                                operation: 0,
                                value: $refs.hoursCalculator.getCurrentResult()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateHoursCalculator2"] != null &&
                          typeof $steps["updateHoursCalculator2"] ===
                            "object" &&
                          typeof $steps["updateHoursCalculator2"].then ===
                            "function"
                        ) {
                          $steps["updateHoursCalculator2"] = await $steps[
                            "updateHoursCalculator2"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.formCreate.value.total_hours =
                                    $state.hoursCalculator2);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"Re-calculer"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__oPzFv
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowHours"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showHours"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowHours"] != null &&
                          typeof $steps["updateShowHours"] === "object" &&
                          typeof $steps["updateShowHours"].then === "function"
                        ) {
                          $steps["updateShowHours"] = await $steps[
                            "updateShowHours"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.showHours
                              ? "Voir moins"
                              : "Voir plus";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Voir moins";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                    {(() => {
                      try {
                        return $state.showHours;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rOyQj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Heures jour : " +
                                $state.hoursCalculator2.regularDayHours +
                                "\n" +
                                "Heures nuit : " +
                                $state.hoursCalculator2.regularNightHours +
                                "\n" +
                                "Heures jour dimanche : " +
                                $state.hoursCalculator2.sundayDayHours +
                                "\n" +
                                "Heures nuit dimanche : " +
                                $state.hoursCalculator2.sundayNightHours +
                                "\n" +
                                "Heures jour férié : " +
                                $state.hoursCalculator2.holidayDayHours +
                                "\n" +
                                "Heures nuit férié : " +
                                $state.hoursCalculator2.holidayNightHours +
                                "\n" +
                                "Heures jour dimanche férié : " +
                                $state.hoursCalculator2.sundayHolidayDayHours +
                                "\n" +
                                "Heures jour dimanche férié : " +
                                $state.hoursCalculator2.sundayHolidayNightHours
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"nbAgent"}
                  data-plasmic-override={overrides.nbAgent}
                  className={classNames("__wab_instance", sty.nbAgent)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tgw1G
                      )}
                    >
                      {"Nombre d\u2019agents"}
                    </div>
                  }
                  name={"agent_count"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input7),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input7", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "4",
                      size: "large",
                      type: "number",
                      value: generateStateValueProp($state, ["input7", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input7.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input7"}
                        data-plasmic-override={overrides.input7}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title7"}
                  data-plasmic-override={overrides.title7}
                  className={classNames("__wab_instance", sty.title7)}
                  initialValue={
                    $state.prices2.unit_price_day *
                      $state.hoursCalculator2.regularDayHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_night *
                      $state.hoursCalculator2.regularNightHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_sun_day *
                      $state.hoursCalculator2.sundayDayHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_sun_night *
                      $state.hoursCalculator2.sundayNightHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_holiday_day *
                      $state.hoursCalculator2.holidayDayHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_holiday_night *
                      $state.hoursCalculator2.sundayNightHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_sun_holiday_day *
                      $state.hoursCalculator2.sundayHolidayDayHours *
                      Number($state.agentCount) +
                    $state.prices2.unit_price_sun_holiday_night *
                      $state.hoursCalculator2.sundayHolidayNightHours *
                      Number($state.agentCount)
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hVyg
                      )}
                    >
                      {"Co\u00fbt total (tarif * heures * agents)"}
                    </div>
                  }
                  name={"total_price"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input10),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input10", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "47\u20ac",
                      size: "large",
                      type: "number",
                      value: generateStateValueProp($state, [
                        "input10",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input10.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input10"}
                        data-plasmic-override={overrides.input10}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    data-plasmic-name={"detailsTotal"}
                    data-plasmic-override={overrides.detailsTotal}
                    className={classNames(projectcss.all, sty.detailsTotal)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__kLgVo
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.formCreate.value.total_price =
                                    $state.prices2.unit_price_day *
                                      $state.hoursCalculator2.regularDayHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2.unit_price_night *
                                      $state.hoursCalculator2
                                        .regularNightHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2.unit_price_sun_day *
                                      $state.hoursCalculator2.sundayDayHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2.unit_price_sun_night *
                                      $state.hoursCalculator2.sundayNightHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2.unit_price_holiday_day *
                                      $state.hoursCalculator2.holidayDayHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2.unit_price_holiday_night *
                                      $state.hoursCalculator2.sundayNightHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2.unit_price_sun_holiday_day *
                                      $state.hoursCalculator2
                                        .sundayHolidayDayHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ) +
                                    $state.prices2
                                      .unit_price_sun_holiday_night *
                                      $state.hoursCalculator2
                                        .sundayHolidayNightHours *
                                      Number(
                                        $state.formCreate.value.agent_count
                                      ));
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"Re-calculer"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___2Mua0
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowCost"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showCost"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowCost"] != null &&
                          typeof $steps["updateShowCost"] === "object" &&
                          typeof $steps["updateShowCost"].then === "function"
                        ) {
                          $steps["updateShowCost"] = await $steps[
                            "updateShowCost"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.showCost ? "Voir moins" : "Voir plus";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Voir moins";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                    {(() => {
                      try {
                        return $state.showCost;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9XouD
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Prix total jour (\u20AC HT) : " +
                                $state.prices2.unit_price_day *
                                  $state.hoursCalculator2.regularDayHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_night *
                                  $state.hoursCalculator2.regularNightHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total dimanche jour (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_day *
                                  $state.hoursCalculator2.sundayDayHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total dimanche nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_night *
                                  $state.hoursCalculator2.sundayNightHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total férié jour (\u20AC HT) : " +
                                $state.prices2.unit_price_holiday_day *
                                  $state.hoursCalculator2.holidayDayHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total férié nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_holiday_night *
                                  $state.hoursCalculator2.sundayNightHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total dimanche férié jour (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_holiday_day *
                                  $state.hoursCalculator2
                                    .sundayHolidayDayHours *
                                  $state.formCreate.value.agent_count +
                                "\n" +
                                "Prix total dimanche férié nuit (\u20AC HT) : " +
                                $state.prices2.unit_price_sun_holiday_night *
                                  $state.hoursCalculator2
                                    .sundayHolidayNightHours *
                                  $state.formCreate.value.agent_count
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"mainMission2"}
                  data-plasmic-override={overrides.mainMission2}
                  className={classNames("__wab_instance", sty.mainMission2)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8YgEc
                      )}
                    >
                      {"Mission principale"}
                    </div>
                  }
                  name={"main_mission"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <AntdSelect
                    data-plasmic-name={"select18"}
                    data-plasmic-override={overrides.select18}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select18)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select18",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "main_mission")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"S\u00e9lectionner"}
                    popupScopeClassName={sty["select18__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_LWxNG5q-za49"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select18",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic5"}
                  data-plasmic-override={overrides.thematic5}
                  className={classNames("__wab_instance", sty.thematic5)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7KpKy
                      )}
                    >
                      {"Type de service"}
                    </div>
                  }
                  name={"service_type"}
                >
                  <AntdSelect
                    data-plasmic-name={"select16"}
                    data-plasmic-override={overrides.select16}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select16)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select16",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_NIWRItPOePRR"]]: true
                    })}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "service_type")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1EyMx
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_Lng-DmM4BFri"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_W2d4jtW-QBDI"]]: true
                    })}
                    popupScopeClassName={sty["select16__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_KNyRQ8YaLM_b"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select16",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic6"}
                  data-plasmic-override={overrides.thematic6}
                  className={classNames("__wab_instance", sty.thematic6)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__krVW
                      )}
                    >
                      {"Fonction"}
                    </div>
                  }
                  name={"function"}
                >
                  <AntdSelect
                    data-plasmic-name={"select17"}
                    data-plasmic-override={overrides.select17}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select17)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select17",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_mmhL7eSNgpkG"]]: true
                    })}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "function")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"S\u00e9lectionner"}
                    placeholderClassName={classNames({
                      [sty["pcls_OTBiLEOWyVe8"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_aBx1Xe39ahpZ"]]: true
                    })}
                    popupScopeClassName={sty["select17__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_mp0DrQYGis8C"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select17",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic7"}
                  data-plasmic-override={overrides.thematic7}
                  className={classNames("__wab_instance", sty.thematic7)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dKkh2
                      )}
                    >
                      {"Dominante (Th\u00e9matique)"}
                    </div>
                  }
                  name={"thematic"}
                >
                  <AntdSelect
                    data-plasmic-name={"select11"}
                    data-plasmic-override={overrides.select11}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select11)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select11",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "thematic")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"S\u00e9lectionner"}
                    popupScopeClassName={sty["select11__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_H62EZGZ8BojO"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select11",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic9"}
                  data-plasmic-override={overrides.thematic9}
                  className={classNames("__wab_instance", sty.thematic9)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qyDib
                      )}
                    >
                      {"Tags mission"}
                    </div>
                  }
                  name={"tags"}
                >
                  <AntdSelect
                    data-plasmic-name={"select19"}
                    data-plasmic-override={overrides.select19}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select19)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"tags"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select19",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(
                            x =>
                              x.category === "main_mission" ||
                              x.category === "service_type" ||
                              x.category === "function"
                          )
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"+\u00a0 S\u00e9lectionner"}
                    popupScopeClassName={sty["select19__popup"]}
                    showSearch={true}
                    size={"middle"}
                    value={generateStateValueProp($state, [
                      "select19",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic10"}
                  data-plasmic-override={overrides.thematic10}
                  className={classNames("__wab_instance", sty.thematic10)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lu9Bc
                      )}
                    >
                      {"Mat\u00e9riel/Tenue"}
                    </div>
                  }
                  name={"outfit"}
                >
                  <AntdSelect
                    data-plasmic-name={"select20"}
                    data-plasmic-override={overrides.select20}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select20)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"tags"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select20",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "outfit")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jqbau
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"+"}
                          </span>
                          <React.Fragment>
                            {" S\u00e9lectionner"}
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    }
                    popupScopeClassName={sty["select20__popup"]}
                    showSearch={true}
                    size={"middle"}
                    value={generateStateValueProp($state, [
                      "select20",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"generalDescription4"}
                  data-plasmic-override={overrides.generalDescription4}
                  className={classNames(
                    "__wab_instance",
                    sty.generalDescription4
                  )}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bLgA4
                      )}
                    >
                      {"Notes compl\u00e9mentaires"}
                    </div>
                  }
                  name={"additional_notes"}
                >
                  <TextAreaInput
                    data-plasmic-name={"textAreaInput5"}
                    data-plasmic-override={overrides.textAreaInput5}
                    className={classNames("__wab_instance", sty.textAreaInput5)}
                    inputMode={"text"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textAreaInput5",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Notes"}
                  />
                </FormItemWrapper>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hmOn7)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q0Xn
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Fichier attach\u00e9"}
                      </span>
                    </React.Fragment>
                  </div>
                  <UploadWrapper
                    data-plasmic-name={"upload3"}
                    data-plasmic-override={overrides.upload3}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload3)}
                    dragAndDropFiles={true}
                    files={generateStateValueProp($state, ["upload3", "files"])}
                    maxCount={1}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload3",
                        "files"
                      ]).apply(null, eventArgs);
                    }}
                    showUploadList={true}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__hoFmW
                      )}
                      size={"large"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2VTxq
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Importer ou d\u00e9poser un fichier"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__my9Mf
                        )}
                      >
                        {"Importer ou d\u00e9poser un fichier"}
                      </div>
                    </AntdButton>
                  </UploadWrapper>
                </Stack__>
                <Button
                  className={classNames("__wab_instance", sty.button__l5Xm)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eFc0B
                      )}
                    >
                      {"Cr\u00e9er"}
                    </div>
                  }
                  submitsForm={true}
                />
              </FormWrapper>
            );
          })()}
        </React.Fragment>
      }
      footer={<div className={classNames(projectcss.all, sty.freeBox__wNZy)} />}
      heading={
        <div
          data-plasmic-name={"frame1437254022"}
          data-plasmic-override={overrides.frame1437254022}
          className={classNames(projectcss.all, sty.frame1437254022)}
        >
          <div
            data-plasmic-name={"name2"}
            data-plasmic-override={overrides.name2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name2
            )}
          >
            {"Nouveau service"}
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254023"}
            data-plasmic-override={overrides.frame1437254023}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254023)}
          >
            <LinkSimpleIcon
              className={classNames(projectcss.all, sty.svg___5P7M6)}
              role={"img"}
            />

            <XIcon
              className={classNames(projectcss.all, sty.svg__bfuXj)}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      }
      isOpen={generateStateValueProp($state, ["modalCreateDispo", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modalCreateDispo", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modalCreateDispo: [
    "modalCreateDispo",
    "frame1437254022",
    "name2",
    "frame1437254023",
    "hoursCalculator",
    "formCreate",
    "event3",
    "select4",
    "title2",
    "input2",
    "title4",
    "input4",
    "generalDescription3",
    "textAreaInput4",
    "startingTaskDispo",
    "select15",
    "formStartingTaskDispo",
    "dispositifs3",
    "dateStart2",
    "timePicker4",
    "minBefore",
    "select34",
    "position2",
    "select33",
    "libele",
    "input18",
    "libele2",
    "input19",
    "generalDescription8",
    "textAreaInput6",
    "dateEnd2",
    "timePicker5",
    "minBefore2",
    "select35",
    "endingTaskDispo",
    "select21",
    "formEndingTaskDispo",
    "dispositifs4",
    "dateStart3",
    "timePicker6",
    "minBefore3",
    "select36",
    "position3",
    "select37",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput7",
    "dateEnd3",
    "timePicker7",
    "minBefore4",
    "select38",
    "codeTarif",
    "select14",
    "detailsTarif",
    "title6",
    "textInput",
    "detailsHeures",
    "nbAgent",
    "input7",
    "title7",
    "input10",
    "detailsTotal",
    "mainMission2",
    "select18",
    "thematic5",
    "select16",
    "thematic6",
    "select17",
    "thematic7",
    "select11",
    "thematic9",
    "select19",
    "thematic10",
    "select20",
    "generalDescription4",
    "textAreaInput5",
    "upload3"
  ],
  frame1437254022: ["frame1437254022", "name2", "frame1437254023"],
  name2: ["name2"],
  frame1437254023: ["frame1437254023"],
  hoursCalculator: ["hoursCalculator"],
  formCreate: [
    "formCreate",
    "event3",
    "select4",
    "title2",
    "input2",
    "title4",
    "input4",
    "generalDescription3",
    "textAreaInput4",
    "startingTaskDispo",
    "select15",
    "formStartingTaskDispo",
    "dispositifs3",
    "dateStart2",
    "timePicker4",
    "minBefore",
    "select34",
    "position2",
    "select33",
    "libele",
    "input18",
    "libele2",
    "input19",
    "generalDescription8",
    "textAreaInput6",
    "dateEnd2",
    "timePicker5",
    "minBefore2",
    "select35",
    "endingTaskDispo",
    "select21",
    "formEndingTaskDispo",
    "dispositifs4",
    "dateStart3",
    "timePicker6",
    "minBefore3",
    "select36",
    "position3",
    "select37",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput7",
    "dateEnd3",
    "timePicker7",
    "minBefore4",
    "select38",
    "codeTarif",
    "select14",
    "detailsTarif",
    "title6",
    "textInput",
    "detailsHeures",
    "nbAgent",
    "input7",
    "title7",
    "input10",
    "detailsTotal",
    "mainMission2",
    "select18",
    "thematic5",
    "select16",
    "thematic6",
    "select17",
    "thematic7",
    "select11",
    "thematic9",
    "select19",
    "thematic10",
    "select20",
    "generalDescription4",
    "textAreaInput5",
    "upload3"
  ],
  event3: ["event3", "select4"],
  select4: ["select4"],
  title2: ["title2", "input2"],
  input2: ["input2"],
  title4: ["title4", "input4"],
  input4: ["input4"],
  generalDescription3: ["generalDescription3", "textAreaInput4"],
  textAreaInput4: ["textAreaInput4"],
  startingTaskDispo: ["startingTaskDispo", "select15"],
  select15: ["select15"],
  formStartingTaskDispo: [
    "formStartingTaskDispo",
    "dispositifs3",
    "dateStart2",
    "timePicker4",
    "minBefore",
    "select34",
    "position2",
    "select33",
    "libele",
    "input18",
    "libele2",
    "input19",
    "generalDescription8",
    "textAreaInput6",
    "dateEnd2",
    "timePicker5",
    "minBefore2",
    "select35"
  ],
  dispositifs3: [
    "dispositifs3",
    "dateStart2",
    "timePicker4",
    "minBefore",
    "select34",
    "position2",
    "select33",
    "libele",
    "input18",
    "libele2",
    "input19",
    "generalDescription8",
    "textAreaInput6",
    "dateEnd2",
    "timePicker5",
    "minBefore2",
    "select35"
  ],
  dateStart2: ["dateStart2", "timePicker4"],
  timePicker4: ["timePicker4"],
  minBefore: ["minBefore", "select34"],
  select34: ["select34"],
  position2: ["position2", "select33"],
  select33: ["select33"],
  libele: ["libele", "input18"],
  input18: ["input18"],
  libele2: ["libele2", "input19"],
  input19: ["input19"],
  generalDescription8: ["generalDescription8", "textAreaInput6"],
  textAreaInput6: ["textAreaInput6"],
  dateEnd2: ["dateEnd2", "timePicker5"],
  timePicker5: ["timePicker5"],
  minBefore2: ["minBefore2", "select35"],
  select35: ["select35"],
  endingTaskDispo: ["endingTaskDispo", "select21"],
  select21: ["select21"],
  formEndingTaskDispo: [
    "formEndingTaskDispo",
    "dispositifs4",
    "dateStart3",
    "timePicker6",
    "minBefore3",
    "select36",
    "position3",
    "select37",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput7",
    "dateEnd3",
    "timePicker7",
    "minBefore4",
    "select38"
  ],
  dispositifs4: [
    "dispositifs4",
    "dateStart3",
    "timePicker6",
    "minBefore3",
    "select36",
    "position3",
    "select37",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput7",
    "dateEnd3",
    "timePicker7",
    "minBefore4",
    "select38"
  ],
  dateStart3: ["dateStart3", "timePicker6"],
  timePicker6: ["timePicker6"],
  minBefore3: ["minBefore3", "select36"],
  select36: ["select36"],
  position3: ["position3", "select37"],
  select37: ["select37"],
  libele3: ["libele3", "input20"],
  input20: ["input20"],
  libele4: ["libele4", "input21"],
  input21: ["input21"],
  generalDescription9: ["generalDescription9", "textAreaInput7"],
  textAreaInput7: ["textAreaInput7"],
  dateEnd3: ["dateEnd3", "timePicker7"],
  timePicker7: ["timePicker7"],
  minBefore4: ["minBefore4", "select38"],
  select38: ["select38"],
  codeTarif: ["codeTarif", "select14", "detailsTarif"],
  select14: ["select14"],
  detailsTarif: ["detailsTarif"],
  title6: ["title6", "textInput", "detailsHeures"],
  textInput: ["textInput"],
  detailsHeures: ["detailsHeures"],
  nbAgent: ["nbAgent", "input7"],
  input7: ["input7"],
  title7: ["title7", "input10", "detailsTotal"],
  input10: ["input10"],
  detailsTotal: ["detailsTotal"],
  mainMission2: ["mainMission2", "select18"],
  select18: ["select18"],
  thematic5: ["thematic5", "select16"],
  select16: ["select16"],
  thematic6: ["thematic6", "select17"],
  select17: ["select17"],
  thematic7: ["thematic7", "select11"],
  select11: ["select11"],
  thematic9: ["thematic9", "select19"],
  select19: ["select19"],
  thematic10: ["thematic10", "select20"],
  select20: ["select20"],
  generalDescription4: ["generalDescription4", "textAreaInput5"],
  textAreaInput5: ["textAreaInput5"],
  upload3: ["upload3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modalCreateDispo: typeof Modal;
  frame1437254022: "div";
  name2: "div";
  frame1437254023: "div";
  hoursCalculator: typeof HoursCalculator;
  formCreate: typeof FormWrapper;
  event3: typeof FormItemWrapper;
  select4: typeof AntdSelect;
  title2: typeof FormItemWrapper;
  input2: typeof AntdInput;
  title4: typeof FormItemWrapper;
  input4: typeof AntdInput;
  generalDescription3: typeof FormItemWrapper;
  textAreaInput4: typeof TextAreaInput;
  startingTaskDispo: typeof FormItemWrapper;
  select15: typeof AntdSelect;
  formStartingTaskDispo: typeof FormWrapper;
  dispositifs3: "div";
  dateStart2: typeof FormItemWrapper;
  timePicker4: typeof AntdDatePicker;
  minBefore: typeof FormItemWrapper;
  select34: typeof AntdSelect;
  position2: typeof FormItemWrapper;
  select33: typeof AntdSelect;
  libele: typeof FormItemWrapper;
  input18: typeof AntdInput;
  libele2: typeof FormItemWrapper;
  input19: typeof AntdInput;
  generalDescription8: typeof FormItemWrapper;
  textAreaInput6: typeof TextAreaInput;
  dateEnd2: typeof FormItemWrapper;
  timePicker5: typeof AntdDatePicker;
  minBefore2: typeof FormItemWrapper;
  select35: typeof AntdSelect;
  endingTaskDispo: typeof FormItemWrapper;
  select21: typeof AntdSelect;
  formEndingTaskDispo: typeof FormWrapper;
  dispositifs4: "div";
  dateStart3: typeof FormItemWrapper;
  timePicker6: typeof AntdDatePicker;
  minBefore3: typeof FormItemWrapper;
  select36: typeof AntdSelect;
  position3: typeof FormItemWrapper;
  select37: typeof AntdSelect;
  libele3: typeof FormItemWrapper;
  input20: typeof AntdInput;
  libele4: typeof FormItemWrapper;
  input21: typeof AntdInput;
  generalDescription9: typeof FormItemWrapper;
  textAreaInput7: typeof TextAreaInput;
  dateEnd3: typeof FormItemWrapper;
  timePicker7: typeof AntdDatePicker;
  minBefore4: typeof FormItemWrapper;
  select38: typeof AntdSelect;
  codeTarif: typeof FormItemWrapper;
  select14: typeof AntdSelect;
  detailsTarif: "div";
  title6: typeof FormItemWrapper;
  textInput: typeof TextInput;
  detailsHeures: "div";
  nbAgent: typeof FormItemWrapper;
  input7: typeof AntdInput;
  title7: typeof FormItemWrapper;
  input10: typeof AntdInput;
  detailsTotal: "div";
  mainMission2: typeof FormItemWrapper;
  select18: typeof AntdSelect;
  thematic5: typeof FormItemWrapper;
  select16: typeof AntdSelect;
  thematic6: typeof FormItemWrapper;
  select17: typeof AntdSelect;
  thematic7: typeof FormItemWrapper;
  select11: typeof AntdSelect;
  thematic9: typeof FormItemWrapper;
  select19: typeof AntdSelect;
  thematic10: typeof FormItemWrapper;
  select20: typeof AntdSelect;
  generalDescription4: typeof FormItemWrapper;
  textAreaInput5: typeof TextAreaInput;
  upload3: typeof UploadWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateDispo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateDispo__VariantsArgs;
    args?: PlasmicCreateDispo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateDispo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCreateDispo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateDispo__ArgProps,
          internalVariantPropNames: PlasmicCreateDispo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateDispo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modalCreateDispo") {
    func.displayName = "PlasmicCreateDispo";
  } else {
    func.displayName = `PlasmicCreateDispo.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateDispo = Object.assign(
  // Top-level PlasmicCreateDispo renders the root element
  makeNodeComponent("modalCreateDispo"),
  {
    // Helper components rendering sub-elements
    frame1437254022: makeNodeComponent("frame1437254022"),
    name2: makeNodeComponent("name2"),
    frame1437254023: makeNodeComponent("frame1437254023"),
    hoursCalculator: makeNodeComponent("hoursCalculator"),
    formCreate: makeNodeComponent("formCreate"),
    event3: makeNodeComponent("event3"),
    select4: makeNodeComponent("select4"),
    title2: makeNodeComponent("title2"),
    input2: makeNodeComponent("input2"),
    title4: makeNodeComponent("title4"),
    input4: makeNodeComponent("input4"),
    generalDescription3: makeNodeComponent("generalDescription3"),
    textAreaInput4: makeNodeComponent("textAreaInput4"),
    startingTaskDispo: makeNodeComponent("startingTaskDispo"),
    select15: makeNodeComponent("select15"),
    formStartingTaskDispo: makeNodeComponent("formStartingTaskDispo"),
    dispositifs3: makeNodeComponent("dispositifs3"),
    dateStart2: makeNodeComponent("dateStart2"),
    timePicker4: makeNodeComponent("timePicker4"),
    minBefore: makeNodeComponent("minBefore"),
    select34: makeNodeComponent("select34"),
    position2: makeNodeComponent("position2"),
    select33: makeNodeComponent("select33"),
    libele: makeNodeComponent("libele"),
    input18: makeNodeComponent("input18"),
    libele2: makeNodeComponent("libele2"),
    input19: makeNodeComponent("input19"),
    generalDescription8: makeNodeComponent("generalDescription8"),
    textAreaInput6: makeNodeComponent("textAreaInput6"),
    dateEnd2: makeNodeComponent("dateEnd2"),
    timePicker5: makeNodeComponent("timePicker5"),
    minBefore2: makeNodeComponent("minBefore2"),
    select35: makeNodeComponent("select35"),
    endingTaskDispo: makeNodeComponent("endingTaskDispo"),
    select21: makeNodeComponent("select21"),
    formEndingTaskDispo: makeNodeComponent("formEndingTaskDispo"),
    dispositifs4: makeNodeComponent("dispositifs4"),
    dateStart3: makeNodeComponent("dateStart3"),
    timePicker6: makeNodeComponent("timePicker6"),
    minBefore3: makeNodeComponent("minBefore3"),
    select36: makeNodeComponent("select36"),
    position3: makeNodeComponent("position3"),
    select37: makeNodeComponent("select37"),
    libele3: makeNodeComponent("libele3"),
    input20: makeNodeComponent("input20"),
    libele4: makeNodeComponent("libele4"),
    input21: makeNodeComponent("input21"),
    generalDescription9: makeNodeComponent("generalDescription9"),
    textAreaInput7: makeNodeComponent("textAreaInput7"),
    dateEnd3: makeNodeComponent("dateEnd3"),
    timePicker7: makeNodeComponent("timePicker7"),
    minBefore4: makeNodeComponent("minBefore4"),
    select38: makeNodeComponent("select38"),
    codeTarif: makeNodeComponent("codeTarif"),
    select14: makeNodeComponent("select14"),
    detailsTarif: makeNodeComponent("detailsTarif"),
    title6: makeNodeComponent("title6"),
    textInput: makeNodeComponent("textInput"),
    detailsHeures: makeNodeComponent("detailsHeures"),
    nbAgent: makeNodeComponent("nbAgent"),
    input7: makeNodeComponent("input7"),
    title7: makeNodeComponent("title7"),
    input10: makeNodeComponent("input10"),
    detailsTotal: makeNodeComponent("detailsTotal"),
    mainMission2: makeNodeComponent("mainMission2"),
    select18: makeNodeComponent("select18"),
    thematic5: makeNodeComponent("thematic5"),
    select16: makeNodeComponent("select16"),
    thematic6: makeNodeComponent("thematic6"),
    select17: makeNodeComponent("select17"),
    thematic7: makeNodeComponent("thematic7"),
    select11: makeNodeComponent("select11"),
    thematic9: makeNodeComponent("thematic9"),
    select19: makeNodeComponent("select19"),
    thematic10: makeNodeComponent("thematic10"),
    select20: makeNodeComponent("select20"),
    generalDescription4: makeNodeComponent("generalDescription4"),
    textAreaInput5: makeNodeComponent("textAreaInput5"),
    upload3: makeNodeComponent("upload3"),

    // Metadata about props expected for PlasmicCreateDispo
    internalVariantProps: PlasmicCreateDispo__VariantProps,
    internalArgProps: PlasmicCreateDispo__ArgProps
  }
);

export default PlasmicCreateDispo;
/* prettier-ignore-end */
