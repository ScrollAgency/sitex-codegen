/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: P7MLNCNmfe0b

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonLeftMenu from "../../ButtonLeftMenu"; // plasmic-import: ksk0caXhHiA4/component
import ButtonDeconnection from "../../ButtonDeconnection"; // plasmic-import: Iobg_4d9SLq2/component

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicLeftMenu.module.css"; // plasmic-import: P7MLNCNmfe0b/css

import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: mPYk0ZEUw6Wc/icon
import PlayCircleIcon from "./icons/PlasmicIcon__PlayCircle"; // plasmic-import: 3xbs9uQMOSa-/icon
import PhCalendarCheckFillIcon from "./icons/PlasmicIcon__PhCalendarCheckFill"; // plasmic-import: NYzYvDEBOieQ/icon
import PhChartDonutFillIcon from "./icons/PlasmicIcon__PhChartDonutFill"; // plasmic-import: CxVtPFpWDYul/icon
import MapPinIcon from "./icons/PlasmicIcon__MapPin"; // plasmic-import: PK3EVUNkQ_At/icon
import AddressBookIcon from "./icons/PlasmicIcon__AddressBook"; // plasmic-import: Ckm62y44qvwo/icon
import PhSignOutBoldIcon from "./icons/PlasmicIcon__PhSignOutBold"; // plasmic-import: qz78GVJjinVL/icon
import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: vxoLwbtBRoIB/icon

createPlasmicElementProxy;

export type PlasmicLeftMenu__VariantMembers = {};
export type PlasmicLeftMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeftMenu__VariantsArgs;
export const PlasmicLeftMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicLeftMenu__ArgsType = {
  onSubMenuParamsChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicLeftMenu__ArgsType;
export const PlasmicLeftMenu__ArgProps = new Array<ArgPropType>(
  "onSubMenuParamsChange"
);

export type PlasmicLeftMenu__OverridesType = {
  root?: Flex__<"div">;
  sidebarMenu?: Flex__<"div">;
  logo?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  menuLinksWrapper?: Flex__<"div">;
  menu?: Flex__<"div">;
  buttonMainCourante?: Flex__<typeof ButtonLeftMenu>;
  operations?: Flex__<"div">;
  buttonOperations?: Flex__<typeof ButtonLeftMenu>;
  subMenuOperations?: Flex__<"div">;
  sidebarMenuSublink?: Flex__<"div">;
  label?: Flex__<"div">;
  sidebarMenuSublink2?: Flex__<"div">;
  label2?: Flex__<"div">;
  buttonBilan?: Flex__<typeof ButtonLeftMenu>;
  buttonPositions?: Flex__<typeof ButtonLeftMenu>;
  buttonAnnuaire?: Flex__<typeof ButtonLeftMenu>;
  parameters?: Flex__<"div">;
  buttonOperations2?: Flex__<typeof ButtonLeftMenu>;
  subMenuOperations2?: Flex__<"div">;
  sidebarMenuSublink3?: Flex__<"div">;
  label3?: Flex__<"div">;
  sidebarMenuSublink4?: Flex__<"div">;
  label4?: Flex__<"div">;
  buttonLeftMenu?: Flex__<typeof ButtonLeftMenu>;
  frame1437254283?: Flex__<"div">;
  buttonDeconnection?: Flex__<typeof ButtonDeconnection>;
  urgenceWrapper?: Flex__<"div">;
  statusBadge?: Flex__<"div">;
  statusBadge2?: Flex__<"div">;
};

export interface DefaultLeftMenuProps {
  onSubMenuParamsChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeftMenu__RenderFunc(props: {
  variants: PlasmicLeftMenu__VariantsArgs;
  args: PlasmicLeftMenu__ArgsType;
  overrides: PlasmicLeftMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "subMenuParams",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "account",

        onChangeProp: "onSubMenuParamsChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"sidebarMenu"}
        data-plasmic-override={overrides.sidebarMenu}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebarMenu)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          hasGap={true}
          className={classNames(projectcss.all, sty.logo)}
          onClick={async event => {
            const $steps = {};

            $steps["goToMainCourante"] = true
              ? (() => {
                  const actionArgs = { destination: `/main_courante` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToMainCourante"] != null &&
              typeof $steps["goToMainCourante"] === "object" &&
              typeof $steps["goToMainCourante"].then === "function"
            ) {
              $steps["goToMainCourante"] = await $steps["goToMainCourante"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__s0U51
            )}
          >
            {"Sitex"}
          </div>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"33px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"14px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/sitex_code_gen/images/pictoSvg.svg",
              fullWidth: 19,
              fullHeight: 35,
              aspectRatio: 0.542857
            }}
          />
        </Stack__>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <PhGearFillIcon
            className={classNames(projectcss.all, sty.svg__kkGvL)}
            onClick={async event => {
              const $steps = {};

              $steps["goToParametres"] = true
                ? (() => {
                    const actionArgs = { destination: `/parametres` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToParametres"] != null &&
                typeof $steps["goToParametres"] === "object" &&
                typeof $steps["goToParametres"].then === "function"
              ) {
                $steps["goToParametres"] = await $steps["goToParametres"];
              }
            }}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"menuLinksWrapper"}
          data-plasmic-override={overrides.menuLinksWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuLinksWrapper)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            hasGap={true}
            className={classNames(projectcss.all, sty.menu)}
          >
            <ButtonLeftMenu
              data-plasmic-name={"buttonMainCourante"}
              data-plasmic-override={overrides.buttonMainCourante}
              className={classNames("__wab_instance", sty.buttonMainCourante)}
              content={"main courante"}
              isActive={(() => {
                try {
                  return $ctx.pagePath === "/main_courante";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              link={(() => {
                try {
                  return "/main_courante";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <PlayCircleIcon
                className={classNames(projectcss.all, sty.svg__smDd9)}
                role={"img"}
                style={(() => {
                  try {
                    return {
                      color:
                        $ctx.pagePath === "/main_courante"
                          ? "#9870F5"
                          : "#FBFBFB"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </ButtonLeftMenu>
            <Stack__
              as={"div"}
              data-plasmic-name={"operations"}
              data-plasmic-override={overrides.operations}
              hasGap={true}
              className={classNames(projectcss.all, sty.operations)}
            >
              <ButtonLeftMenu
                data-plasmic-name={"buttonOperations"}
                data-plasmic-override={overrides.buttonOperations}
                className={classNames("__wab_instance", sty.buttonOperations)}
                content={"op\u00e9rations"}
                isActive={(() => {
                  try {
                    return $ctx.pagePath === "/operations";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                link={(() => {
                  try {
                    return "/operations";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <PhCalendarCheckFillIcon
                  className={classNames(projectcss.all, sty.svg__x203R)}
                  role={"img"}
                  style={(() => {
                    try {
                      return {
                        color:
                          $ctx.pagePath === "/operations"
                            ? "#9870F5"
                            : "#FBFBFB"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </ButtonLeftMenu>
              {(() => {
                try {
                  return (
                    $ctx.pagePath === "/operations" ||
                    $ctx.pagePath === "/modeles" ||
                    $ctx.pagePath.includes("modele") ||
                    $ctx.pagePath.includes("runsheet")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"subMenuOperations"}
                  data-plasmic-override={overrides.subMenuOperations}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.subMenuOperations)}
                >
                  <div
                    data-plasmic-name={"sidebarMenuSublink"}
                    data-plasmic-override={overrides.sidebarMenuSublink}
                    className={classNames(
                      projectcss.all,
                      sty.sidebarMenuSublink
                    )}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToOperations"] = true
                          ? (() => {
                              const actionArgs = { destination: `/operations` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToOperations"] != null &&
                          typeof $steps["goToOperations"] === "object" &&
                          typeof $steps["goToOperations"].then === "function"
                        ) {
                          $steps["goToOperations"] = await $steps[
                            "goToOperations"
                          ];
                        }
                      }}
                      style={(() => {
                        try {
                          return {
                            color:
                              $ctx.pagePath === "/operations" ||
                              $ctx.pagePath.includes("/runsheet")
                                ? "#7641F1"
                                : "#FBFBFB",
                            "font-weight":
                              $ctx.pagePath === "/operations" ||
                              $ctx.pagePath.includes("/runsheet")
                                ? "700"
                                : "400"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {"Op\u00e9rations"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"sidebarMenuSublink2"}
                    data-plasmic-override={overrides.sidebarMenuSublink2}
                    className={classNames(
                      projectcss.all,
                      sty.sidebarMenuSublink2
                    )}
                  >
                    <div
                      data-plasmic-name={"label2"}
                      data-plasmic-override={overrides.label2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label2
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToModeles"] = true
                          ? (() => {
                              const actionArgs = { destination: `/modeles` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToModeles"] != null &&
                          typeof $steps["goToModeles"] === "object" &&
                          typeof $steps["goToModeles"].then === "function"
                        ) {
                          $steps["goToModeles"] = await $steps["goToModeles"];
                        }
                      }}
                      style={(() => {
                        try {
                          return {
                            color:
                              $ctx.pagePath === "/modeles" ||
                              $ctx.pagePath.includes("modele")
                                ? "#7641F1"
                                : "#FBFBFB",
                            "font-weight":
                              $ctx.pagePath === "/modeles" ||
                              $ctx.pagePath.includes("modele")
                                ? "700"
                                : "400"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {"Mod\u00e8les"}
                    </div>
                  </div>
                </Stack__>
              ) : null}
            </Stack__>
            <ButtonLeftMenu
              data-plasmic-name={"buttonBilan"}
              data-plasmic-override={overrides.buttonBilan}
              className={classNames("__wab_instance", sty.buttonBilan)}
              content={"bilan/retex"}
              isActive={(() => {
                try {
                  return $ctx.pagePath.includes("/bilan");
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              link={(() => {
                try {
                  return "/bilan_retex_general";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <PhChartDonutFillIcon
                className={classNames(projectcss.all, sty.svg__iplBb)}
                role={"img"}
                style={(() => {
                  try {
                    return {
                      color: $ctx.pagePath.includes("/bilan")
                        ? "#9870F5"
                        : "#FBFBFB"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </ButtonLeftMenu>
            <ButtonLeftMenu
              data-plasmic-name={"buttonPositions"}
              data-plasmic-override={overrides.buttonPositions}
              className={classNames("__wab_instance", sty.buttonPositions)}
              content={"positions site"}
              isActive={(() => {
                try {
                  return $ctx.pagePath === "/positions";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              link={(() => {
                try {
                  return "/positions";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <MapPinIcon
                className={classNames(projectcss.all, sty.svg__sscfc)}
                role={"img"}
                style={(() => {
                  try {
                    return {
                      color:
                        $ctx.pagePath === "/positions" ? "#9870F5" : "#FBFBFB"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </ButtonLeftMenu>
            <ButtonLeftMenu
              data-plasmic-name={"buttonAnnuaire"}
              data-plasmic-override={overrides.buttonAnnuaire}
              className={classNames("__wab_instance", sty.buttonAnnuaire)}
              content={"annuaire"}
              isActive={(() => {
                try {
                  return $ctx.pagePath === "/annuaire";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              link={(() => {
                try {
                  return "/annuaire";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <AddressBookIcon
                className={classNames(projectcss.all, sty.svg__hQ8Ty)}
                role={"img"}
                style={(() => {
                  try {
                    return {
                      color:
                        $ctx.pagePath === "/annuaire" ? "#9870F5" : "#FBFBFB"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </ButtonLeftMenu>
            <Stack__
              as={"div"}
              data-plasmic-name={"parameters"}
              data-plasmic-override={overrides.parameters}
              hasGap={true}
              className={classNames(projectcss.all, sty.parameters)}
            >
              {(() => {
                try {
                  return (
                    $ctx.SupabaseUser.user.user_metadata.role !== "externe"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ButtonLeftMenu
                  data-plasmic-name={"buttonOperations2"}
                  data-plasmic-override={overrides.buttonOperations2}
                  className={classNames(
                    "__wab_instance",
                    sty.buttonOperations2
                  )}
                  content={"param\u00e8tres"}
                  isActive={(() => {
                    try {
                      return $ctx.pagePath === "/parametres";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  link={(() => {
                    try {
                      return "/parametres";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <PhGearFillIcon
                    className={classNames(projectcss.all, sty.svg___3EiUh)}
                    role={"img"}
                    style={(() => {
                      try {
                        return {
                          color:
                            $ctx.pagePath === "/parametres"
                              ? "#9870F5"
                              : "#FBFBFB"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </ButtonLeftMenu>
              ) : null}
              {(() => {
                try {
                  return $ctx.pagePath === "/parametres";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"subMenuOperations2"}
                  data-plasmic-override={overrides.subMenuOperations2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.subMenuOperations2)}
                >
                  {(() => {
                    try {
                      return (
                        $ctx.SupabaseUser.user.user_metadata.role !== "externe"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"sidebarMenuSublink3"}
                      data-plasmic-override={overrides.sidebarMenuSublink3}
                      className={classNames(
                        projectcss.all,
                        sty.sidebarMenuSublink3
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSubMenuParams"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["subMenuParams"]
                                },
                                operation: 0,
                                value: "account"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSubMenuParams"] != null &&
                          typeof $steps["updateSubMenuParams"] === "object" &&
                          typeof $steps["updateSubMenuParams"].then ===
                            "function"
                        ) {
                          $steps["updateSubMenuParams"] = await $steps[
                            "updateSubMenuParams"
                          ];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"label3"}
                        data-plasmic-override={overrides.label3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label3
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSubMenuParams"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["subMenuParams"]
                                  },
                                  operation: 0,
                                  value: "account"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSubMenuParams"] != null &&
                            typeof $steps["updateSubMenuParams"] === "object" &&
                            typeof $steps["updateSubMenuParams"].then ===
                              "function"
                          ) {
                            $steps["updateSubMenuParams"] = await $steps[
                              "updateSubMenuParams"
                            ];
                          }
                        }}
                        style={(() => {
                          try {
                            return {
                              color:
                                $state.subMenuParams === "account"
                                  ? "#7641F1"
                                  : "#FBFBFB",
                              "font-weight":
                                $state.subMenuParams === "account"
                                  ? "700"
                                  : "400"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        {"Compte"}
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.SupabaseUser.user.user_metadata.role ===
                          "superAdmin" ||
                        $ctx.SupabaseUser.user.user_metadata.role ===
                          "adminClient"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"sidebarMenuSublink4"}
                      data-plasmic-override={overrides.sidebarMenuSublink4}
                      className={classNames(
                        projectcss.all,
                        sty.sidebarMenuSublink4
                      )}
                    >
                      <div
                        data-plasmic-name={"label4"}
                        data-plasmic-override={overrides.label4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label4
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSubMenuParams"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["subMenuParams"]
                                  },
                                  operation: 0,
                                  value: "admin"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSubMenuParams"] != null &&
                            typeof $steps["updateSubMenuParams"] === "object" &&
                            typeof $steps["updateSubMenuParams"].then ===
                              "function"
                          ) {
                            $steps["updateSubMenuParams"] = await $steps[
                              "updateSubMenuParams"
                            ];
                          }
                        }}
                        style={(() => {
                          try {
                            return {
                              color:
                                $state.subMenuParams === "admin"
                                  ? "#7641F1"
                                  : "#FBFBFB",
                              "font-weight":
                                $state.subMenuParams === "admin" ? "700" : "400"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        {"Administrateur"}
                      </div>
                    </div>
                  ) : null}
                </Stack__>
              ) : null}
            </Stack__>
          </Stack__>
          <ButtonLeftMenu
            data-plasmic-name={"buttonLeftMenu"}
            data-plasmic-override={overrides.buttonLeftMenu}
            className={classNames("__wab_instance", sty.buttonLeftMenu)}
          />
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame1437254283"}
          data-plasmic-override={overrides.frame1437254283}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1437254283)}
        >
          <ButtonDeconnection
            data-plasmic-name={"buttonDeconnection"}
            data-plasmic-override={overrides.buttonDeconnection}
            className={classNames("__wab_instance", sty.buttonDeconnection)}
            content={"d\u00e9connexion"}
          >
            <PhSignOutBoldIcon
              className={classNames(projectcss.all, sty.svg__rrcXl)}
              role={"img"}
            />
          </ButtonDeconnection>
        </Stack__>
        {false ? (
          <div
            data-plasmic-name={"urgenceWrapper"}
            data-plasmic-override={overrides.urgenceWrapper}
            className={classNames(projectcss.all, sty.urgenceWrapper)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge"}
              data-plasmic-override={overrides.statusBadge}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__bjqXk)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fR1Jn
                )}
              >
                {"0"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge2"}
              data-plasmic-override={overrides.statusBadge2}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge2)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__pr8U6)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sw7Ca
                )}
              >
                {"0"}
              </div>
            </Stack__>
          </div>
        ) : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebarMenu",
    "logo",
    "img",
    "freeBox",
    "menuLinksWrapper",
    "menu",
    "buttonMainCourante",
    "operations",
    "buttonOperations",
    "subMenuOperations",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonBilan",
    "buttonPositions",
    "buttonAnnuaire",
    "parameters",
    "buttonOperations2",
    "subMenuOperations2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "buttonLeftMenu",
    "frame1437254283",
    "buttonDeconnection",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  sidebarMenu: [
    "sidebarMenu",
    "logo",
    "img",
    "freeBox",
    "menuLinksWrapper",
    "menu",
    "buttonMainCourante",
    "operations",
    "buttonOperations",
    "subMenuOperations",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonBilan",
    "buttonPositions",
    "buttonAnnuaire",
    "parameters",
    "buttonOperations2",
    "subMenuOperations2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "buttonLeftMenu",
    "frame1437254283",
    "buttonDeconnection",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  logo: ["logo", "img"],
  img: ["img"],
  freeBox: ["freeBox"],
  menuLinksWrapper: [
    "menuLinksWrapper",
    "menu",
    "buttonMainCourante",
    "operations",
    "buttonOperations",
    "subMenuOperations",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonBilan",
    "buttonPositions",
    "buttonAnnuaire",
    "parameters",
    "buttonOperations2",
    "subMenuOperations2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4",
    "buttonLeftMenu"
  ],
  menu: [
    "menu",
    "buttonMainCourante",
    "operations",
    "buttonOperations",
    "subMenuOperations",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "buttonBilan",
    "buttonPositions",
    "buttonAnnuaire",
    "parameters",
    "buttonOperations2",
    "subMenuOperations2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4"
  ],
  buttonMainCourante: ["buttonMainCourante"],
  operations: [
    "operations",
    "buttonOperations",
    "subMenuOperations",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2"
  ],
  buttonOperations: ["buttonOperations"],
  subMenuOperations: [
    "subMenuOperations",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2"
  ],
  sidebarMenuSublink: ["sidebarMenuSublink", "label"],
  label: ["label"],
  sidebarMenuSublink2: ["sidebarMenuSublink2", "label2"],
  label2: ["label2"],
  buttonBilan: ["buttonBilan"],
  buttonPositions: ["buttonPositions"],
  buttonAnnuaire: ["buttonAnnuaire"],
  parameters: [
    "parameters",
    "buttonOperations2",
    "subMenuOperations2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4"
  ],
  buttonOperations2: ["buttonOperations2"],
  subMenuOperations2: [
    "subMenuOperations2",
    "sidebarMenuSublink3",
    "label3",
    "sidebarMenuSublink4",
    "label4"
  ],
  sidebarMenuSublink3: ["sidebarMenuSublink3", "label3"],
  label3: ["label3"],
  sidebarMenuSublink4: ["sidebarMenuSublink4", "label4"],
  label4: ["label4"],
  buttonLeftMenu: ["buttonLeftMenu"],
  frame1437254283: ["frame1437254283", "buttonDeconnection"],
  buttonDeconnection: ["buttonDeconnection"],
  urgenceWrapper: ["urgenceWrapper", "statusBadge", "statusBadge2"],
  statusBadge: ["statusBadge"],
  statusBadge2: ["statusBadge2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebarMenu: "div";
  logo: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
  menuLinksWrapper: "div";
  menu: "div";
  buttonMainCourante: typeof ButtonLeftMenu;
  operations: "div";
  buttonOperations: typeof ButtonLeftMenu;
  subMenuOperations: "div";
  sidebarMenuSublink: "div";
  label: "div";
  sidebarMenuSublink2: "div";
  label2: "div";
  buttonBilan: typeof ButtonLeftMenu;
  buttonPositions: typeof ButtonLeftMenu;
  buttonAnnuaire: typeof ButtonLeftMenu;
  parameters: "div";
  buttonOperations2: typeof ButtonLeftMenu;
  subMenuOperations2: "div";
  sidebarMenuSublink3: "div";
  label3: "div";
  sidebarMenuSublink4: "div";
  label4: "div";
  buttonLeftMenu: typeof ButtonLeftMenu;
  frame1437254283: "div";
  buttonDeconnection: typeof ButtonDeconnection;
  urgenceWrapper: "div";
  statusBadge: "div";
  statusBadge2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftMenu__VariantsArgs;
    args?: PlasmicLeftMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeftMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftMenu__ArgProps,
          internalVariantPropNames: PlasmicLeftMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeftMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftMenu";
  } else {
    func.displayName = `PlasmicLeftMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftMenu = Object.assign(
  // Top-level PlasmicLeftMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebarMenu: makeNodeComponent("sidebarMenu"),
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    menuLinksWrapper: makeNodeComponent("menuLinksWrapper"),
    menu: makeNodeComponent("menu"),
    buttonMainCourante: makeNodeComponent("buttonMainCourante"),
    operations: makeNodeComponent("operations"),
    buttonOperations: makeNodeComponent("buttonOperations"),
    subMenuOperations: makeNodeComponent("subMenuOperations"),
    sidebarMenuSublink: makeNodeComponent("sidebarMenuSublink"),
    label: makeNodeComponent("label"),
    sidebarMenuSublink2: makeNodeComponent("sidebarMenuSublink2"),
    label2: makeNodeComponent("label2"),
    buttonBilan: makeNodeComponent("buttonBilan"),
    buttonPositions: makeNodeComponent("buttonPositions"),
    buttonAnnuaire: makeNodeComponent("buttonAnnuaire"),
    parameters: makeNodeComponent("parameters"),
    buttonOperations2: makeNodeComponent("buttonOperations2"),
    subMenuOperations2: makeNodeComponent("subMenuOperations2"),
    sidebarMenuSublink3: makeNodeComponent("sidebarMenuSublink3"),
    label3: makeNodeComponent("label3"),
    sidebarMenuSublink4: makeNodeComponent("sidebarMenuSublink4"),
    label4: makeNodeComponent("label4"),
    buttonLeftMenu: makeNodeComponent("buttonLeftMenu"),
    frame1437254283: makeNodeComponent("frame1437254283"),
    buttonDeconnection: makeNodeComponent("buttonDeconnection"),
    urgenceWrapper: makeNodeComponent("urgenceWrapper"),
    statusBadge: makeNodeComponent("statusBadge"),
    statusBadge2: makeNodeComponent("statusBadge2"),

    // Metadata about props expected for PlasmicLeftMenu
    internalVariantProps: PlasmicLeftMenu__VariantProps,
    internalArgProps: PlasmicLeftMenu__ArgProps
  }
);

export default PlasmicLeftMenu;
/* prettier-ignore-end */
