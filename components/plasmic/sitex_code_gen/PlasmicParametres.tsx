/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: xPKP3jAplNQg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CreateUpdateVariable from "../../CreateUpdateVariable"; // plasmic-import: HIAFNqDo02dY/component
import { SupabaseCrud } from "../../authentication/SupabaseCrud/SupabaseCrud"; // plasmic-import: W3A_h361p9ml/codeComponent
import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import LeftMenu from "../../LeftMenu"; // plasmic-import: P7MLNCNmfe0b/component
import Header from "../../Header"; // plasmic-import: 2eAt6bzh0iAt/component
import { AccountParameters } from "../../../plasmic-library/authentification/AccountParameters"; // plasmic-import: Gnde4Ht4Aur5/codeComponent
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import Chip from "../../Chip"; // plasmic-import: 3J76zoPpzUT-/component
import Pagination from "../../Pagination"; // plasmic-import: UEgI-shY7DeV/component
import Button2 from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { DataGrid } from "../../../plasmic-library/ui/data_grid"; // plasmic-import: UgPv5Wh-TKEv/codeComponent
import BottomMenu from "../../BottomMenu"; // plasmic-import: x-phPVP8sWsV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicParametres.module.css"; // plasmic-import: xPKP3jAplNQg/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: 7-eqbUfgKU33/icon
import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: fCem2b1vVAiV/icon
import PencilSimpleIcon from "./icons/PlasmicIcon__PencilSimple"; // plasmic-import: AIUQid3bVY2V/icon
import TrashIcon from "./icons/PlasmicIcon__Trash"; // plasmic-import: ilEQCdjaqXbL/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: ALDCuxK9vmsQ/icon
import CheckSvgIcon from "../plasmic_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicParametres__VariantMembers = {};
export type PlasmicParametres__VariantsArgs = {};
type VariantPropType = keyof PlasmicParametres__VariantsArgs;
export const PlasmicParametres__VariantProps = new Array<VariantPropType>();

export type PlasmicParametres__ArgsType = {};
type ArgPropType = keyof PlasmicParametres__ArgsType;
export const PlasmicParametres__ArgProps = new Array<ArgPropType>();

export type PlasmicParametres__OverridesType = {
  root?: Flex__<"div">;
  createUpdateVariable2?: Flex__<typeof CreateUpdateVariable>;
  supabaseUserCrud?: Flex__<typeof SupabaseCrud>;
  userModal?: Flex__<typeof Modal>;
  titleAdd?: Flex__<"h3">;
  titleEdit?: Flex__<"h3">;
  titleDelete?: Flex__<"h3">;
  addUserForm?: Flex__<typeof FormWrapper>;
  lastname?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  firstname?: Flex__<typeof FormItemWrapper>;
  input32?: Flex__<typeof AntdInput>;
  email?: Flex__<typeof FormItemWrapper>;
  input33?: Flex__<typeof AntdInput>;
  role?: Flex__<typeof FormItemWrapper>;
  select?: Flex__<typeof AntdSelect>;
  buttonAdd3?: Flex__<typeof Button>;
  editUserForm?: Flex__<typeof FormWrapper>;
  lastname3?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  firstname3?: Flex__<typeof FormItemWrapper>;
  input34?: Flex__<typeof AntdInput>;
  email3?: Flex__<typeof FormItemWrapper>;
  input35?: Flex__<typeof AntdInput>;
  role3?: Flex__<typeof FormItemWrapper>;
  select2?: Flex__<typeof AntdSelect>;
  buttonAdd4?: Flex__<typeof Button>;
  deleteUser?: Flex__<"div">;
  userEmail?: Flex__<"h3">;
  buttonDelete?: Flex__<typeof Button>;
  all?: Flex__<"div">;
  leftMenu?: Flex__<typeof LeftMenu>;
  main?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  accountPageWrapper?: Flex__<"div">;
  accountParameters?: Flex__<typeof AccountParameters>;
  adminPageWrapper?: Flex__<"div">;
  tabButton?: Flex__<typeof TabButton>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  buttonAdd5?: Flex__<typeof Button>;
  _1?: Flex__<typeof TabContent>;
  userListTable2?: Flex__<"div">;
  tableUsers?: Flex__<"div">;
  header3?: Flex__<"div">;
  headerList2?: Flex__<"div">;
  item2?: Flex__<"div">;
  content2?: Flex__<"div">;
  userList3?: Flex__<"div">;
  lastname4?: Flex__<"div">;
  firstname4?: Flex__<"div">;
  email4?: Flex__<"div">;
  role2?: Flex__<"div">;
  chip?: Flex__<typeof Chip>;
  link2?: Flex__<"div">;
  actions2?: Flex__<"div">;
  iconTrash2?: Flex__<"div">;
  pagi?: Flex__<"div">;
  pagination?: Flex__<typeof Pagination>;
  _2?: Flex__<typeof TabContent>;
  prio?: Flex__<typeof TabButton>;
  precisions?: Flex__<typeof TabButton>;
  dominante?: Flex__<typeof TabButton>;
  impliques?: Flex__<typeof TabButton>;
  buttonAdd6?: Flex__<typeof Button>;
  dataGrid?: Flex__<typeof DataGrid>;
  bottomMenu?: Flex__<typeof BottomMenu>;
};

export interface DefaultParametresProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicParametres__RenderFunc(props: {
  variants: PlasmicParametres__VariantsArgs;
  args: PlasmicParametres__ArgsType;
  overrides: PlasmicParametres__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "newOperation",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "header.operationId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "parametersTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "users"
      },
      {
        path: "userModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "addUserForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "addUserForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "addUserForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "addUserForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input32.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input33.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "userAction",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "none"
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.SupabaseUser.user.id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editUserForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "editUserForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "editUserForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "editUserForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input34.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input35.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "userPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variablePage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "isOpenUserModal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "userSortBy",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "lastname"
      },
      {
        path: "subMenu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.leftMenu.subMenuParams;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "header.runsheet",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Runsheet"
      },
      {
        path: "leftMenu.subMenuParams",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "header.mois",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createUpdateVariable2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "createUpdateVariable2.variableId",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "createUpdateVariable2.mode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "create"
      },
      {
        path: "header.userClientId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "subTabId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "accountParameters.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "accountParameters.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    userInfos: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "deef9bf7-b91a-411d-b149-dd818f34cbfd",
        userArgs: {
          filters: [$state.userId]
        },
        cacheKey: `plasmic.$.deef9bf7-b91a-411d-b149-dd818f34cbfd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    profilesPaginated: usePlasmicDataOp(() => {
      return {
        sourceId: "d1zf2RtPRa3si4ocCd79Kx",
        opId: "a6805f85-e214-4552-8a92-9b81ef33d079",
        userArgs: {
          params: [
            $state.userPage * 8,
            (() => {
              const order =
                $state.userSortBy === "lastname"
                  ? "last_name"
                  : $state.userSortBy === "firstname"
                  ? "first_name"
                  : $state.userSortBy === "email"
                  ? "email"
                  : $state.userSortBy === "role"
                  ? "role"
                  : "";
              return order + ".asc";
            })()
          ]
        },
        cacheKey: `plasmic.$.a6805f85-e214-4552-8a92-9b81ef33d079.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    selectedUserInfos: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "0995199c-d32c-4ef4-bc2a-85ba9bd8a64f",
        userArgs: {
          filters: [$state.userId]
        },
        cacheKey: `plasmic.$.0995199c-d32c-4ef4-bc2a-85ba9bd8a64f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramVariables: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "37c8d75e-d7c7-4081-b578-1076e219b408",
        userArgs: {
          query: [
            $ctx.SupabaseUser.user == undefined
              ? null
              : $ctx.SupabaseUser.user.id
          ]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "variables";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.37c8d75e-d7c7-4081-b578-1076e219b408.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramVariablesCategory: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "4c048519-fed1-433c-9abe-ee7611f86fdc",
        userArgs: {
          query: [
            $ctx.SupabaseUser.user == undefined
              ? null
              : $ctx.SupabaseUser.user.id
          ]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "variables";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.4c048519-fed1-433c-9abe-ee7611f86fdc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicParametres.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicParametres.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicParametres.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <CreateUpdateVariable
            data-plasmic-name={"createUpdateVariable2"}
            data-plasmic-override={overrides.createUpdateVariable2}
            className={classNames("__wab_instance", sty.createUpdateVariable2)}
            clientId={(() => {
              try {
                return $state.header.userClientId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            mode={generateStateValueProp($state, [
              "createUpdateVariable2",
              "mode"
            ])}
            onModeChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "createUpdateVariable2",
                "mode"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "createUpdateVariable2",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onVariableIdChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "createUpdateVariable2",
                "variableId"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, [
              "createUpdateVariable2",
              "open"
            ])}
            variableId={generateStateValueProp($state, [
              "createUpdateVariable2",
              "variableId"
            ])}
          />

          <SupabaseCrud
            data-plasmic-name={"supabaseUserCrud"}
            data-plasmic-override={overrides.supabaseUserCrud}
            action={(() => {
              try {
                return $state.userAction;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "read";
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.supabaseUserCrud)}
            clientId={3}
            emailToUpdate={(() => {
              try {
                return $queries.selectedUserInfos.data[0].email;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            firstnameToUpdate={(() => {
              try {
                return $queries.selectedUserInfos.data[0].first_name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isOpen={(() => {
              try {
                return $state.isOpenUserModal;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            lastnameToUpdate={(() => {
              try {
                return $queries.selectedUserInfos.data[0].last_name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onClose={async event => {
              const $steps = {};

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: [
                        "a6805f85-e214-4552-8a92-9b81ef33d079"
                      ]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }

              $steps["updateUserId"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userId"]
                      },
                      operation: 1,
                      value: "_"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, undefined);
                      return undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserId"] != null &&
                typeof $steps["updateUserId"] === "object" &&
                typeof $steps["updateUserId"].then === "function"
              ) {
                $steps["updateUserId"] = await $steps["updateUserId"];
              }

              $steps["updateUserAction"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userAction"]
                      },
                      operation: 0,
                      value: "none"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserAction"] != null &&
                typeof $steps["updateUserAction"] === "object" &&
                typeof $steps["updateUserAction"].then === "function"
              ) {
                $steps["updateUserAction"] = await $steps["updateUserAction"];
              }

              $steps["updateIsOpenUserModal"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isOpenUserModal"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsOpenUserModal"] != null &&
                typeof $steps["updateIsOpenUserModal"] === "object" &&
                typeof $steps["updateIsOpenUserModal"].then === "function"
              ) {
                $steps["updateIsOpenUserModal"] = await $steps[
                  "updateIsOpenUserModal"
                ];
              }
            }}
            onSuccess={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "success",
                        (() => {
                          try {
                            return $state.userAction === "create"
                              ? "Utilisateur créé avec succès"
                              : $state.userAction === "update"
                              ? "Utilisateur mis à jour avec succès"
                              : $state.userAction === "delete"
                              ? "Utilisateur supprimé avec succès"
                              : $state.userAction === "reset"
                              ? "Mot de passe utilisateur modifié avec succès"
                              : "Aucune action  à valider";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions[
                      "plasmic-antd5-config-provider.showNotification"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
            roleToUpdate={(() => {
              try {
                return $queries.selectedUserInfos.data[0].role;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            userId={(() => {
              try {
                return $state.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <Modal
            data-plasmic-name={"userModal"}
            data-plasmic-override={overrides.userModal}
            className={classNames("__wab_instance", sty.userModal)}
            closeOnBackdropClick={false}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bGKk)}
              >
                {(() => {
                  try {
                    return $state.userAction === "create";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.addUserForm
                        ),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["addUserForm", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return $state.addUserForm.value.email;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return "pass1234";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    "/parametres",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          last_name:
                                            $state.addUserForm.value.lastname,
                                          first_name:
                                            $state.addUserForm.value.firstname,
                                          email: $state.addUserForm.value.email,
                                          role: $state.addUserForm.value.role
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "SupabaseUserGlobalContext.signup"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }

                          $steps["updateUserModalIsOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["userModal", "isOpen"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateUserModalIsOpen"] != null &&
                            typeof $steps["updateUserModalIsOpen"] ===
                              "object" &&
                            typeof $steps["updateUserModalIsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateUserModalIsOpen"] = await $steps[
                              "updateUserModalIsOpen"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "Nouvel utilisateur enregistr\u00e9"
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["addUserForm", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["addUserForm"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "addUserForm.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "addUserForm.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"addUserForm"}
                          data-plasmic-override={overrides.addUserForm}
                          {...child$Props}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"lastname"}
                            data-plasmic-override={overrides.lastname}
                            className={classNames(
                              "__wab_instance",
                              sty.lastname
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wjM7W
                                )}
                              >
                                {"Nom*"}
                              </div>
                            }
                            name={"lastname"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "Nom",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input"}
                                  data-plasmic-override={overrides.input}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"firstname"}
                            data-plasmic-override={overrides.firstname}
                            className={classNames(
                              "__wab_instance",
                              sty.firstname
                            )}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kzs1B
                                )}
                              >
                                {"Pr\u00e9nom*"}
                              </div>
                            }
                            name={"firstname"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input32
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input32", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "Pr\u00e9nom",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input32",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input32.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input32"}
                                  data-plasmic-override={overrides.input32}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"email"}
                            data-plasmic-override={overrides.email}
                            className={classNames("__wab_instance", sty.email)}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8Jmp
                                )}
                              >
                                {"E-mail*"}
                              </div>
                            }
                            name={"email"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input33
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input33", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "E-mail",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input33",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input33.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input33"}
                                  data-plasmic-override={overrides.input33}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"role"}
                            data-plasmic-override={overrides.role}
                            className={classNames("__wab_instance", sty.role)}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wa5Vi
                                )}
                              >
                                {"R\u00f4le (niveau d'autorisation)"}
                              </div>
                            }
                            name={"role"}
                          >
                            <AntdSelect
                              data-plasmic-name={"select"}
                              data-plasmic-override={overrides.select}
                              bordered={true}
                              className={classNames(
                                "__wab_instance",
                                sty.select
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "select",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              options={(() => {
                                const __composite = [
                                  { type: "option", label: null, value: null },
                                  { type: "option", label: null, value: null },
                                  { type: "option", value: null, label: null }
                                ];
                                __composite["0"]["label"] =
                                  "S\u00e9curit\u00e9";
                                __composite["0"]["value"] =
                                  "S\u00e9curit\u00e9";
                                __composite["1"]["label"] = "Billetterie";
                                __composite["1"]["value"] = "Billetterie";
                                __composite["2"]["value"] = "Autre";
                                __composite["2"]["label"] = "Autre";
                                return __composite;
                              })()}
                              placeholder={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wdYNi
                                  )}
                                >
                                  {"S\u00e9lectionner"}
                                </div>
                              }
                              popupScopeClassName={sty["select__popup"]}
                              size={"middle"}
                              value={generateStateValueProp($state, [
                                "select",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <Button
                            data-plasmic-name={"buttonAdd3"}
                            data-plasmic-override={overrides.buttonAdd3}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonAdd3
                            )}
                            end={
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__p1FSy
                                )}
                                role={"img"}
                              />
                            }
                            label={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return "Créer";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Inviter un nouvel utilisateur";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            onClick={async event => {
                              const $steps = {};
                            }}
                            submitsForm={true}
                          />
                        </FormWrapper>
                      );
                    })()
                  : null}
                {(() => {
                  try {
                    return $state.userAction === "edit";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.editUserForm
                        ),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["editUserForm", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "v6umJuHyep6kPNyCAJjouT",
                                    opId: "2d47cf66-7aff-407d-b15e-b0c715d57f20",
                                    userArgs: {
                                      conditions: [$state.userId],
                                      variables: [
                                        {
                                          role: $state.editUserForm.value.role,
                                          email:
                                            $state.editUserForm.value.email,
                                          last_name:
                                            $state.editUserForm.value.lastname,
                                          first_name:
                                            $state.editUserForm.value.first_name
                                        }
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }

                          $steps["updateUserModalIsOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["userModal", "isOpen"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateUserModalIsOpen"] != null &&
                            typeof $steps["updateUserModalIsOpen"] ===
                              "object" &&
                            typeof $steps["updateUserModalIsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateUserModalIsOpen"] = await $steps[
                              "updateUserModalIsOpen"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "Utilisateur modifi\u00e9 avec succ\u00e8s"
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["editUserForm", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["editUserForm"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "editUserForm.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "editUserForm.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"editUserForm"}
                          data-plasmic-override={overrides.editUserForm}
                          {...child$Props}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"lastname3"}
                            data-plasmic-override={overrides.lastname3}
                            className={classNames(
                              "__wab_instance",
                              sty.lastname3
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xi8CI
                                )}
                              >
                                {"Nom*"}
                              </div>
                            }
                            name={"lastname"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input2
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input2", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "Nom",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input2",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input2.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"firstname3"}
                            data-plasmic-override={overrides.firstname3}
                            className={classNames(
                              "__wab_instance",
                              sty.firstname3
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.userInfos.data[0]
                                  .raw_user_meta_data.first_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qvroK
                                )}
                              >
                                {"Pr\u00e9nom*"}
                              </div>
                            }
                            name={"firstname"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input34
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input34", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "Pr\u00e9nom",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input34",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input34.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input34"}
                                  data-plasmic-override={overrides.input34}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"email3"}
                            data-plasmic-override={overrides.email3}
                            className={classNames("__wab_instance", sty.email3)}
                            initialValue={(() => {
                              try {
                                return $queries.userInfos.data[0].email;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vzijX
                                )}
                              >
                                {"E-mail*"}
                              </div>
                            }
                            name={"email"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input35
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input35", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "E-mail",
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input35",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input35.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input35"}
                                  data-plasmic-override={overrides.input35}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"role3"}
                            data-plasmic-override={overrides.role3}
                            className={classNames("__wab_instance", sty.role3)}
                            initialValue={(() => {
                              try {
                                return $queries.userInfos.data[0]
                                  .raw_user_meta_data.role;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wpB7I
                                )}
                              >
                                {"R\u00f4le (niveau d'autorisation)"}
                              </div>
                            }
                            name={"role"}
                          >
                            <AntdSelect
                              data-plasmic-name={"select2"}
                              data-plasmic-override={overrides.select2}
                              bordered={true}
                              className={classNames(
                                "__wab_instance",
                                sty.select2
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "select2",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              options={(() => {
                                try {
                                  return [
                                    {
                                      label: "Sitex",
                                      id: "superAdmin"
                                    },
                                    {
                                      label: "Admin site",
                                      id: "adminClient"
                                    },
                                    {
                                      label: "Préparateur / Manager",
                                      id: "manager"
                                    },
                                    {
                                      label: "Opérateur externe",
                                      id: "externe"
                                    },
                                    {
                                      label: "Opérateur site",
                                      id: "operator"
                                    }
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return (() => {
                                      const __composite = [
                                        {
                                          type: "option",
                                          label: null,
                                          value: null
                                        },
                                        {
                                          type: "option",
                                          label: null,
                                          value: null
                                        },
                                        {
                                          type: "option",
                                          value: null,
                                          label: null
                                        }
                                      ];
                                      __composite["0"]["label"] =
                                        "S\u00e9curit\u00e9";
                                      __composite["0"]["value"] =
                                        "S\u00e9curit\u00e9";
                                      __composite["1"]["label"] = "Billetterie";
                                      __composite["1"]["value"] = "Billetterie";
                                      __composite["2"]["value"] = "Autre";
                                      __composite["2"]["label"] = "Autre";
                                      return __composite;
                                    })();
                                  }
                                  throw e;
                                }
                              })()}
                              placeholder={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xg5Sy
                                  )}
                                >
                                  {"S\u00e9lectionner"}
                                </div>
                              }
                              popupScopeClassName={sty["select2__popup"]}
                              size={"middle"}
                              value={generateStateValueProp($state, [
                                "select2",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <Button
                            data-plasmic-name={"buttonAdd4"}
                            data-plasmic-override={overrides.buttonAdd4}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonAdd4
                            )}
                            end={
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bd6Cd
                                )}
                                role={"img"}
                              />
                            }
                            label={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return "Créer";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Inviter un nouvel utilisateur";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            onClick={async event => {
                              const $steps = {};
                            }}
                            submitsForm={true}
                          />
                        </FormWrapper>
                      );
                    })()
                  : null}
                {(() => {
                  try {
                    return $state.userAction === "delete";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"deleteUser"}
                    data-plasmic-override={overrides.deleteUser}
                    className={classNames(projectcss.all, sty.deleteUser)}
                  >
                    {(() => {
                      try {
                        return $state.userAction === "delete";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <h3
                        data-plasmic-name={"userEmail"}
                        data-plasmic-override={overrides.userEmail}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.userEmail
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.userInfos.data[0].email;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Heading";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h3>
                    ) : null}
                    <Button
                      data-plasmic-name={"buttonDelete"}
                      data-plasmic-override={overrides.buttonDelete}
                      className={classNames("__wab_instance", sty.buttonDelete)}
                      end={
                        <PlusIcon
                          className={classNames(projectcss.all, sty.svg__cc9I0)}
                          role={"img"}
                        />
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pRmrc
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "Supprimer";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Inviter un nouvel utilisateur";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["postgresDeleteMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "v6umJuHyep6kPNyCAJjouT",
                                  opId: "74a25acd-8e8b-45c9-91e0-4d4047c27083",
                                  userArgs: {
                                    conditions: [$state.userId]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresDeleteMany"] != null &&
                          typeof $steps["postgresDeleteMany"] === "object" &&
                          typeof $steps["postgresDeleteMany"].then ===
                            "function"
                        ) {
                          $steps["postgresDeleteMany"] = await $steps[
                            "postgresDeleteMany"
                          ];
                        }

                        $steps["updateUserAction"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["userAction"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUserAction"] != null &&
                          typeof $steps["updateUserAction"] === "object" &&
                          typeof $steps["updateUserAction"].then === "function"
                        ) {
                          $steps["updateUserAction"] = await $steps[
                            "updateUserAction"
                          ];
                        }

                        $steps["updateUserId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["userId"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUserId"] != null &&
                          typeof $steps["updateUserId"] === "object" &&
                          typeof $steps["updateUserId"].then === "function"
                        ) {
                          $steps["updateUserId"] = await $steps["updateUserId"];
                        }

                        $steps["updateUserModalIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["userModal", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUserModalIsOpen"] != null &&
                          typeof $steps["updateUserModalIsOpen"] === "object" &&
                          typeof $steps["updateUserModalIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateUserModalIsOpen"] = await $steps[
                            "updateUserModalIsOpen"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "success",
                                  "Utilisateur supprim\u00e9 avec succ\u00e8s",
                                  undefined,
                                  10
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      size={"extraLarge"}
                      submitsForm={false}
                    />
                  </div>
                ) : null}
              </Stack__>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__txFRq)} />
            }
            heading={
              <div className={classNames(projectcss.all, sty.freeBox__vjOzQ)}>
                {(() => {
                  try {
                    return $state.userAction === "create";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <h3
                    data-plasmic-name={"titleAdd"}
                    data-plasmic-override={overrides.titleAdd}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.titleAdd
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.parametersTab === "users"
                            ? "Nouvel utilisateur"
                            : "Nouvelle variable";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Heading";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h3>
                ) : null}
                {(() => {
                  try {
                    return $state.userAction === "edit";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <h3
                    data-plasmic-name={"titleEdit"}
                    data-plasmic-override={overrides.titleEdit}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.titleEdit
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.parametersTab === "users"
                            ? "Modifier : " +
                                $queries.selectedUserInfos.data[0].email
                            : "Nouvelle variable";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Heading";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h3>
                ) : null}
                {(() => {
                  try {
                    return $state.userAction === "delete";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <h3
                    data-plasmic-name={"titleDelete"}
                    data-plasmic-override={overrides.titleDelete}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.titleDelete
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.parametersTab === "users"
                            ? "Supprimer l'utilisateur"
                            : "Supprimer la variable";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Heading";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h3>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__s2KPl)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUserModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["userModal", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUserModalIsOpen"] != null &&
                      typeof $steps["updateUserModalIsOpen"] === "object" &&
                      typeof $steps["updateUserModalIsOpen"].then === "function"
                    ) {
                      $steps["updateUserModalIsOpen"] = await $steps[
                        "updateUserModalIsOpen"
                      ];
                    }
                  }}
                >
                  <XIcon
                    className={classNames(projectcss.all, sty.svg__vwbr)}
                    role={"img"}
                  />
                </div>
              </div>
            }
            isOpen={generateStateValueProp($state, ["userModal", "isOpen"])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["userModal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <Button
                className={classNames("__wab_instance", sty.button__rjxA7)}
                label={"Open Modal"}
              />
            }
          />

          <div
            data-plasmic-name={"all"}
            data-plasmic-override={overrides.all}
            className={classNames(projectcss.all, sty.all)}
          >
            <LeftMenu
              data-plasmic-name={"leftMenu"}
              data-plasmic-override={overrides.leftMenu}
              className={classNames("__wab_instance", sty.leftMenu)}
              onSubMenuParamsChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "leftMenu",
                  "subMenuParams"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header)}
                onMoisChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["header", "mois"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onOperationIdChange2={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "header",
                    "operationId"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onRunsheetChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "header",
                    "runsheet"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onUserClientIdChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "header",
                    "userClientId"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                operationId={generateStateValueProp($state, [
                  "header",
                  "operationId"
                ])}
                runsheet={generateStateValueProp($state, [
                  "header",
                  "runsheet"
                ])}
              />

              {(() => {
                try {
                  return $state.subMenu === "account";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"accountPageWrapper"}
                  data-plasmic-override={overrides.accountPageWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.accountPageWrapper)}
                >
                  <AccountParameters
                    data-plasmic-name={"accountParameters"}
                    data-plasmic-override={overrides.accountParameters}
                    alertPosition={"top"}
                    className={classNames(
                      "__wab_instance",
                      sty.accountParameters
                    )}
                    confirmPassword={generateStateValueProp($state, [
                      "accountParameters",
                      "confirmPassword"
                    ])}
                    confirmPasswordLabel={"Répétez le mot de passe*"}
                    confirmPasswordPlaceholder={"Confirmez votre mot de passe"}
                    email={(() => {
                      try {
                        return $ctx.SupabaseUser.user.email;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    eyeIconColor={"#666"}
                    firstName={(() => {
                      try {
                        return $ctx.SupabaseUser.user.user_metadata.first_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    lastName={(() => {
                      try {
                        return $ctx.SupabaseUser.user.user_metadata.last_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    maxAlerts={3}
                    onConfirmPasswordChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "accountParameters",
                        "confirmPassword"
                      ]).apply(null, eventArgs);
                    }}
                    onPasswordChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "accountParameters",
                        "password"
                      ]).apply(null, eventArgs);
                    }}
                    onSubmit={async event => {
                      const $steps = {};

                      $steps["updateUserPassword"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $state.accountParameters
                                      .confirmPassword;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "SupabaseUserGlobalContext.updateUserPassword"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUserPassword"] != null &&
                        typeof $steps["updateUserPassword"] === "object" &&
                        typeof $steps["updateUserPassword"].then === "function"
                      ) {
                        $steps["updateUserPassword"] = await $steps[
                          "updateUserPassword"
                        ];
                      }
                    }}
                    password={generateStateValueProp($state, [
                      "accountParameters",
                      "password"
                    ])}
                    passwordLabel={"Nouveau mot de passe*"}
                    passwordPlaceholder={"Entrez votre nouveau mot de passe"}
                    resetSuccessMessage={
                      "Votre mot de passe a été réinitialisé avec succès!"
                    }
                    role={(() => {
                      try {
                        return $ctx.SupabaseUser.user.user_metadata.role;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showAlerts={true}
                    showPasswordStrength={true}
                    showPasswordToggle={true}
                    showTitle={false}
                    submitButtonStyle={"tertiary"}
                    submitButtonText={"Enregistrer le nouveau mot de passe"}
                    title={"Réinitialiser le mot de passe"}
                    titleHeading={"h2"}
                    wrapperStyle={"card"}
                  />
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.subMenu === "admin";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"adminPageWrapper"}
                  data-plasmic-override={overrides.adminPageWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.adminPageWrapper)}
                >
                  <TabsContainer
                    initialKey={(() => {
                      try {
                        return 1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__osgXm
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return [
                                    {
                                      label: "Gestion des utilisateurs",
                                      id: 1
                                    },
                                    {
                                      label: "Gestion des variables",
                                      id: 2
                                    }
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <TabButton
                                  data-plasmic-name={"tabButton"}
                                  data-plasmic-override={overrides.tabButton}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabButton
                                  )}
                                  key={currentIndex}
                                  tabKey={(() => {
                                    try {
                                      return currentItem.id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__uRxcB
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__on5BT
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.label;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Text";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                    type={"tag"}
                                  />
                                </TabButton>
                              );
                            })}
                            <TabUnderline
                              data-plasmic-name={"tabUnderline"}
                              data-plasmic-override={overrides.tabUnderline}
                              className={classNames(
                                "__wab_instance",
                                sty.tabUnderline
                              )}
                            />
                          </div>
                          {(() => {
                            try {
                              return $ctx.currentTabKey == 1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Button
                              data-plasmic-name={"buttonAdd5"}
                              data-plasmic-override={overrides.buttonAdd5}
                              className={classNames(
                                "__wab_instance",
                                sty.buttonAdd5
                              )}
                              end={
                                <PlusIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vBlo8
                                  )}
                                  role={"img"}
                                />
                              }
                              iconEnd={true}
                              label={"Inviter un nouvel utilisateur"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateUserAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["userAction"]
                                        },
                                        operation: 0,
                                        value: "create"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateUserAction"] != null &&
                                  typeof $steps["updateUserAction"] ===
                                    "object" &&
                                  typeof $steps["updateUserAction"].then ===
                                    "function"
                                ) {
                                  $steps["updateUserAction"] = await $steps[
                                    "updateUserAction"
                                  ];
                                }

                                $steps["updateIsOpenUserModal"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["isOpenUserModal"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIsOpenUserModal"] != null &&
                                  typeof $steps["updateIsOpenUserModal"] ===
                                    "object" &&
                                  typeof $steps["updateIsOpenUserModal"]
                                    .then === "function"
                                ) {
                                  $steps["updateIsOpenUserModal"] =
                                    await $steps["updateIsOpenUserModal"];
                                }
                              }}
                            />
                          ) : null}
                          <TabContent
                            data-plasmic-name={"_1"}
                            data-plasmic-override={overrides._1}
                            className={classNames("__wab_instance", sty._1)}
                            tabKey={(() => {
                              try {
                                return 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"userListTable2"}
                              data-plasmic-override={overrides.userListTable2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.userListTable2
                              )}
                            >
                              <div
                                data-plasmic-name={"tableUsers"}
                                data-plasmic-override={overrides.tableUsers}
                                className={classNames(
                                  projectcss.all,
                                  sty.tableUsers
                                )}
                              >
                                <div
                                  data-plasmic-name={"header3"}
                                  data-plasmic-override={overrides.header3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.header3
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"headerList2"}
                                    data-plasmic-override={
                                      overrides.headerList2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.headerList2
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return [
                                            "Nom",
                                            "Prénom",
                                            "E-mail",
                                            "Rôle",
                                            "Lien d'invitation",
                                            "Actions"
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <div
                                            data-plasmic-name={"item2"}
                                            data-plasmic-override={
                                              overrides.item2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.item2
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__dRaBa
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return currentItem;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  const order =
                                                    currentItem === "Nom"
                                                      ? "lastname"
                                                      : currentItem === "Prénom"
                                                      ? "firstname"
                                                      : currentItem === "E-mail"
                                                      ? "email"
                                                      : currentItem === "Rôle"
                                                      ? "role"
                                                      : $state.userSortBy;
                                                  return (
                                                    $state.userSortBy !== order
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <ArrowDownIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__tykXg
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["updateUserSortBy"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "userSortBy"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              currentItem ===
                                                              "Nom"
                                                                ? "lastname"
                                                                : currentItem ===
                                                                  "Prénom"
                                                                ? "firstname"
                                                                : currentItem ===
                                                                  "E-mail"
                                                                ? "email"
                                                                : currentItem ===
                                                                  "Rôle"
                                                                ? "role"
                                                                : "lastname"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateUserSortBy"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateUserSortBy"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateUserSortBy"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["updateUserSortBy"] =
                                                      await $steps[
                                                        "updateUserSortBy"
                                                      ];
                                                  }
                                                }}
                                                role={"img"}
                                              />
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (() => {
                                                  const order =
                                                    currentItem === "Nom"
                                                      ? "lastname"
                                                      : currentItem === "Prénom"
                                                      ? "firstname"
                                                      : currentItem === "E-mail"
                                                      ? "email"
                                                      : currentItem === "Rôle"
                                                      ? "role"
                                                      : currentItem === "name"
                                                      ? "link"
                                                      : currentItem === "name"
                                                      ? "action"
                                                      : "";
                                                  return (
                                                    $state.userSortBy === order
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <ArrowDownIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__cyw1
                                                )}
                                                role={"img"}
                                              />
                                            ) : null}
                                          </div>
                                        );
                                      }
                                    )}
                                  </div>
                                </div>
                                <div
                                  data-plasmic-name={"content2"}
                                  data-plasmic-override={overrides.content2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content2
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return (() => {
                                          const usersList =
                                            $queries.profilesPaginated.data.response.map(
                                              item => ({
                                                userId: item.id,
                                                last_name: item.last_name,
                                                first_name: item.first_name,
                                                email: item.email,
                                                role: item.role,
                                                link: item.link
                                              })
                                            );
                                          return $state.parametersTab ===
                                            "users"
                                            ? usersList
                                            : variablesList;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <div
                                        data-plasmic-name={"userList3"}
                                        data-plasmic-override={
                                          overrides.userList3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.userList3
                                        )}
                                        key={currentIndex}
                                      >
                                        <div
                                          data-plasmic-name={"lastname4"}
                                          data-plasmic-override={
                                            overrides.lastname4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.lastname4
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nRYeX
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.last_name;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "text";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          data-plasmic-name={"firstname4"}
                                          data-plasmic-override={
                                            overrides.firstname4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.firstname4
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hSEks
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.first_name;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "text";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          data-plasmic-name={"email4"}
                                          data-plasmic-override={
                                            overrides.email4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.email4
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__cryC
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.email;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "text";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          data-plasmic-name={"role2"}
                                          data-plasmic-override={
                                            overrides.role2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.role2
                                          )}
                                        >
                                          <Chip
                                            data-plasmic-name={"chip"}
                                            data-plasmic-override={
                                              overrides.chip
                                            }
                                            admin={(() => {
                                              try {
                                                return (
                                                  currentItem.role ===
                                                  "adminClient"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()}
                                            className={classNames(
                                              "__wab_instance",
                                              sty.chip
                                            )}
                                            currentItem={currentItem}
                                            externe={(() => {
                                              try {
                                                return (
                                                  currentItem.role === "externe"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()}
                                            manager={(() => {
                                              try {
                                                return (
                                                  currentItem.role === "manager"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()}
                                            operator={(() => {
                                              try {
                                                return (
                                                  currentItem.role ===
                                                  "operator"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()}
                                            sitex={(() => {
                                              try {
                                                return (
                                                  currentItem.role ===
                                                  "superAdmin"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()}
                                          />
                                        </div>
                                        <div
                                          data-plasmic-name={"link2"}
                                          data-plasmic-override={
                                            overrides.link2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.link2
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___4ZHha
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.link;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "text";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          data-plasmic-name={"actions2"}
                                          data-plasmic-override={
                                            overrides.actions2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.actions2
                                          )}
                                        >
                                          {(() => {
                                            try {
                                              return true;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__s7Wdl
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateUserId"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "userId"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value:
                                                          currentItem.userId
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateUserId"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateUserId"
                                                  ] === "object" &&
                                                  typeof $steps["updateUserId"]
                                                    .then === "function"
                                                ) {
                                                  $steps["updateUserId"] =
                                                    await $steps[
                                                      "updateUserId"
                                                    ];
                                                }

                                                $steps["updateUserAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "userAction"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "update"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateUserAction"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateUserAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateUserAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateUserAction"] =
                                                    await $steps[
                                                      "updateUserAction"
                                                    ];
                                                }

                                                $steps[
                                                  "updateIsOpenUserModal"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "isOpenUserModal"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: true
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateIsOpenUserModal"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateIsOpenUserModal"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateIsOpenUserModal"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateIsOpenUserModal"
                                                  ] = await $steps[
                                                    "updateIsOpenUserModal"
                                                  ];
                                                }
                                              }}
                                            >
                                              <PencilSimpleIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__bVrCh
                                                )}
                                                role={"img"}
                                              />
                                            </div>
                                          ) : null}
                                          <div
                                            data-plasmic-name={"iconTrash2"}
                                            data-plasmic-override={
                                              overrides.iconTrash2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.iconTrash2
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["updateUserId"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: ["userId"]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.userId
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateUserId"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateUserId"
                                                ] === "object" &&
                                                typeof $steps["updateUserId"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateUserId"] =
                                                  await $steps["updateUserId"];
                                              }

                                              $steps["updateUserAction"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "userAction"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "delete"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateUserAction"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateUserAction"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateUserAction"
                                                ].then === "function"
                                              ) {
                                                $steps["updateUserAction"] =
                                                  await $steps[
                                                    "updateUserAction"
                                                  ];
                                              }

                                              $steps["updateIsOpenUserModal"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "isOpenUserModal"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: true
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps[
                                                  "updateIsOpenUserModal"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateIsOpenUserModal"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateIsOpenUserModal"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateIsOpenUserModal"
                                                ] = await $steps[
                                                  "updateIsOpenUserModal"
                                                ];
                                              }
                                            }}
                                          >
                                            <TrashIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__uWmVw
                                              )}
                                              role={"img"}
                                            />
                                          </div>
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"pagi"}
                              data-plasmic-override={overrides.pagi}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.pagi)}
                            >
                              {(() => {
                                try {
                                  return $state.userPage !== 0;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDown2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___6OzS
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateUserPage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["userPage"]
                                            },
                                            operation: 3
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              oldValue - 1
                                            );
                                            return oldValue - 1;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateUserPage"] != null &&
                                      typeof $steps["updateUserPage"] ===
                                        "object" &&
                                      typeof $steps["updateUserPage"].then ===
                                        "function"
                                    ) {
                                      $steps["updateUserPage"] = await $steps[
                                        "updateUserPage"
                                      ];
                                    }
                                  }}
                                  role={"img"}
                                />
                              ) : null}
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return (() => {
                                      const totalItems = parseInt(
                                        $queries.profilesPaginated.data.headers[
                                          "content-range"
                                        ].split("/")[1]
                                      );
                                      const totalPages = Math.ceil(
                                        totalItems / 8
                                      );
                                      const pages = [...Array(totalPages)].map(
                                        (_, i) => i + 1
                                      );
                                      return pages;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__vl1Jd
                                    )}
                                    key={currentIndex}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateUserPage"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["userPage"]
                                              },
                                              operation: 0,
                                              value: currentItem - 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateUserPage"] != null &&
                                        typeof $steps["updateUserPage"] ===
                                          "object" &&
                                        typeof $steps["updateUserPage"].then ===
                                          "function"
                                      ) {
                                        $steps["updateUserPage"] = await $steps[
                                          "updateUserPage"
                                        ];
                                      }
                                    }}
                                  >
                                    <Pagination
                                      data-plasmic-name={"pagination"}
                                      data-plasmic-override={
                                        overrides.pagination
                                      }
                                      actif={(() => {
                                        try {
                                          return (
                                            currentItem === $state.userPage + 1
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.pagination
                                      )}
                                      currentItem={currentItem}
                                    />
                                  </div>
                                );
                              })}
                              {(() => {
                                try {
                                  return (() => {
                                    const totalItems = parseInt(
                                      $queries.profilesPaginated.data.headers[
                                        "content-range"
                                      ].split("/")[1]
                                    );
                                    const totalPages = Math.ceil(
                                      totalItems / 10
                                    );
                                    return $state.userPage + 1 !== totalPages;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <ChevronDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__e6ZGb
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateUserPage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["userPage"]
                                            },
                                            operation: 2
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              oldValue + 1
                                            );
                                            return oldValue + 1;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateUserPage"] != null &&
                                      typeof $steps["updateUserPage"] ===
                                        "object" &&
                                      typeof $steps["updateUserPage"].then ===
                                        "function"
                                    ) {
                                      $steps["updateUserPage"] = await $steps[
                                        "updateUserPage"
                                      ];
                                    }
                                  }}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </TabContent>
                          <TabContent
                            data-plasmic-name={"_2"}
                            data-plasmic-override={overrides._2}
                            className={classNames("__wab_instance", sty._2)}
                            tabKey={(() => {
                              try {
                                return 2;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <TabsContainer initialKey={"priority"}>
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__vmRms
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__mFs6Q
                                      )}
                                    >
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__yfnq2
                                        )}
                                      >
                                        <TabButton
                                          data-plasmic-name={"prio"}
                                          data-plasmic-override={overrides.prio}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.prio
                                          )}
                                          tabKey={"priority"}
                                        >
                                          <button
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.button,
                                              sty.button__yS0Iu,
                                              (() => {
                                                try {
                                                  return $ctx.currentTabKey ===
                                                    "priority"
                                                    ? "bg-white"
                                                    : "";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__jF23
                                              )}
                                            >
                                              {"Priorit\u00e9"}
                                            </div>
                                          </button>
                                          <Button2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__o2RWw
                                            )}
                                            color={"clear"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__vv1X
                                              )}
                                            >
                                              {"Priorit\u00e9"}
                                            </div>
                                          </Button2>
                                        </TabButton>
                                        <TabButton
                                          data-plasmic-name={"precisions"}
                                          data-plasmic-override={
                                            overrides.precisions
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.precisions
                                          )}
                                          tabKey={"precisions"}
                                        >
                                          <button
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.button,
                                              sty.button___8Y7YT,
                                              (() => {
                                                try {
                                                  return $ctx.currentTabKey ===
                                                    "precisions"
                                                    ? "bg-white"
                                                    : "";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___9Plkf
                                              )}
                                            >
                                              {"Pr\u00e9cisions (Type)"}
                                            </div>
                                          </button>
                                        </TabButton>
                                        <TabButton
                                          data-plasmic-name={"dominante"}
                                          data-plasmic-override={
                                            overrides.dominante
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.dominante
                                          )}
                                          tabKey={"thematic"}
                                        >
                                          <button
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.button,
                                              sty.button___2UxQa,
                                              (() => {
                                                try {
                                                  return $ctx.currentTabKey ===
                                                    "thematic"
                                                    ? "bg-white"
                                                    : "";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__c4NMo
                                              )}
                                            >
                                              {"Dominante (Th\u00e9matique)"}
                                            </div>
                                          </button>
                                          <Button2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__eVso9
                                            )}
                                            color={"clear"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___6HMt
                                              )}
                                            >
                                              {"Dominante (Th\u00e9matique)"}
                                            </div>
                                          </Button2>
                                        </TabButton>
                                        <TabButton
                                          data-plasmic-name={"impliques"}
                                          data-plasmic-override={
                                            overrides.impliques
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.impliques
                                          )}
                                          tabKey={"implied"}
                                        >
                                          <button
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.button,
                                              sty.button__e9RDm,
                                              (() => {
                                                try {
                                                  return $ctx.currentTabKey ===
                                                    "implied"
                                                    ? "bg-white"
                                                    : "";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__rzgzH
                                              )}
                                            >
                                              {"Impliqu\u00e9s"}
                                            </div>
                                          </button>
                                          <Button2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__zXqyg
                                            )}
                                            color={"clear"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__uQnV
                                              )}
                                            >
                                              {"Impliqu\u00e9s"}
                                            </div>
                                          </Button2>
                                        </TabButton>
                                      </Stack__>
                                      <Button
                                        data-plasmic-name={"buttonAdd6"}
                                        data-plasmic-override={
                                          overrides.buttonAdd6
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.buttonAdd6
                                        )}
                                        end={
                                          <PlusIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__cm7Z0
                                            )}
                                            role={"img"}
                                          />
                                        }
                                        iconEnd={true}
                                        label={
                                          "Cr\u00e9er une nouvelle variable"
                                        }
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps[
                                            "updateCreateUpdateVariable2Open"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "createUpdateVariable2",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ] != null &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ] = await $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ];
                                          }

                                          $steps[
                                            "updateCreateUpdateVariable2Mode"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "createUpdateVariable2",
                                                      "mode"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "create"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ] != null &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ] = await $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ];
                                          }
                                        }}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__bcMb1
                                      )}
                                    >
                                      <DataGrid
                                        data-plasmic-name={"dataGrid"}
                                        data-plasmic-override={
                                          overrides.dataGrid
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dataGrid
                                        )}
                                        columnLabels={{
                                          name: "Nom",
                                          category: "Category",
                                          color: "Couleur"
                                        }}
                                        currentPage={1}
                                        emptyStateMessage={
                                          "Aucune donnée disponible"
                                        }
                                        enableColumnReordering={true}
                                        enableExport={false}
                                        enablePrint={false}
                                        exportFormats={"csv"}
                                        monetaryColumns={["budget"]}
                                        numericColumns={["budget"]}
                                        onCopyClick={async taskId => {
                                          const $steps = {};

                                          $steps["postgresCreate"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "v6umJuHyep6kPNyCAJjouT",
                                                    opId: "4053cf04-dd77-410d-a305-325ea5c7a0a7",
                                                    userArgs: {
                                                      variables: [
                                                        $queries.paramVariables.data
                                                          .filter(
                                                            x =>
                                                              x.id ==
                                                              Number(taskId)
                                                          )
                                                          .map(
                                                            ({ id, ...rest }) =>
                                                              rest
                                                          )[0]
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "b813dc76-0c5d-4e14-ad33-c9171e58a848",
                                                      "37c8d75e-d7c7-4081-b578-1076e219b408",
                                                      "4c048519-fed1-433c-9abe-ee7611f86fdc",
                                                      "69c3bb51-f664-410c-8b2d-803bab8d1966",
                                                      "adaaa90a-e17e-4d86-9000-e03195d2d4d0",
                                                      "69c3bb51-f664-410c-8b2d-803bab8d1966",
                                                      "c33282f8-04ee-4513-8eba-486ff4909289"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresCreate"] != null &&
                                            typeof $steps["postgresCreate"] ===
                                              "object" &&
                                            typeof $steps["postgresCreate"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresCreate"] =
                                              await $steps["postgresCreate"];
                                          }

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = { args: [] };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        onDeleteClick={async taskId => {
                                          const $steps = {};

                                          $steps["postgresDeleteMany"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "v6umJuHyep6kPNyCAJjouT",
                                                    opId: "ac2b94c9-14e7-4ae7-844d-a81dfad29021",
                                                    userArgs: {
                                                      conditions: [taskId]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresDeleteMany"] !=
                                              null &&
                                            typeof $steps[
                                              "postgresDeleteMany"
                                            ] === "object" &&
                                            typeof $steps["postgresDeleteMany"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresDeleteMany"] =
                                              await $steps[
                                                "postgresDeleteMany"
                                              ];
                                          }

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "success",
                                                    "Supprim\u00e9"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        onEditClick={async taskId => {
                                          const $steps = {};

                                          $steps[
                                            "updateCreateUpdateVariable2Open"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "createUpdateVariable2",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ] != null &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ] = await $steps[
                                              "updateCreateUpdateVariable2Open"
                                            ];
                                          }

                                          $steps[
                                            "updateCreateUpdateVariable2Mode"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "createUpdateVariable2",
                                                      "mode"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "update"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ] != null &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ] = await $steps[
                                              "updateCreateUpdateVariable2Mode"
                                            ];
                                          }

                                          $steps[
                                            "updateCreateUpdateVariable2VariableId"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "createUpdateVariable2",
                                                      "variableId"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $queries.paramVariables.data.find(
                                                      x => x.id === taskId
                                                    )
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateCreateUpdateVariable2VariableId"
                                            ] != null &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2VariableId"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCreateUpdateVariable2VariableId"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateCreateUpdateVariable2VariableId"
                                            ] = await $steps[
                                              "updateCreateUpdateVariable2VariableId"
                                            ];
                                          }
                                        }}
                                        pageSize={100}
                                        pdfTitle={"Sitex - Commande"}
                                        responsive={{
                                          minWidth: "100%",
                                          horizontalOverflow: "auto",
                                          verticalOverflow: "auto",
                                          stickyHeader: true,
                                          compactOnMobile: true,
                                          breakpoint: 768
                                        }}
                                        showActions={true}
                                        tasks={(() => {
                                          try {
                                            return $queries.paramVariables.data.filter(
                                              x =>
                                                x.category ===
                                                $ctx.currentTabKey
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        theme={{
                                          headerBgColor: "#ECE6DF",
                                          rowBgColor: "#ffffff",
                                          hoverBgColor: "#f9f5ff",
                                          borderColor: "#d9cdbf",
                                          textColor: "#333333",
                                          fontSize: "14px",
                                          dragHandleColor: "#333333"
                                        }}
                                        visibleColumns={(() => {
                                          try {
                                            return [
                                              // "id",
                                              "name",
                                              "color"
                                            ];
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />

                                      <TabContent
                                        children={null}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabContent___6HtO
                                        )}
                                        tabKey={"tab1"}
                                      />

                                      <TabContent
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabContent___5ZrDw
                                        )}
                                        tabKey={"tab2"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__k5Sbw
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jZlk
                                            )}
                                          >
                                            {"Some content for tab 2"}
                                          </div>
                                        </div>
                                      </TabContent>
                                    </div>
                                  </div>
                                )}
                              </DataCtxReader__>
                            </TabsContainer>
                          </TabContent>
                        </React.Fragment>
                      )}
                    </DataCtxReader__>
                  </TabsContainer>
                </Stack__>
              ) : null}
            </div>
          </div>
          <BottomMenu
            data-plasmic-name={"bottomMenu"}
            data-plasmic-override={overrides.bottomMenu}
            className={classNames("__wab_instance", sty.bottomMenu)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "createUpdateVariable2",
    "supabaseUserCrud",
    "userModal",
    "titleAdd",
    "titleEdit",
    "titleDelete",
    "addUserForm",
    "lastname",
    "input",
    "firstname",
    "input32",
    "email",
    "input33",
    "role",
    "select",
    "buttonAdd3",
    "editUserForm",
    "lastname3",
    "input2",
    "firstname3",
    "input34",
    "email3",
    "input35",
    "role3",
    "select2",
    "buttonAdd4",
    "deleteUser",
    "userEmail",
    "buttonDelete",
    "all",
    "leftMenu",
    "main",
    "header",
    "accountPageWrapper",
    "accountParameters",
    "adminPageWrapper",
    "tabButton",
    "tabUnderline",
    "buttonAdd5",
    "_1",
    "userListTable2",
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2",
    "pagi",
    "pagination",
    "_2",
    "prio",
    "precisions",
    "dominante",
    "impliques",
    "buttonAdd6",
    "dataGrid",
    "bottomMenu"
  ],
  createUpdateVariable2: ["createUpdateVariable2"],
  supabaseUserCrud: ["supabaseUserCrud"],
  userModal: [
    "userModal",
    "titleAdd",
    "titleEdit",
    "titleDelete",
    "addUserForm",
    "lastname",
    "input",
    "firstname",
    "input32",
    "email",
    "input33",
    "role",
    "select",
    "buttonAdd3",
    "editUserForm",
    "lastname3",
    "input2",
    "firstname3",
    "input34",
    "email3",
    "input35",
    "role3",
    "select2",
    "buttonAdd4",
    "deleteUser",
    "userEmail",
    "buttonDelete"
  ],
  titleAdd: ["titleAdd"],
  titleEdit: ["titleEdit"],
  titleDelete: ["titleDelete"],
  addUserForm: [
    "addUserForm",
    "lastname",
    "input",
    "firstname",
    "input32",
    "email",
    "input33",
    "role",
    "select",
    "buttonAdd3"
  ],
  lastname: ["lastname", "input"],
  input: ["input"],
  firstname: ["firstname", "input32"],
  input32: ["input32"],
  email: ["email", "input33"],
  input33: ["input33"],
  role: ["role", "select"],
  select: ["select"],
  buttonAdd3: ["buttonAdd3"],
  editUserForm: [
    "editUserForm",
    "lastname3",
    "input2",
    "firstname3",
    "input34",
    "email3",
    "input35",
    "role3",
    "select2",
    "buttonAdd4"
  ],
  lastname3: ["lastname3", "input2"],
  input2: ["input2"],
  firstname3: ["firstname3", "input34"],
  input34: ["input34"],
  email3: ["email3", "input35"],
  input35: ["input35"],
  role3: ["role3", "select2"],
  select2: ["select2"],
  buttonAdd4: ["buttonAdd4"],
  deleteUser: ["deleteUser", "userEmail", "buttonDelete"],
  userEmail: ["userEmail"],
  buttonDelete: ["buttonDelete"],
  all: [
    "all",
    "leftMenu",
    "main",
    "header",
    "accountPageWrapper",
    "accountParameters",
    "adminPageWrapper",
    "tabButton",
    "tabUnderline",
    "buttonAdd5",
    "_1",
    "userListTable2",
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2",
    "pagi",
    "pagination",
    "_2",
    "prio",
    "precisions",
    "dominante",
    "impliques",
    "buttonAdd6",
    "dataGrid"
  ],
  leftMenu: ["leftMenu"],
  main: [
    "main",
    "header",
    "accountPageWrapper",
    "accountParameters",
    "adminPageWrapper",
    "tabButton",
    "tabUnderline",
    "buttonAdd5",
    "_1",
    "userListTable2",
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2",
    "pagi",
    "pagination",
    "_2",
    "prio",
    "precisions",
    "dominante",
    "impliques",
    "buttonAdd6",
    "dataGrid"
  ],
  header: ["header"],
  accountPageWrapper: ["accountPageWrapper", "accountParameters"],
  accountParameters: ["accountParameters"],
  adminPageWrapper: [
    "adminPageWrapper",
    "tabButton",
    "tabUnderline",
    "buttonAdd5",
    "_1",
    "userListTable2",
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2",
    "pagi",
    "pagination",
    "_2",
    "prio",
    "precisions",
    "dominante",
    "impliques",
    "buttonAdd6",
    "dataGrid"
  ],
  tabButton: ["tabButton"],
  tabUnderline: ["tabUnderline"],
  buttonAdd5: ["buttonAdd5"],
  _1: [
    "_1",
    "userListTable2",
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2",
    "pagi",
    "pagination"
  ],
  userListTable2: [
    "userListTable2",
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2"
  ],
  tableUsers: [
    "tableUsers",
    "header3",
    "headerList2",
    "item2",
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2"
  ],
  header3: ["header3", "headerList2", "item2"],
  headerList2: ["headerList2", "item2"],
  item2: ["item2"],
  content2: [
    "content2",
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2"
  ],
  userList3: [
    "userList3",
    "lastname4",
    "firstname4",
    "email4",
    "role2",
    "chip",
    "link2",
    "actions2",
    "iconTrash2"
  ],
  lastname4: ["lastname4"],
  firstname4: ["firstname4"],
  email4: ["email4"],
  role2: ["role2", "chip"],
  chip: ["chip"],
  link2: ["link2"],
  actions2: ["actions2", "iconTrash2"],
  iconTrash2: ["iconTrash2"],
  pagi: ["pagi", "pagination"],
  pagination: ["pagination"],
  _2: [
    "_2",
    "prio",
    "precisions",
    "dominante",
    "impliques",
    "buttonAdd6",
    "dataGrid"
  ],
  prio: ["prio"],
  precisions: ["precisions"],
  dominante: ["dominante"],
  impliques: ["impliques"],
  buttonAdd6: ["buttonAdd6"],
  dataGrid: ["dataGrid"],
  bottomMenu: ["bottomMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  createUpdateVariable2: typeof CreateUpdateVariable;
  supabaseUserCrud: typeof SupabaseCrud;
  userModal: typeof Modal;
  titleAdd: "h3";
  titleEdit: "h3";
  titleDelete: "h3";
  addUserForm: typeof FormWrapper;
  lastname: typeof FormItemWrapper;
  input: typeof AntdInput;
  firstname: typeof FormItemWrapper;
  input32: typeof AntdInput;
  email: typeof FormItemWrapper;
  input33: typeof AntdInput;
  role: typeof FormItemWrapper;
  select: typeof AntdSelect;
  buttonAdd3: typeof Button;
  editUserForm: typeof FormWrapper;
  lastname3: typeof FormItemWrapper;
  input2: typeof AntdInput;
  firstname3: typeof FormItemWrapper;
  input34: typeof AntdInput;
  email3: typeof FormItemWrapper;
  input35: typeof AntdInput;
  role3: typeof FormItemWrapper;
  select2: typeof AntdSelect;
  buttonAdd4: typeof Button;
  deleteUser: "div";
  userEmail: "h3";
  buttonDelete: typeof Button;
  all: "div";
  leftMenu: typeof LeftMenu;
  main: "div";
  header: typeof Header;
  accountPageWrapper: "div";
  accountParameters: typeof AccountParameters;
  adminPageWrapper: "div";
  tabButton: typeof TabButton;
  tabUnderline: typeof TabUnderline;
  buttonAdd5: typeof Button;
  _1: typeof TabContent;
  userListTable2: "div";
  tableUsers: "div";
  header3: "div";
  headerList2: "div";
  item2: "div";
  content2: "div";
  userList3: "div";
  lastname4: "div";
  firstname4: "div";
  email4: "div";
  role2: "div";
  chip: typeof Chip;
  link2: "div";
  actions2: "div";
  iconTrash2: "div";
  pagi: "div";
  pagination: typeof Pagination;
  _2: typeof TabContent;
  prio: typeof TabButton;
  precisions: typeof TabButton;
  dominante: typeof TabButton;
  impliques: typeof TabButton;
  buttonAdd6: typeof Button;
  dataGrid: typeof DataGrid;
  bottomMenu: typeof BottomMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicParametres__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicParametres__VariantsArgs;
    args?: PlasmicParametres__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicParametres__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicParametres__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicParametres__ArgProps,
          internalVariantPropNames: PlasmicParametres__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicParametres__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicParametres";
  } else {
    func.displayName = `PlasmicParametres.${nodeName}`;
  }
  return func;
}

export const PlasmicParametres = Object.assign(
  // Top-level PlasmicParametres renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    createUpdateVariable2: makeNodeComponent("createUpdateVariable2"),
    supabaseUserCrud: makeNodeComponent("supabaseUserCrud"),
    userModal: makeNodeComponent("userModal"),
    titleAdd: makeNodeComponent("titleAdd"),
    titleEdit: makeNodeComponent("titleEdit"),
    titleDelete: makeNodeComponent("titleDelete"),
    addUserForm: makeNodeComponent("addUserForm"),
    lastname: makeNodeComponent("lastname"),
    input: makeNodeComponent("input"),
    firstname: makeNodeComponent("firstname"),
    input32: makeNodeComponent("input32"),
    email: makeNodeComponent("email"),
    input33: makeNodeComponent("input33"),
    role: makeNodeComponent("role"),
    select: makeNodeComponent("select"),
    buttonAdd3: makeNodeComponent("buttonAdd3"),
    editUserForm: makeNodeComponent("editUserForm"),
    lastname3: makeNodeComponent("lastname3"),
    input2: makeNodeComponent("input2"),
    firstname3: makeNodeComponent("firstname3"),
    input34: makeNodeComponent("input34"),
    email3: makeNodeComponent("email3"),
    input35: makeNodeComponent("input35"),
    role3: makeNodeComponent("role3"),
    select2: makeNodeComponent("select2"),
    buttonAdd4: makeNodeComponent("buttonAdd4"),
    deleteUser: makeNodeComponent("deleteUser"),
    userEmail: makeNodeComponent("userEmail"),
    buttonDelete: makeNodeComponent("buttonDelete"),
    all: makeNodeComponent("all"),
    leftMenu: makeNodeComponent("leftMenu"),
    main: makeNodeComponent("main"),
    header: makeNodeComponent("header"),
    accountPageWrapper: makeNodeComponent("accountPageWrapper"),
    accountParameters: makeNodeComponent("accountParameters"),
    adminPageWrapper: makeNodeComponent("adminPageWrapper"),
    tabButton: makeNodeComponent("tabButton"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    buttonAdd5: makeNodeComponent("buttonAdd5"),
    _1: makeNodeComponent("_1"),
    userListTable2: makeNodeComponent("userListTable2"),
    tableUsers: makeNodeComponent("tableUsers"),
    header3: makeNodeComponent("header3"),
    headerList2: makeNodeComponent("headerList2"),
    item2: makeNodeComponent("item2"),
    content2: makeNodeComponent("content2"),
    userList3: makeNodeComponent("userList3"),
    lastname4: makeNodeComponent("lastname4"),
    firstname4: makeNodeComponent("firstname4"),
    email4: makeNodeComponent("email4"),
    role2: makeNodeComponent("role2"),
    chip: makeNodeComponent("chip"),
    link2: makeNodeComponent("link2"),
    actions2: makeNodeComponent("actions2"),
    iconTrash2: makeNodeComponent("iconTrash2"),
    pagi: makeNodeComponent("pagi"),
    pagination: makeNodeComponent("pagination"),
    _2: makeNodeComponent("_2"),
    prio: makeNodeComponent("prio"),
    precisions: makeNodeComponent("precisions"),
    dominante: makeNodeComponent("dominante"),
    impliques: makeNodeComponent("impliques"),
    buttonAdd6: makeNodeComponent("buttonAdd6"),
    dataGrid: makeNodeComponent("dataGrid"),
    bottomMenu: makeNodeComponent("bottomMenu"),

    // Metadata about props expected for PlasmicParametres
    internalVariantProps: PlasmicParametres__VariantProps,
    internalArgProps: PlasmicParametres__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Paramètres",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicParametres;
/* prettier-ignore-end */
