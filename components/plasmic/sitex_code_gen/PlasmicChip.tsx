/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: 3J76zoPpzUT-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicChip.module.css"; // plasmic-import: 3J76zoPpzUT-/css

createPlasmicElementProxy;

export type PlasmicChip__VariantMembers = {
  operator: "operator";
  manager: "manager";
  externe: "externe";
  admin: "admin";
  sitex: "sitex";
};
export type PlasmicChip__VariantsArgs = {
  operator?: SingleBooleanChoiceArg<"operator">;
  manager?: SingleBooleanChoiceArg<"manager">;
  externe?: SingleBooleanChoiceArg<"externe">;
  admin?: SingleBooleanChoiceArg<"admin">;
  sitex?: SingleBooleanChoiceArg<"sitex">;
};
type VariantPropType = keyof PlasmicChip__VariantsArgs;
export const PlasmicChip__VariantProps = new Array<VariantPropType>(
  "operator",
  "manager",
  "externe",
  "admin",
  "sitex"
);

export type PlasmicChip__ArgsType = { currentItem?: any };
type ArgPropType = keyof PlasmicChip__ArgsType;
export const PlasmicChip__ArgProps = new Array<ArgPropType>("currentItem");

export type PlasmicChip__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultChipProps {
  currentItem?: any;
  operator?: SingleBooleanChoiceArg<"operator">;
  manager?: SingleBooleanChoiceArg<"manager">;
  externe?: SingleBooleanChoiceArg<"externe">;
  admin?: SingleBooleanChoiceArg<"admin">;
  sitex?: SingleBooleanChoiceArg<"sitex">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChip__RenderFunc(props: {
  variants: PlasmicChip__VariantsArgs;
  args: PlasmicChip__ArgsType;
  overrides: PlasmicChip__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "operator",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.operator
      },
      {
        path: "manager",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.manager
      },
      {
        path: "externe",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.externe
      },
      {
        path: "admin",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.admin
      },
      {
        path: "sitex",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sitex
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootadmin]: hasVariant($state, "admin", "admin"),
          [sty.rootexterne]: hasVariant($state, "externe", "externe"),
          [sty.rootmanager]: hasVariant($state, "manager", "manager"),
          [sty.rootoperator]: hasVariant($state, "operator", "operator"),
          [sty.rootsitex]: hasVariant($state, "sitex", "sitex")
        }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textadmin]: hasVariant($state, "admin", "admin"),
          [sty.textexterne]: hasVariant($state, "externe", "externe"),
          [sty.textmanager]: hasVariant($state, "manager", "manager"),
          [sty.textoperator]: hasVariant($state, "operator", "operator"),
          [sty.textsitex]: hasVariant($state, "sitex", "sitex")
        })}
      >
        {hasVariant($state, "sitex", "sitex")
          ? "sitex"
          : hasVariant($state, "admin", "admin")
          ? "Admin site"
          : hasVariant($state, "externe", "externe")
          ? "Op\u00e9rateur externe"
          : hasVariant($state, "manager", "manager")
          ? "Pr\u00e9parateur/Manager"
          : hasVariant($state, "operator", "operator")
          ? "Op\u00e9rateur site"
          : "n/a"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChip__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChip__VariantsArgs;
    args?: PlasmicChip__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChip__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChip__ArgProps,
          internalVariantPropNames: PlasmicChip__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChip";
  } else {
    func.displayName = `PlasmicChip.${nodeName}`;
  }
  return func;
}

export const PlasmicChip = Object.assign(
  // Top-level PlasmicChip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicChip
    internalVariantProps: PlasmicChip__VariantProps,
    internalArgProps: PlasmicChip__ArgProps
  }
);

export default PlasmicChip;
/* prettier-ignore-end */
