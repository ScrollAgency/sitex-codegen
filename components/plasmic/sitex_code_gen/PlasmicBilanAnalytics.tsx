/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: bHETlRUqjfRd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { TextInput } from "../../../plasmic-library/forms/TextInput"; // plasmic-import: L-RrflTRMMhf/codeComponent
import { SitexTextInput } from "../../../plasmic-library/forms/SitexTextInput"; // plasmic-import: FXhuSzutgVdR/codeComponent
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { DropDown } from "../../../plasmic-library/forms/DropDown"; // plasmic-import: iAtbmaEieqny/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import LeftMenu from "../../LeftMenu"; // plasmic-import: P7MLNCNmfe0b/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import Header from "../../Header"; // plasmic-import: 2eAt6bzh0iAt/component
import RetexMenu from "../../RetexMenu"; // plasmic-import: eOKvLoQY8qlH/component
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { DataGrid } from "../../../plasmic-library/ui/data_grid"; // plasmic-import: UgPv5Wh-TKEv/codeComponent
import { BarChartMultiple } from "../../../plasmic-library/graphs/BarChartMultiple"; // plasmic-import: V_d7oFN3x1-d/codeComponent
import { Kanban } from "../../others/Kanban/Kanban"; // plasmic-import: b1_mc_uCs9FU/codeComponent
import BottomMenu from "../../BottomMenu"; // plasmic-import: x-phPVP8sWsV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicBilanAnalytics.module.css"; // plasmic-import: bHETlRUqjfRd/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon
import OutlinedIcon from "./icons/PlasmicIcon__Outlined"; // plasmic-import: KSDVg8pxipFP/icon
import FilledIcon from "./icons/PlasmicIcon__Filled"; // plasmic-import: hf9VaFZryDjW/icon
import Outlined2Icon from "./icons/PlasmicIcon__Outlined2"; // plasmic-import: KUj1hb82lL9p/icon
import Filled2Icon from "./icons/PlasmicIcon__Filled2"; // plasmic-import: bV2Rhoi89Nbo/icon
import Outlined3Icon from "./icons/PlasmicIcon__Outlined3"; // plasmic-import: F-p0hJ-0w6np/icon
import Outlined4Icon from "./icons/PlasmicIcon__Outlined4"; // plasmic-import: 0betudEa-qOp/icon
import Filled3Icon from "./icons/PlasmicIcon__Filled3"; // plasmic-import: 0fyEdXS8b5qB/icon
import Outlined5Icon from "./icons/PlasmicIcon__Outlined5"; // plasmic-import: KELtri34ORgp/icon
import Filled4Icon from "./icons/PlasmicIcon__Filled4"; // plasmic-import: 8jxFG1oHtkw2/icon
import Outlined6Icon from "./icons/PlasmicIcon__Outlined6"; // plasmic-import: vsSe2R3hqp-H/icon
import Outlined7Icon from "./icons/PlasmicIcon__Outlined7"; // plasmic-import: 9CfLC5ZQ7veK/icon
import Outlined8Icon from "./icons/PlasmicIcon__Outlined8"; // plasmic-import: 4UmaWISAaqWp/icon
import Outlined9Icon from "./icons/PlasmicIcon__Outlined9"; // plasmic-import: PWnzGUKO-rFw/icon
import IcRoundPlusIcon from "./icons/PlasmicIcon__IcRoundPlus"; // plasmic-import: 8J79OcNmiVuF/icon
import Line9Icon from "./icons/PlasmicIcon__Line9"; // plasmic-import: IdP8XmyKAA75/icon
import IcTwotoneAppleIcon from "./icons/PlasmicIcon__IcTwotoneApple"; // plasmic-import: EW8lvp8Rllk4/icon
import MdiFacebookIcon from "./icons/PlasmicIcon__MdiFacebook"; // plasmic-import: b-hWlWAZSFUh/icon
import SlidersHorizontalIcon from "./icons/PlasmicIcon__SlidersHorizontal"; // plasmic-import: yp2q2x7jxhyF/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: 7-eqbUfgKU33/icon
import SlidersHorizontal2Icon from "./icons/PlasmicIcon__SlidersHorizontal2"; // plasmic-import: vmd6SxR7gBlX/icon

createPlasmicElementProxy;

export type PlasmicBilanAnalytics__VariantMembers = {};
export type PlasmicBilanAnalytics__VariantsArgs = {};
type VariantPropType = keyof PlasmicBilanAnalytics__VariantsArgs;
export const PlasmicBilanAnalytics__VariantProps = new Array<VariantPropType>();

export type PlasmicBilanAnalytics__ArgsType = {};
type ArgPropType = keyof PlasmicBilanAnalytics__ArgsType;
export const PlasmicBilanAnalytics__ArgProps = new Array<ArgPropType>();

export type PlasmicBilanAnalytics__OverridesType = {
  root?: Flex__<"div">;
  deleteRetex?: Flex__<typeof Modal>;
  frame1437254018?: Flex__<"div">;
  name7?: Flex__<"div">;
  frame1437254021?: Flex__<"div">;
  form3?: Flex__<typeof FormWrapper>;
  content3?: Flex__<"div">;
  titre3?: Flex__<typeof TextInput>;
  texinput23?: Flex__<typeof SitexTextInput>;
  date3?: Flex__<"div">;
  label8?: Flex__<"div">;
  timePicker9?: Flex__<typeof AntdDatePicker>;
  type3?: Flex__<typeof DropDown>;
  budget3?: Flex__<typeof TextInput>;
  comments3?: Flex__<typeof TextInput>;
  input9?: Flex__<"div">;
  name6?: Flex__<"div">;
  datePickerWeb3?: Flex__<"div">;
  inputSelect3?: Flex__<"div">;
  signedByBaseFieldGroupSmall3?: Flex__<"div">;
  endDateCalendar3?: Flex__<"div">;
  inputElementTextField5?: Flex__<"div">;
  signedByBaseInputElementTextFieldSmallEnabled3?: Flex__<"div">;
  leadingArtworkContainer9?: Flex__<"div">;
  leadingArtwork5?: Flex__<"div">;
  leadingLabelContainer9?: Flex__<"div">;
  leadingLabel9?: Flex__<"div">;
  signedByBaseTypographyLabelSmall5?: Flex__<"div">;
  text55?: Flex__<"div">;
  spacer49?: Flex__<"div">;
  inputElementContentText9?: Flex__<"div">;
  signedByBaseInputElementContentTextSmallOff3?: Flex__<"div">;
  text56?: Flex__<"div">;
  trailingLabelEnhancer9?: Flex__<"div">;
  trailingLabel9?: Flex__<"div">;
  signedByBaseTypographyLabelSmall6?: Flex__<"div">;
  text57?: Flex__<"div">;
  spacer50?: Flex__<"div">;
  trailingArtworkContainer9?: Flex__<"div">;
  trailingArtwork9?: Flex__<"div">;
  calendar3?: Flex__<"div">;
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3?: Flex__<"div">;
  leadingArtworkContainer10?: Flex__<"div">;
  text58?: Flex__<"div">;
  leadingLabelContainer10?: Flex__<"div">;
  leadingLabel10?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall5?: Flex__<"div">;
  text59?: Flex__<"div">;
  spacer51?: Flex__<"div">;
  inputElementContentText10?: Flex__<"div">;
  signedByBaseInputElementContentTextXSmallWebOff3?: Flex__<"div">;
  text60?: Flex__<"div">;
  trailingLabelEnhancer10?: Flex__<"div">;
  trailingLabel10?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall6?: Flex__<"div">;
  text61?: Flex__<"div">;
  spacer52?: Flex__<"div">;
  trailingArtworkContainer10?: Flex__<"div">;
  trailingArtwork10?: Flex__<"div">;
  selectIndicatorContainer5?: Flex__<"div">;
  chevronIcon5?: Flex__<"div">;
  inputElementHint5?: Flex__<"div">;
  heart21?: Flex__<"div">;
  hint5?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall5?: Flex__<"div">;
  text62?: Flex__<"div">;
  spacer53?: Flex__<"div">;
  inputElementSelect3?: Flex__<"div">;
  signedByBaseInputElementSelectMediumSingleDefaultActive3?: Flex__<"div">;
  selectFrame3?: Flex__<"div">;
  leadingArtworkContainer11?: Flex__<"div">;
  leadingArtwork6?: Flex__<"div">;
  leadingLabelContainer11?: Flex__<"div">;
  leadingLabel11?: Flex__<"div">;
  signedByBaseTypographyLabelMedium13?: Flex__<"div">;
  text63?: Flex__<"div">;
  spacer54?: Flex__<"div">;
  inputElementContentText11?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff5?: Flex__<"div">;
  text64?: Flex__<"div">;
  trailingLabelEnhancer11?: Flex__<"div">;
  trailingLabel11?: Flex__<"div">;
  signedByBaseTypographyLabelMedium14?: Flex__<"div">;
  text65?: Flex__<"div">;
  spacer55?: Flex__<"div">;
  trailingArtworkContainer11?: Flex__<"div">;
  trailingArtwork11?: Flex__<"div">;
  selectIndicatorContainer6?: Flex__<"div">;
  chevronIcon6?: Flex__<"div">;
  menu3?: Flex__<"div">;
  signedByBaseMenuListMedium3?: Flex__<"div">;
  menuItem11?: Flex__<"div">;
  signedByBaseMenuItemSearchMediumNoneEnabled3?: Flex__<"div">;
  searchField3?: Flex__<"div">;
  signedByBaseSearchFieldMediumEnabled3?: Flex__<"div">;
  inputElementLabel3?: Flex__<"div">;
  signedByBaseInputElementLabelMedium3?: Flex__<"div">;
  typography29?: Flex__<"div">;
  signedByBaseTypographyLabelMedium15?: Flex__<"div">;
  text66?: Flex__<"div">;
  spacer56?: Flex__<"div">;
  characterCountFrame3?: Flex__<"div">;
  heart22?: Flex__<"div">;
  typography30?: Flex__<"div">;
  signedByBaseTypographyLabelMedium16?: Flex__<"div">;
  text67?: Flex__<"div">;
  spacer57?: Flex__<"div">;
  inputElementTextField6?: Flex__<"div">;
  signedByBaseInputElementTextFieldMediumEnabled3?: Flex__<"div">;
  leadingArtworkContainer12?: Flex__<"div">;
  search3?: Flex__<"div">;
  leadingLabelContainer12?: Flex__<"div">;
  leadingLabel12?: Flex__<"div">;
  signedByBaseTypographyLabelMedium17?: Flex__<"div">;
  text68?: Flex__<"div">;
  spacer58?: Flex__<"div">;
  inputElementContentText12?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff6?: Flex__<"div">;
  text69?: Flex__<"div">;
  trailingLabelEnhancer12?: Flex__<"div">;
  trailingLabel12?: Flex__<"div">;
  signedByBaseTypographyLabelMedium18?: Flex__<"div">;
  text70?: Flex__<"div">;
  spacer59?: Flex__<"div">;
  trailingArtworkContainer12?: Flex__<"div">;
  trailingArtwork12?: Flex__<"div">;
  inputElementHint6?: Flex__<"div">;
  heart23?: Flex__<"div">;
  hint6?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall6?: Flex__<"div">;
  text71?: Flex__<"div">;
  spacer60?: Flex__<"div">;
  menuItem12?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled9?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked9?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked9?: Flex__<"div">;
  icon9?: Flex__<"div">;
  leadingEnhancer9?: Flex__<"div">;
  heart24?: Flex__<"div">;
  textFrame9?: Flex__<"div">;
  leadingText9?: Flex__<"div">;
  typography31?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium25?: Flex__<"div">;
  text72?: Flex__<"div">;
  spacer61?: Flex__<"div">;
  typography32?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium26?: Flex__<"div">;
  text73?: Flex__<"div">;
  spacer62?: Flex__<"div">;
  typography33?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium27?: Flex__<"div">;
  spacer63?: Flex__<"div">;
  trailingEnhancer9?: Flex__<"div">;
  heart25?: Flex__<"div">;
  menuItem13?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled10?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked10?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked10?: Flex__<"div">;
  icon10?: Flex__<"div">;
  leadingEnhancer10?: Flex__<"div">;
  heart26?: Flex__<"div">;
  textFrame10?: Flex__<"div">;
  leadingText10?: Flex__<"div">;
  typography34?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium28?: Flex__<"div">;
  text74?: Flex__<"div">;
  spacer64?: Flex__<"div">;
  typography35?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium29?: Flex__<"div">;
  text75?: Flex__<"div">;
  spacer65?: Flex__<"div">;
  typography36?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium30?: Flex__<"div">;
  spacer66?: Flex__<"div">;
  trailingEnhancer10?: Flex__<"div">;
  checkmarkSmall3?: Flex__<"div">;
  menuItem14?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled11?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked11?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked11?: Flex__<"div">;
  icon11?: Flex__<"div">;
  leadingEnhancer11?: Flex__<"div">;
  heart27?: Flex__<"div">;
  textFrame11?: Flex__<"div">;
  leadingText11?: Flex__<"div">;
  typography37?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium31?: Flex__<"div">;
  text76?: Flex__<"div">;
  spacer67?: Flex__<"div">;
  typography38?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium32?: Flex__<"div">;
  text77?: Flex__<"div">;
  spacer68?: Flex__<"div">;
  typography39?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium33?: Flex__<"div">;
  spacer69?: Flex__<"div">;
  trailingEnhancer11?: Flex__<"div">;
  heart28?: Flex__<"div">;
  menuItem15?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled12?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked12?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked12?: Flex__<"div">;
  icon12?: Flex__<"div">;
  leadingEnhancer12?: Flex__<"div">;
  heart29?: Flex__<"div">;
  textFrame12?: Flex__<"div">;
  leadingText12?: Flex__<"div">;
  typography40?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium34?: Flex__<"div">;
  text78?: Flex__<"div">;
  spacer70?: Flex__<"div">;
  typography41?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium35?: Flex__<"div">;
  text79?: Flex__<"div">;
  spacer71?: Flex__<"div">;
  typography42?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium36?: Flex__<"div">;
  spacer72?: Flex__<"div">;
  trailingEnhancer12?: Flex__<"div">;
  heart30?: Flex__<"div">;
  scrollBar3?: Flex__<"div">;
  model3?: Flex__<typeof DropDown>;
  buttons3?: Flex__<"div">;
  button9?: Flex__<typeof Button>;
  frame1073713926?: Flex__<"div">;
  frame1073713932?: Flex__<"div">;
  button10?: Flex__<typeof Button>;
  button11?: Flex__<"div">;
  button12?: Flex__<"div">;
  editRetex2?: Flex__<typeof Modal>;
  frame1437254017?: Flex__<"div">;
  name3?: Flex__<"div">;
  frame1437254020?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  textArea2?: Flex__<typeof AntdTextArea>;
  select3?: Flex__<typeof AntdSelect>;
  content2?: Flex__<"div">;
  titre2?: Flex__<typeof TextInput>;
  texinput22?: Flex__<typeof SitexTextInput>;
  date2?: Flex__<"div">;
  label7?: Flex__<"div">;
  timePicker2?: Flex__<typeof AntdDatePicker>;
  type2?: Flex__<typeof DropDown>;
  budget2?: Flex__<typeof TextInput>;
  comments2?: Flex__<typeof TextInput>;
  input6?: Flex__<"div">;
  name4?: Flex__<"div">;
  datePickerWeb2?: Flex__<"div">;
  inputSelect2?: Flex__<"div">;
  signedByBaseFieldGroupSmall2?: Flex__<"div">;
  endDateCalendar2?: Flex__<"div">;
  inputElementTextField3?: Flex__<"div">;
  signedByBaseInputElementTextFieldSmallEnabled2?: Flex__<"div">;
  leadingArtworkContainer5?: Flex__<"div">;
  leadingArtwork3?: Flex__<"div">;
  leadingLabelContainer5?: Flex__<"div">;
  leadingLabel5?: Flex__<"div">;
  signedByBaseTypographyLabelSmall3?: Flex__<"div">;
  text30?: Flex__<"div">;
  spacer23?: Flex__<"div">;
  inputElementContentText5?: Flex__<"div">;
  signedByBaseInputElementContentTextSmallOff2?: Flex__<"div">;
  text31?: Flex__<"div">;
  trailingLabelEnhancer5?: Flex__<"div">;
  trailingLabel5?: Flex__<"div">;
  signedByBaseTypographyLabelSmall4?: Flex__<"div">;
  text32?: Flex__<"div">;
  spacer24?: Flex__<"div">;
  trailingArtworkContainer5?: Flex__<"div">;
  trailingArtwork5?: Flex__<"div">;
  calendar2?: Flex__<"div">;
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2?: Flex__<"div">;
  leadingArtworkContainer6?: Flex__<"div">;
  text33?: Flex__<"div">;
  leadingLabelContainer6?: Flex__<"div">;
  leadingLabel6?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall3?: Flex__<"div">;
  text34?: Flex__<"div">;
  spacer25?: Flex__<"div">;
  inputElementContentText6?: Flex__<"div">;
  signedByBaseInputElementContentTextXSmallWebOff2?: Flex__<"div">;
  text35?: Flex__<"div">;
  trailingLabelEnhancer6?: Flex__<"div">;
  trailingLabel6?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall4?: Flex__<"div">;
  text36?: Flex__<"div">;
  spacer26?: Flex__<"div">;
  trailingArtworkContainer6?: Flex__<"div">;
  trailingArtwork6?: Flex__<"div">;
  selectIndicatorContainer3?: Flex__<"div">;
  chevronIcon3?: Flex__<"div">;
  inputElementHint3?: Flex__<"div">;
  heart11?: Flex__<"div">;
  hint3?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall3?: Flex__<"div">;
  text37?: Flex__<"div">;
  spacer30?: Flex__<"div">;
  inputElementSelect2?: Flex__<"div">;
  signedByBaseInputElementSelectMediumSingleDefaultActive2?: Flex__<"div">;
  selectFrame2?: Flex__<"div">;
  leadingArtworkContainer7?: Flex__<"div">;
  leadingArtwork4?: Flex__<"div">;
  leadingLabelContainer7?: Flex__<"div">;
  leadingLabel7?: Flex__<"div">;
  signedByBaseTypographyLabelMedium7?: Flex__<"div">;
  text38?: Flex__<"div">;
  spacer27?: Flex__<"div">;
  inputElementContentText7?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff3?: Flex__<"div">;
  text39?: Flex__<"div">;
  trailingLabelEnhancer7?: Flex__<"div">;
  trailingLabel7?: Flex__<"div">;
  signedByBaseTypographyLabelMedium8?: Flex__<"div">;
  text40?: Flex__<"div">;
  spacer31?: Flex__<"div">;
  trailingArtworkContainer7?: Flex__<"div">;
  trailingArtwork7?: Flex__<"div">;
  selectIndicatorContainer4?: Flex__<"div">;
  chevronIcon4?: Flex__<"div">;
  menu2?: Flex__<"div">;
  signedByBaseMenuListMedium2?: Flex__<"div">;
  menuItem6?: Flex__<"div">;
  signedByBaseMenuItemSearchMediumNoneEnabled2?: Flex__<"div">;
  searchField2?: Flex__<"div">;
  signedByBaseSearchFieldMediumEnabled2?: Flex__<"div">;
  inputElementLabel2?: Flex__<"div">;
  signedByBaseInputElementLabelMedium2?: Flex__<"div">;
  typography15?: Flex__<"div">;
  signedByBaseTypographyLabelMedium9?: Flex__<"div">;
  text41?: Flex__<"div">;
  spacer32?: Flex__<"div">;
  characterCountFrame2?: Flex__<"div">;
  heart12?: Flex__<"div">;
  typography16?: Flex__<"div">;
  signedByBaseTypographyLabelMedium10?: Flex__<"div">;
  text42?: Flex__<"div">;
  spacer33?: Flex__<"div">;
  inputElementTextField4?: Flex__<"div">;
  signedByBaseInputElementTextFieldMediumEnabled2?: Flex__<"div">;
  leadingArtworkContainer8?: Flex__<"div">;
  search2?: Flex__<"div">;
  leadingLabelContainer8?: Flex__<"div">;
  leadingLabel8?: Flex__<"div">;
  signedByBaseTypographyLabelMedium11?: Flex__<"div">;
  text43?: Flex__<"div">;
  spacer34?: Flex__<"div">;
  inputElementContentText8?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff4?: Flex__<"div">;
  text44?: Flex__<"div">;
  trailingLabelEnhancer8?: Flex__<"div">;
  trailingLabel8?: Flex__<"div">;
  signedByBaseTypographyLabelMedium12?: Flex__<"div">;
  text45?: Flex__<"div">;
  spacer35?: Flex__<"div">;
  trailingArtworkContainer8?: Flex__<"div">;
  trailingArtwork8?: Flex__<"div">;
  inputElementHint4?: Flex__<"div">;
  heart13?: Flex__<"div">;
  hint4?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall4?: Flex__<"div">;
  text46?: Flex__<"div">;
  spacer36?: Flex__<"div">;
  menuItem7?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled5?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked5?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked5?: Flex__<"div">;
  icon5?: Flex__<"div">;
  leadingEnhancer5?: Flex__<"div">;
  heart14?: Flex__<"div">;
  textFrame5?: Flex__<"div">;
  leadingText5?: Flex__<"div">;
  typography17?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium13?: Flex__<"div">;
  text47?: Flex__<"div">;
  spacer37?: Flex__<"div">;
  typography18?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium14?: Flex__<"div">;
  text48?: Flex__<"div">;
  spacer38?: Flex__<"div">;
  typography19?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium15?: Flex__<"div">;
  spacer39?: Flex__<"div">;
  trailingEnhancer5?: Flex__<"div">;
  heart15?: Flex__<"div">;
  menuItem8?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled6?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked6?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked6?: Flex__<"div">;
  icon6?: Flex__<"div">;
  leadingEnhancer6?: Flex__<"div">;
  heart16?: Flex__<"div">;
  textFrame6?: Flex__<"div">;
  leadingText6?: Flex__<"div">;
  typography20?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium16?: Flex__<"div">;
  text49?: Flex__<"div">;
  spacer40?: Flex__<"div">;
  typography21?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium17?: Flex__<"div">;
  text50?: Flex__<"div">;
  spacer41?: Flex__<"div">;
  typography22?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium18?: Flex__<"div">;
  spacer42?: Flex__<"div">;
  trailingEnhancer6?: Flex__<"div">;
  checkmarkSmall2?: Flex__<"div">;
  menuItem9?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled7?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked7?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked7?: Flex__<"div">;
  icon7?: Flex__<"div">;
  leadingEnhancer7?: Flex__<"div">;
  heart17?: Flex__<"div">;
  textFrame7?: Flex__<"div">;
  leadingText7?: Flex__<"div">;
  typography23?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium19?: Flex__<"div">;
  text51?: Flex__<"div">;
  spacer43?: Flex__<"div">;
  typography24?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium20?: Flex__<"div">;
  text52?: Flex__<"div">;
  spacer44?: Flex__<"div">;
  typography25?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium21?: Flex__<"div">;
  spacer45?: Flex__<"div">;
  trailingEnhancer7?: Flex__<"div">;
  heart18?: Flex__<"div">;
  menuItem10?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled8?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked8?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked8?: Flex__<"div">;
  icon8?: Flex__<"div">;
  leadingEnhancer8?: Flex__<"div">;
  heart19?: Flex__<"div">;
  textFrame8?: Flex__<"div">;
  leadingText8?: Flex__<"div">;
  typography26?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium22?: Flex__<"div">;
  text53?: Flex__<"div">;
  spacer46?: Flex__<"div">;
  typography27?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium23?: Flex__<"div">;
  text54?: Flex__<"div">;
  spacer47?: Flex__<"div">;
  typography28?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium24?: Flex__<"div">;
  spacer48?: Flex__<"div">;
  trailingEnhancer8?: Flex__<"div">;
  heart20?: Flex__<"div">;
  scrollBar2?: Flex__<"div">;
  model2?: Flex__<typeof DropDown>;
  buttons2?: Flex__<"div">;
  button5?: Flex__<typeof Button>;
  frame1073713925?: Flex__<"div">;
  frame1073713931?: Flex__<"div">;
  button6?: Flex__<typeof Button>;
  button7?: Flex__<"div">;
  button8?: Flex__<"div">;
  newRetex2?: Flex__<typeof Modal>;
  frame1437254016?: Flex__<"div">;
  name?: Flex__<"div">;
  frame1437254019?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  textArea?: Flex__<typeof AntdTextArea>;
  select2?: Flex__<typeof AntdSelect>;
  content?: Flex__<"div">;
  titre?: Flex__<typeof TextInput>;
  texinput2?: Flex__<typeof SitexTextInput>;
  date?: Flex__<"div">;
  label6?: Flex__<"div">;
  timePicker?: Flex__<typeof AntdDatePicker>;
  type?: Flex__<typeof DropDown>;
  budget?: Flex__<typeof TextInput>;
  comments?: Flex__<typeof TextInput>;
  input5?: Flex__<"div">;
  name2?: Flex__<"div">;
  datePickerWeb?: Flex__<"div">;
  inputSelect?: Flex__<"div">;
  signedByBaseFieldGroupSmall?: Flex__<"div">;
  endDateCalendar?: Flex__<"div">;
  inputElementTextField?: Flex__<"div">;
  signedByBaseInputElementTextFieldSmallEnabled?: Flex__<"div">;
  leadingArtworkContainer?: Flex__<"div">;
  leadingArtwork?: Flex__<"div">;
  leadingLabelContainer?: Flex__<"div">;
  leadingLabel?: Flex__<"div">;
  signedByBaseTypographyLabelSmall?: Flex__<"div">;
  text5?: Flex__<"div">;
  spacer?: Flex__<"div">;
  inputElementContentText?: Flex__<"div">;
  signedByBaseInputElementContentTextSmallOff?: Flex__<"div">;
  text6?: Flex__<"div">;
  trailingLabelEnhancer?: Flex__<"div">;
  trailingLabel?: Flex__<"div">;
  signedByBaseTypographyLabelSmall2?: Flex__<"div">;
  text7?: Flex__<"div">;
  spacer2?: Flex__<"div">;
  trailingArtworkContainer?: Flex__<"div">;
  trailingArtwork?: Flex__<"div">;
  calendar?: Flex__<"div">;
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled?: Flex__<"div">;
  leadingArtworkContainer2?: Flex__<"div">;
  text8?: Flex__<"div">;
  leadingLabelContainer2?: Flex__<"div">;
  leadingLabel2?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall?: Flex__<"div">;
  text9?: Flex__<"div">;
  spacer3?: Flex__<"div">;
  inputElementContentText2?: Flex__<"div">;
  signedByBaseInputElementContentTextXSmallWebOff?: Flex__<"div">;
  text10?: Flex__<"div">;
  trailingLabelEnhancer2?: Flex__<"div">;
  trailingLabel2?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall2?: Flex__<"div">;
  text11?: Flex__<"div">;
  spacer4?: Flex__<"div">;
  trailingArtworkContainer2?: Flex__<"div">;
  trailingArtwork2?: Flex__<"div">;
  selectIndicatorContainer?: Flex__<"div">;
  chevronIcon?: Flex__<"div">;
  inputElementHint?: Flex__<"div">;
  heart?: Flex__<"div">;
  hint?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall?: Flex__<"div">;
  text12?: Flex__<"div">;
  spacer28?: Flex__<"div">;
  inputElementSelect?: Flex__<"div">;
  signedByBaseInputElementSelectMediumSingleDefaultActive?: Flex__<"div">;
  selectFrame?: Flex__<"div">;
  leadingArtworkContainer3?: Flex__<"div">;
  leadingArtwork2?: Flex__<"div">;
  leadingLabelContainer3?: Flex__<"div">;
  leadingLabel3?: Flex__<"div">;
  signedByBaseTypographyLabelMedium?: Flex__<"div">;
  text13?: Flex__<"div">;
  spacer5?: Flex__<"div">;
  inputElementContentText3?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff?: Flex__<"div">;
  text14?: Flex__<"div">;
  trailingLabelEnhancer3?: Flex__<"div">;
  trailingLabel3?: Flex__<"div">;
  signedByBaseTypographyLabelMedium2?: Flex__<"div">;
  text15?: Flex__<"div">;
  spacer6?: Flex__<"div">;
  trailingArtworkContainer3?: Flex__<"div">;
  trailingArtwork3?: Flex__<"div">;
  selectIndicatorContainer2?: Flex__<"div">;
  chevronIcon2?: Flex__<"div">;
  menu?: Flex__<"div">;
  signedByBaseMenuListMedium?: Flex__<"div">;
  menuItem?: Flex__<"div">;
  signedByBaseMenuItemSearchMediumNoneEnabled?: Flex__<"div">;
  searchField?: Flex__<"div">;
  signedByBaseSearchFieldMediumEnabled?: Flex__<"div">;
  inputElementLabel?: Flex__<"div">;
  signedByBaseInputElementLabelMedium?: Flex__<"div">;
  typography?: Flex__<"div">;
  signedByBaseTypographyLabelMedium3?: Flex__<"div">;
  text16?: Flex__<"div">;
  spacer7?: Flex__<"div">;
  characterCountFrame?: Flex__<"div">;
  heart2?: Flex__<"div">;
  typography2?: Flex__<"div">;
  signedByBaseTypographyLabelMedium4?: Flex__<"div">;
  text17?: Flex__<"div">;
  spacer8?: Flex__<"div">;
  inputElementTextField2?: Flex__<"div">;
  signedByBaseInputElementTextFieldMediumEnabled?: Flex__<"div">;
  leadingArtworkContainer4?: Flex__<"div">;
  search?: Flex__<"div">;
  leadingLabelContainer4?: Flex__<"div">;
  leadingLabel4?: Flex__<"div">;
  signedByBaseTypographyLabelMedium5?: Flex__<"div">;
  text18?: Flex__<"div">;
  spacer9?: Flex__<"div">;
  inputElementContentText4?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff2?: Flex__<"div">;
  text19?: Flex__<"div">;
  trailingLabelEnhancer4?: Flex__<"div">;
  trailingLabel4?: Flex__<"div">;
  signedByBaseTypographyLabelMedium6?: Flex__<"div">;
  text20?: Flex__<"div">;
  spacer10?: Flex__<"div">;
  trailingArtworkContainer4?: Flex__<"div">;
  trailingArtwork4?: Flex__<"div">;
  inputElementHint2?: Flex__<"div">;
  heart3?: Flex__<"div">;
  hint2?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall2?: Flex__<"div">;
  text21?: Flex__<"div">;
  spacer29?: Flex__<"div">;
  menuItem2?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked?: Flex__<"div">;
  icon?: Flex__<"div">;
  leadingEnhancer?: Flex__<"div">;
  heart4?: Flex__<"div">;
  textFrame?: Flex__<"div">;
  leadingText?: Flex__<"div">;
  typography3?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium?: Flex__<"div">;
  text22?: Flex__<"div">;
  spacer11?: Flex__<"div">;
  typography4?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium2?: Flex__<"div">;
  text23?: Flex__<"div">;
  spacer12?: Flex__<"div">;
  typography5?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium3?: Flex__<"div">;
  spacer13?: Flex__<"div">;
  trailingEnhancer?: Flex__<"div">;
  heart5?: Flex__<"div">;
  menuItem3?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled2?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked2?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked2?: Flex__<"div">;
  icon2?: Flex__<"div">;
  leadingEnhancer2?: Flex__<"div">;
  heart6?: Flex__<"div">;
  textFrame2?: Flex__<"div">;
  leadingText2?: Flex__<"div">;
  typography6?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium4?: Flex__<"div">;
  text24?: Flex__<"div">;
  spacer14?: Flex__<"div">;
  typography7?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium5?: Flex__<"div">;
  text25?: Flex__<"div">;
  spacer15?: Flex__<"div">;
  typography8?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium6?: Flex__<"div">;
  spacer16?: Flex__<"div">;
  trailingEnhancer2?: Flex__<"div">;
  checkmarkSmall?: Flex__<"div">;
  menuItem4?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled3?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked3?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked3?: Flex__<"div">;
  icon3?: Flex__<"div">;
  leadingEnhancer3?: Flex__<"div">;
  heart7?: Flex__<"div">;
  textFrame3?: Flex__<"div">;
  leadingText3?: Flex__<"div">;
  typography9?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium7?: Flex__<"div">;
  text26?: Flex__<"div">;
  spacer17?: Flex__<"div">;
  typography10?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium8?: Flex__<"div">;
  text27?: Flex__<"div">;
  spacer18?: Flex__<"div">;
  typography11?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium9?: Flex__<"div">;
  spacer19?: Flex__<"div">;
  trailingEnhancer3?: Flex__<"div">;
  heart8?: Flex__<"div">;
  menuItem5?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled4?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked4?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked4?: Flex__<"div">;
  icon4?: Flex__<"div">;
  leadingEnhancer4?: Flex__<"div">;
  heart9?: Flex__<"div">;
  textFrame4?: Flex__<"div">;
  leadingText4?: Flex__<"div">;
  typography12?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium10?: Flex__<"div">;
  text28?: Flex__<"div">;
  spacer20?: Flex__<"div">;
  typography13?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium11?: Flex__<"div">;
  text29?: Flex__<"div">;
  spacer21?: Flex__<"div">;
  typography14?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium12?: Flex__<"div">;
  spacer22?: Flex__<"div">;
  trailingEnhancer4?: Flex__<"div">;
  heart10?: Flex__<"div">;
  scrollBar?: Flex__<"div">;
  model?: Flex__<typeof DropDown>;
  buttons?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  frame1073713924?: Flex__<"div">;
  frame1073713930?: Flex__<"div">;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<"div">;
  button4?: Flex__<"div">;
  accueilDashboard?: Flex__<"div">;
  leftMenu?: Flex__<typeof LeftMenu>;
  main?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  frame1437253918?: Flex__<"div">;
  filters2?: Flex__<"div">;
  buttonFilter2?: Flex__<typeof Button>;
  buttonAdd2?: Flex__<typeof Button>;
  retexMenu?: Flex__<typeof RetexMenu>;
  buttonBase?: Flex__<"div">;
  text?: Flex__<"div">;
  subTabs?: Flex__<"div">;
  metricItem?: Flex__<"div">;
  headingAndDropdown?: Flex__<"div">;
  heading?: Flex__<"div">;
  numberAndChart?: Flex__<"div">;
  numberAndBadge?: Flex__<"div">;
  number?: Flex__<"div">;
  frame1437254335?: Flex__<"div">;
  number2?: Flex__<"div">;
  number3?: Flex__<"div">;
  subgroups?: Flex__<"div">;
  service?: Flex__<"div">;
  metricItem4?: Flex__<"div">;
  headingAndDropdown4?: Flex__<"div">;
  heading4?: Flex__<"div">;
  numberAndChart4?: Flex__<"div">;
  numberAndBadge4?: Flex__<"div">;
  number4?: Flex__<"div">;
  service2?: Flex__<"div">;
  faitsMarquant?: Flex__<typeof TabContent>;
  subgroups2?: Flex__<"div">;
  service3?: Flex__<"div">;
  kanban?: Flex__<typeof Kanban>;
  bottomMenu?: Flex__<typeof BottomMenu>;
};

export interface DefaultBilanAnalyticsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBilanAnalytics__RenderFunc(props: {
  variants: PlasmicBilanAnalytics__VariantsArgs;
  args: PlasmicBilanAnalytics__ArgsType;
  overrides: PlasmicBilanAnalytics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "newRetex",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "newRetex2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.newRetex;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "texinput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "texinput2.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editRetex",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editRetex2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editRetex;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "texinput22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "texinput22.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "retexId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "deleteRetex.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.deleteRetex2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "texinput23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "texinput23.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "deleteRetex2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "header.operationId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "header.runsheet",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Runsheet"
      },
      {
        path: "leftMenu.subMenuParams",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "header.mois",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.currentTabKey == 1 ? "Général" : "Opérations";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "subGroupsDispo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "Mission principale",
            id: "main_mission",
            visible: false,
            value: 1
          },
          {
            label: "Soci\u00e9t\u00e9",
            id: "company_id",
            visible: false,
            value: 2
          },
          {
            label: "Type d\u2019agent",
            id: "function",
            visible: false,
            value: 3
          },
          { label: "Service", id: "service_type", visible: false, value: 4 }
        ]
      },
      {
        path: "header.userClientId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "subGroupsSpecial",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "Regard particulier",
            id: "regard",
            visible: false,
            value: 1
          },
          { label: "Gravit\u00e9 4+", id: "gravite", visible: false, value: 2 }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    rtxOperations: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    rtxFeedbacks: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "f096d45e-97a3-4437-8829-d176d9e5f788",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.f096d45e-97a3-4437-8829-d176d9e5f788.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    rtxDispo: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "b7920d38-aff6-420a-bf62-3075c0d95fcd",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.b7920d38-aff6-420a-bf62-3075c0d95fcd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    rtxPrecisions: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "c19be50a-a782-47fa-bbef-94fa8e951fe8",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.c19be50a-a782-47fa-bbef-94fa8e951fe8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    rtxDominante: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "50793784-21a6-4a29-9b1e-a0221f54cfba",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.50793784-21a6-4a29-9b1e-a0221f54cfba.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    retexOperationStats: usePlasmicDataOp(() => {
      return {
        sourceId: "8BDg6iB9tWhTHhLhnaXBWU",
        opId: "cb6bbe6a-271e-4fcd-8bc7-832fc17e6b90",
        userArgs: {
          params: [
            $state.header.userClientId,
            $state.header.operationId !== undefined &&
            $state.header.operationId > 0
              ? Number($state.header.operationId)
              : ""
          ]
        },
        cacheKey: `plasmic.$.cb6bbe6a-271e-4fcd-8bc7-832fc17e6b90.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    rtxTasksSpecial: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "c26f2f64-64c8-4add-bb4b-21e469c5e21e",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.c26f2f64-64c8-4add-bb4b-21e469c5e21e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBilanAnalytics.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBilanAnalytics.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBilanAnalytics.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Modal
            data-plasmic-name={"deleteRetex"}
            data-plasmic-override={overrides.deleteRetex}
            className={classNames("__wab_instance", sty.deleteRetex)}
            closeOnBackdropClick={true}
            content={
              <React.Fragment>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form3),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form3", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: (() => {
                      try {
                        return (
                          $queries.rtxFeedbacks.data.find(
                            feedback => parseInt(feedback.id) === $state.retexId
                          ) || $queries.rtxFeedbacks.data[0]
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["postgresDeleteMany"] =
                        $state.retexId !== undefined && $state.retexId > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "v6umJuHyep6kPNyCAJjouT",
                                  opId: "53c0af99-6eae-42aa-bdaa-66f17965b32c",
                                  userArgs: {
                                    conditions: [$state.retexId]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [
                                    "1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f",
                                    "f096d45e-97a3-4437-8829-d176d9e5f788"
                                  ],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["postgresDeleteMany"] != null &&
                        typeof $steps["postgresDeleteMany"] === "object" &&
                        typeof $steps["postgresDeleteMany"].then === "function"
                      ) {
                        $steps["postgresDeleteMany"] = await $steps[
                          "postgresDeleteMany"
                        ];
                      }

                      $steps["updateDeleteRetex2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteRetex2"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteRetex2"] != null &&
                        typeof $steps["updateDeleteRetex2"] === "object" &&
                        typeof $steps["updateDeleteRetex2"].then === "function"
                      ) {
                        $steps["updateDeleteRetex2"] = await $steps[
                          "updateDeleteRetex2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Retex supprim\u00e9",
                                undefined,
                                undefined,
                                "bottom"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form3", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form3"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form3.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form3.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form3"}
                      data-plasmic-override={overrides.form3}
                      {...child$Props}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__kRx9J
                        )}
                        color={"errorDestructive"}
                        disabled={(() => {
                          try {
                            return (
                              $state.retexId === undefined ||
                              $state.retexId === 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Supprimer"}
                        submitsForm={true}
                      />
                    </FormWrapper>
                  );
                })()}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content3"}
                  data-plasmic-override={overrides.content3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content3)}
                >
                  <TextInput
                    data-plasmic-name={"titre3"}
                    data-plasmic-override={overrides.titre3}
                    className={classNames("__wab_instance", sty.titre3)}
                    isMulti={false}
                    label={"Titre*"}
                    placeholder={"Titre*"}
                    showIcon={false}
                    showLabel={true}
                    state={"default"}
                    text={``}
                    type={"text"}
                  />

                  <SitexTextInput
                    data-plasmic-name={"texinput23"}
                    data-plasmic-override={overrides.texinput23}
                    className={classNames("__wab_instance", sty.texinput23)}
                    initialValue={generateStateValueProp($state, [
                      "texinput23",
                      "value"
                    ])}
                    onTextChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "texinput23",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    onValidationChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "texinput23",
                        "isInputValid"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={"Titre*"}
                    prefixedText={"Titre*"}
                    required={true}
                    type={"text"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"date3"}
                    data-plasmic-override={overrides.date3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.date3)}
                  >
                    <div
                      data-plasmic-name={"label8"}
                      data-plasmic-override={overrides.label8}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label8
                      )}
                    >
                      {"Date et heure de d\u00e9but"}
                    </div>
                    {(() => {
                      const child$Props = {
                        allowClear: true,
                        className: classNames(
                          "__wab_instance",
                          sty.timePicker9
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["timePicker9", "value"],
                            AntdDatePicker_Helpers
                          ).apply(null, eventArgs);
                        },
                        popupScopeClassName:
                          sty["timePicker9__datePickerPopup"],
                        showTime: true,
                        value: generateStateValueProp($state, [
                          "timePicker9",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "timePicker9.value"
                          }
                        ],
                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdDatePicker
                          data-plasmic-name={"timePicker9"}
                          data-plasmic-override={overrides.timePicker9}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                  <DropDown
                    data-plasmic-name={"type3"}
                    data-plasmic-override={overrides.type3}
                    check={false}
                    className={classNames("__wab_instance", sty.type3)}
                    label={"Type"}
                    options={["Default", "Special"]}
                    showLabel={true}
                    state={"default"}
                    type={"default"}
                  />

                  <TextInput
                    data-plasmic-name={"budget3"}
                    data-plasmic-override={overrides.budget3}
                    className={classNames("__wab_instance", sty.budget3)}
                    isMulti={false}
                    label={"Budget"}
                    placeholder={"\u20ac"}
                    showIcon={false}
                    showLabel={true}
                    state={"default"}
                    text={""}
                    type={"text"}
                  />

                  <TextInput
                    data-plasmic-name={"comments3"}
                    data-plasmic-override={overrides.comments3}
                    className={classNames("__wab_instance", sty.comments3)}
                    isMulti={false}
                    label={"Commentaires"}
                    placeholder={"Commentaires"}
                    showIcon={false}
                    showLabel={true}
                    state={"Placeholder"}
                    text={""}
                    type={"TextArea"}
                  />

                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"input9"}
                      data-plasmic-override={overrides.input9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.input9)}
                    >
                      <div
                        data-plasmic-name={"name6"}
                        data-plasmic-override={overrides.name6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.name6
                        )}
                      >
                        {"Dispositif"}
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"datePickerWeb3"}
                        data-plasmic-override={overrides.datePickerWeb3}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.datePickerWeb3
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputSelect3"}
                          data-plasmic-override={overrides.inputSelect3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputSelect3
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"signedByBaseFieldGroupSmall3"}
                              data-plasmic-override={
                                overrides.signedByBaseFieldGroupSmall3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseFieldGroupSmall3
                              )}
                            />
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"endDateCalendar3"}
                            data-plasmic-override={overrides.endDateCalendar3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.endDateCalendar3
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"inputElementTextField5"}
                                data-plasmic-override={
                                  overrides.inputElementTextField5
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.inputElementTextField5
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseInputElementTextFieldSmallEnabled3"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseInputElementTextFieldSmallEnabled3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseInputElementTextFieldSmallEnabled3
                                    )}
                                  />
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "leadingArtworkContainer9"
                                    }
                                    data-plasmic-override={
                                      overrides.leadingArtworkContainer9
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingArtworkContainer9
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"leadingArtwork5"}
                                      data-plasmic-override={
                                        overrides.leadingArtwork5
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingArtwork5
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__tLpVf
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__ozfkI
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={"leadingLabelContainer9"}
                                    data-plasmic-override={
                                      overrides.leadingLabelContainer9
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabelContainer9
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"leadingLabel9"}
                                      data-plasmic-override={
                                        overrides.leadingLabel9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingLabel9
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelSmall5"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelSmall5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelSmall5
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text55"}
                                        data-plasmic-override={overrides.text55}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text55
                                        )}
                                      >
                                        {"$"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer49"}
                                          data-plasmic-override={
                                            overrides.spacer49
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer49
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  </div>
                                ) : null}
                                <div
                                  data-plasmic-name={"inputElementContentText9"}
                                  data-plasmic-override={
                                    overrides.inputElementContentText9
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementContentText9
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementContentTextSmallOff3"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementContentTextSmallOff3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementContentTextSmallOff3
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text56"}
                                    data-plasmic-override={overrides.text56}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text56
                                    )}
                                  >
                                    {"MM/DD/YYYY"}
                                  </div>
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabelEnhancer9"}
                                    data-plasmic-override={
                                      overrides.trailingLabelEnhancer9
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabelEnhancer9
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={"trailingLabel9"}
                                        data-plasmic-override={
                                          overrides.trailingLabel9
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.trailingLabel9
                                        )}
                                      >
                                        {false ? (
                                          <div
                                            data-plasmic-name={
                                              "signedByBaseTypographyLabelSmall6"
                                            }
                                            data-plasmic-override={
                                              overrides.signedByBaseTypographyLabelSmall6
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.signedByBaseTypographyLabelSmall6
                                            )}
                                          />
                                        ) : null}
                                        <div
                                          data-plasmic-name={"text57"}
                                          data-plasmic-override={
                                            overrides.text57
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text57
                                          )}
                                        >
                                          {"USD"}
                                        </div>
                                        {false ? (
                                          <div
                                            data-plasmic-name={"spacer50"}
                                            data-plasmic-override={
                                              overrides.spacer50
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.spacer50
                                            )}
                                          />
                                        ) : null}
                                      </div>
                                    ) : null}
                                  </div>
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "trailingArtworkContainer9"
                                    }
                                    data-plasmic-override={
                                      overrides.trailingArtworkContainer9
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtworkContainer9
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"trailingArtwork9"}
                                      data-plasmic-override={
                                        overrides.trailingArtwork9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingArtwork9
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__p82Nk
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__a6840
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"calendar3"}
                              data-plasmic-override={overrides.calendar3}
                              className={classNames(
                                projectcss.all,
                                sty.calendar3
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3
                                  )}
                                />
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingArtworkContainer10"}
                                data-plasmic-override={
                                  overrides.leadingArtworkContainer10
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtworkContainer10
                                )}
                              >
                                <div
                                  data-plasmic-name={"text58"}
                                  data-plasmic-override={overrides.text58}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text58
                                  )}
                                >
                                  {"S\u00e9lectionner..."}
                                </div>
                              </Stack__>
                              {false ? (
                                <div
                                  data-plasmic-name={"leadingLabelContainer10"}
                                  data-plasmic-override={
                                    overrides.leadingLabelContainer10
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingLabelContainer10
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"leadingLabel10"}
                                    data-plasmic-override={
                                      overrides.leadingLabel10
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabel10
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelXSmall5"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelXSmall5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelXSmall5
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text59"}
                                      data-plasmic-override={overrides.text59}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text59
                                      )}
                                    >
                                      {"$"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer51"}
                                        data-plasmic-override={
                                          overrides.spacer51
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer51
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "inputElementContentText10"
                                  }
                                  data-plasmic-override={
                                    overrides.inputElementContentText10
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementContentText10
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementContentTextXSmallWebOff3"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementContentTextXSmallWebOff3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementContentTextXSmallWebOff3
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text60"}
                                    data-plasmic-override={overrides.text60}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text60
                                    )}
                                  >
                                    {"Jr"}
                                  </div>
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"trailingLabelEnhancer10"}
                                  data-plasmic-override={
                                    overrides.trailingLabelEnhancer10
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingLabelEnhancer10
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={"trailingLabel10"}
                                      data-plasmic-override={
                                        overrides.trailingLabel10
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingLabel10
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelXSmall6"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelXSmall6
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelXSmall6
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text61"}
                                        data-plasmic-override={overrides.text61}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text61
                                        )}
                                      >
                                        {"USD"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer52"}
                                          data-plasmic-override={
                                            overrides.spacer52
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer52
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "trailingArtworkContainer10"
                                  }
                                  data-plasmic-override={
                                    overrides.trailingArtworkContainer10
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingArtworkContainer10
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"trailingArtwork10"}
                                    data-plasmic-override={
                                      overrides.trailingArtwork10
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtwork10
                                    )}
                                  >
                                    {false ? (
                                      <Outlined2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__haUr
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___3PiXz
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"selectIndicatorContainer5"}
                                data-plasmic-override={
                                  overrides.selectIndicatorContainer5
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.selectIndicatorContainer5
                                )}
                              >
                                <div
                                  data-plasmic-name={"chevronIcon5"}
                                  data-plasmic-override={overrides.chevronIcon5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.chevronIcon5
                                  )}
                                >
                                  {false ? (
                                    <Outlined3Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___1MVIm
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__qtIfE
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            </div>
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputElementHint5"}
                              data-plasmic-override={
                                overrides.inputElementHint5
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputElementHint5
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={"heart21"}
                                  data-plasmic-override={overrides.heart21}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart21
                                  )}
                                >
                                  {false ? (
                                    <Outlined4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__alL86
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__iQ9Ou
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"hint5"}
                                data-plasmic-override={overrides.hint5}
                                className={classNames(
                                  projectcss.all,
                                  sty.hint5
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyParagraphSmall5"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyParagraphSmall5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyParagraphSmall5
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text62"}
                                  data-plasmic-override={overrides.text62}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text62
                                  )}
                                >
                                  {"MM/DD/YYYY"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer53"}
                                    data-plasmic-override={overrides.spacer53}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer53
                                    )}
                                  />
                                ) : null}
                              </div>
                            </Stack__>
                          ) : null}
                        </Stack__>
                      </Stack__>
                      <div
                        data-plasmic-name={"inputElementSelect3"}
                        data-plasmic-override={overrides.inputElementSelect3}
                        className={classNames(
                          projectcss.all,
                          sty.inputElementSelect3
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseInputElementSelectMediumSingleDefaultActive3"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseInputElementSelectMediumSingleDefaultActive3
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseInputElementSelectMediumSingleDefaultActive3
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"selectFrame3"}
                            data-plasmic-override={overrides.selectFrame3}
                            className={classNames(
                              projectcss.all,
                              sty.selectFrame3
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"leadingArtworkContainer11"}
                                data-plasmic-override={
                                  overrides.leadingArtworkContainer11
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtworkContainer11
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingArtwork6"}
                                  data-plasmic-override={
                                    overrides.leadingArtwork6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingArtwork6
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___7Yr
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__yZt1K
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"leadingLabelContainer11"}
                                data-plasmic-override={
                                  overrides.leadingLabelContainer11
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingLabelContainer11
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingLabel11"}
                                  data-plasmic-override={
                                    overrides.leadingLabel11
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingLabel11
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyLabelMedium13"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyLabelMedium13
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyLabelMedium13
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text63"}
                                    data-plasmic-override={overrides.text63}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text63
                                    )}
                                  >
                                    {"$"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer54"}
                                      data-plasmic-override={overrides.spacer54}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer54
                                      )}
                                    />
                                  ) : null}
                                </div>
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"inputElementContentText11"}
                              data-plasmic-override={
                                overrides.inputElementContentText11
                              }
                              className={classNames(
                                projectcss.all,
                                sty.inputElementContentText11
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementContentTextMediumOff5"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementContentTextMediumOff5
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementContentTextMediumOff5
                                  )}
                                />
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"text64"}
                                  data-plasmic-override={overrides.text64}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text64
                                  )}
                                >
                                  {"S\u00e9lectionner..."}
                                </div>
                              ) : null}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"trailingLabelEnhancer11"}
                                data-plasmic-override={
                                  overrides.trailingLabelEnhancer11
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingLabelEnhancer11
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabel11"}
                                    data-plasmic-override={
                                      overrides.trailingLabel11
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabel11
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelMedium14"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelMedium14
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelMedium14
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text65"}
                                      data-plasmic-override={overrides.text65}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text65
                                      )}
                                    >
                                      {"USD"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer55"}
                                        data-plasmic-override={
                                          overrides.spacer55
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer55
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"trailingArtworkContainer11"}
                                data-plasmic-override={
                                  overrides.trailingArtworkContainer11
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingArtworkContainer11
                                )}
                              >
                                <div
                                  data-plasmic-name={"trailingArtwork11"}
                                  data-plasmic-override={
                                    overrides.trailingArtwork11
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingArtwork11
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__mngQp
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gM2Fc
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"selectIndicatorContainer6"}
                                data-plasmic-override={
                                  overrides.selectIndicatorContainer6
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.selectIndicatorContainer6
                                )}
                              >
                                <div
                                  data-plasmic-name={"chevronIcon6"}
                                  data-plasmic-override={overrides.chevronIcon6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.chevronIcon6
                                  )}
                                >
                                  {false ? (
                                    <Outlined6Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__cbmkb
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined6Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__i7Iwh
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"menu3"}
                          data-plasmic-override={overrides.menu3}
                          className={classNames(projectcss.all, sty.menu3)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"signedByBaseMenuListMedium3"}
                              data-plasmic-override={
                                overrides.signedByBaseMenuListMedium3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseMenuListMedium3
                              )}
                            />
                          ) : null}
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"menuItem11"}
                              data-plasmic-override={overrides.menuItem11}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuItem11
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseMenuItemSearchMediumNoneEnabled3"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseMenuItemSearchMediumNoneEnabled3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseMenuItemSearchMediumNoneEnabled3
                                  )}
                                />
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"searchField3"}
                                data-plasmic-override={overrides.searchField3}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.searchField3
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseSearchFieldMediumEnabled3"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseSearchFieldMediumEnabled3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseSearchFieldMediumEnabled3
                                    )}
                                  />
                                ) : null}
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputElementLabel3"}
                                    data-plasmic-override={
                                      overrides.inputElementLabel3
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementLabel3
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseInputElementLabelMedium3"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseInputElementLabelMedium3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseInputElementLabelMedium3
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"typography29"}
                                      data-plasmic-override={
                                        overrides.typography29
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.typography29
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelMedium15"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelMedium15
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelMedium15
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text66"}
                                        data-plasmic-override={overrides.text66}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text66
                                        )}
                                      >
                                        {"Label"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer56"}
                                          data-plasmic-override={
                                            overrides.spacer56
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer56
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                    {false ? (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={
                                          "characterCountFrame3"
                                        }
                                        data-plasmic-override={
                                          overrides.characterCountFrame3
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.characterCountFrame3
                                        )}
                                      >
                                        {false ? (
                                          <div
                                            data-plasmic-name={"heart22"}
                                            data-plasmic-override={
                                              overrides.heart22
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.heart22
                                            )}
                                          >
                                            {false ? (
                                              <OutlinedIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__pdf7V
                                                )}
                                                role={"img"}
                                              />
                                            ) : null}
                                            <FilledIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__ta0Z
                                              )}
                                              role={"img"}
                                            />
                                          </div>
                                        ) : null}
                                        <div
                                          data-plasmic-name={"typography30"}
                                          data-plasmic-override={
                                            overrides.typography30
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.typography30
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium16"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium16
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium16
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text67"}
                                            data-plasmic-override={
                                              overrides.text67
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text67
                                            )}
                                          >
                                            {"0/100"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer57"}
                                              data-plasmic-override={
                                                overrides.spacer57
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer57
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      </Stack__>
                                    ) : null}
                                  </Stack__>
                                ) : null}
                                <div
                                  data-plasmic-name={"inputElementTextField6"}
                                  data-plasmic-override={
                                    overrides.inputElementTextField6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementTextField6
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementTextFieldMediumEnabled3"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementTextFieldMediumEnabled3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementTextFieldMediumEnabled3
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={
                                      "leadingArtworkContainer12"
                                    }
                                    data-plasmic-override={
                                      overrides.leadingArtworkContainer12
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingArtworkContainer12
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"search3"}
                                      data-plasmic-override={overrides.search3}
                                      className={classNames(
                                        projectcss.all,
                                        sty.search3
                                      )}
                                    >
                                      {false ? (
                                        <Outlined7Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__i4Uw
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <Outlined7Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__ij8A1
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "leadingLabelContainer12"
                                      }
                                      data-plasmic-override={
                                        overrides.leadingLabelContainer12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingLabelContainer12
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"leadingLabel12"}
                                          data-plasmic-override={
                                            overrides.leadingLabel12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.leadingLabel12
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium17"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium17
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium17
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text68"}
                                            data-plasmic-override={
                                              overrides.text68
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text68
                                            )}
                                          >
                                            {"$"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer58"}
                                              data-plasmic-override={
                                                overrides.spacer58
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer58
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                  <div
                                    data-plasmic-name={
                                      "inputElementContentText12"
                                    }
                                    data-plasmic-override={
                                      overrides.inputElementContentText12
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementContentText12
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseInputElementContentTextMediumOff6"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseInputElementContentTextMediumOff6
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseInputElementContentTextMediumOff6
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text69"}
                                      data-plasmic-override={overrides.text69}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text69
                                      )}
                                    >
                                      {"Placeholder"}
                                    </div>
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "trailingLabelEnhancer12"
                                      }
                                      data-plasmic-override={
                                        overrides.trailingLabelEnhancer12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingLabelEnhancer12
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"trailingLabel12"}
                                          data-plasmic-override={
                                            overrides.trailingLabel12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.trailingLabel12
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium18"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium18
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium18
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text70"}
                                            data-plasmic-override={
                                              overrides.text70
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text70
                                            )}
                                          >
                                            {"USD"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer59"}
                                              data-plasmic-override={
                                                overrides.spacer59
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer59
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "trailingArtworkContainer12"
                                      }
                                      data-plasmic-override={
                                        overrides.trailingArtworkContainer12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingArtworkContainer12
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "trailingArtwork12"
                                          }
                                          data-plasmic-override={
                                            overrides.trailingArtwork12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.trailingArtwork12
                                          )}
                                        >
                                          {false ? (
                                            <Outlined5Icon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg___4CNtu
                                              )}
                                              role={"img"}
                                            />
                                          ) : null}
                                          <Filled4Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg___6ANfS
                                            )}
                                            role={"img"}
                                          />
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputElementHint6"}
                                    data-plasmic-override={
                                      overrides.inputElementHint6
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementHint6
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={"heart23"}
                                        data-plasmic-override={
                                          overrides.heart23
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.heart23
                                        )}
                                      >
                                        {false ? (
                                          <Outlined4Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__l6EYy
                                            )}
                                            role={"img"}
                                          />
                                        ) : null}
                                        <Filled3Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___8A0Y5
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    ) : null}
                                    <div
                                      data-plasmic-name={"hint6"}
                                      data-plasmic-override={overrides.hint6}
                                      className={classNames(
                                        projectcss.all,
                                        sty.hint6
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyParagraphSmall6"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyParagraphSmall6
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyParagraphSmall6
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text71"}
                                        data-plasmic-override={overrides.text71}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text71
                                        )}
                                      >
                                        {"Hint"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer60"}
                                          data-plasmic-override={
                                            overrides.spacer60
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer60
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  </Stack__>
                                ) : null}
                              </Stack__>
                            </Stack__>
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem12"}
                            data-plasmic-override={overrides.menuItem12}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem12
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled9"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled9
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled9
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked9"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked9
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked9
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked9"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked9
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked9
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon9"}
                                  data-plasmic-override={overrides.icon9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon9
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__r0H0V
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__yvriH
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer9"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer9
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer9
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart24"}
                                  data-plasmic-override={overrides.heart24}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart24
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__rnL1
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__vGs4X
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame9"}
                              data-plasmic-override={overrides.textFrame9}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame9
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText9"}
                                data-plasmic-override={overrides.leadingText9}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText9
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography31"}
                                  data-plasmic-override={overrides.typography31}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography31
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium25"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium25
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium25
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text72"}
                                    data-plasmic-override={overrides.text72}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text72
                                    )}
                                  >
                                    {"Mod\u00e8le de concert 20h"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer61"}
                                      data-plasmic-override={overrides.spacer61}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer61
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography32"}
                                    data-plasmic-override={
                                      overrides.typography32
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography32
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium26"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium26
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium26
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text73"}
                                      data-plasmic-override={overrides.text73}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text73
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer62"}
                                        data-plasmic-override={
                                          overrides.spacer62
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer62
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography33"}
                                  data-plasmic-override={overrides.typography33}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography33
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium27"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium27
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium27
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___36NVo
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer63"}
                                      data-plasmic-override={overrides.spacer63}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer63
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer9"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer9
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer9
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart25"}
                                  data-plasmic-override={overrides.heart25}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart25
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ntviN
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__uyz5M
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem13"}
                            data-plasmic-override={overrides.menuItem13}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem13
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled10"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled10
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled10
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked10"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked10
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked10
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked10"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked10
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked10
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon10"}
                                  data-plasmic-override={overrides.icon10}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon10
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___6JzSo
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__dq3HI
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer10"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer10
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer10
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart26"}
                                  data-plasmic-override={overrides.heart26}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart26
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__jJdNj
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__eGxGc
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame10"}
                              data-plasmic-override={overrides.textFrame10}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame10
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText10"}
                                data-plasmic-override={overrides.leadingText10}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText10
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography34"}
                                  data-plasmic-override={overrides.typography34}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography34
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium28"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium28
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium28
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text74"}
                                    data-plasmic-override={overrides.text74}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text74
                                    )}
                                  >
                                    {"Mod\u00e8le de match 21h"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer64"}
                                      data-plasmic-override={overrides.spacer64}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer64
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography35"}
                                    data-plasmic-override={
                                      overrides.typography35
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography35
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium29"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium29
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium29
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text75"}
                                      data-plasmic-override={overrides.text75}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text75
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer65"}
                                        data-plasmic-override={
                                          overrides.spacer65
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer65
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography36"}
                                  data-plasmic-override={overrides.typography36}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography36
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium30"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium30
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium30
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__isUKd
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer66"}
                                      data-plasmic-override={overrides.spacer66}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer66
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer10"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer10
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer10
                                )}
                              >
                                <div
                                  data-plasmic-name={"checkmarkSmall3"}
                                  data-plasmic-override={
                                    overrides.checkmarkSmall3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.checkmarkSmall3
                                  )}
                                >
                                  {false ? (
                                    <Outlined9Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__cE2SJ
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined9Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__jYocg
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem14"}
                            data-plasmic-override={overrides.menuItem14}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem14
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled11"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled11
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled11
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked11"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked11
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked11
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked11"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked11
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked11
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon11"}
                                  data-plasmic-override={overrides.icon11}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon11
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__r2Lz3
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__akBXc
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer11"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer11
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer11
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart27"}
                                  data-plasmic-override={overrides.heart27}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart27
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___0Q5MQ
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__zccqP
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <IcRoundPlusIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hr78U
                              )}
                              role={"img"}
                            />

                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame11"}
                              data-plasmic-override={overrides.textFrame11}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame11
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText11"}
                                data-plasmic-override={overrides.leadingText11}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText11
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography37"}
                                  data-plasmic-override={overrides.typography37}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography37
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium31"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium31
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium31
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text76"}
                                    data-plasmic-override={overrides.text76}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text76
                                    )}
                                  >
                                    {"Dispositif vierge"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer67"}
                                      data-plasmic-override={overrides.spacer67}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer67
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography38"}
                                    data-plasmic-override={
                                      overrides.typography38
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography38
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium32"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium32
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium32
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text77"}
                                      data-plasmic-override={overrides.text77}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text77
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer68"}
                                        data-plasmic-override={
                                          overrides.spacer68
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer68
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography39"}
                                  data-plasmic-override={overrides.typography39}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography39
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium33"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium33
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium33
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__a9Zm
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer69"}
                                      data-plasmic-override={overrides.spacer69}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer69
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer11"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer11
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer11
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart28"}
                                  data-plasmic-override={overrides.heart28}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart28
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___1Tc2P
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___9Ufrg
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"menuItem15"}
                              data-plasmic-override={overrides.menuItem15}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuItem15
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseMenuItemOptionMediumStandardEnabled12"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseMenuItemOptionMediumStandardEnabled12
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseMenuItemOptionMediumStandardEnabled12
                                  )}
                                />
                              ) : null}
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={
                                    "menuItemControlMediumCheckboxUnchecked12"
                                  }
                                  data-plasmic-override={
                                    overrides.menuItemControlMediumCheckboxUnchecked12
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.menuItemControlMediumCheckboxUnchecked12
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseMenuItemControlMediumCheckboxUnchecked12"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked12
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseMenuItemControlMediumCheckboxUnchecked12
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"icon12"}
                                    data-plasmic-override={overrides.icon12}
                                    className={classNames(
                                      projectcss.all,
                                      sty.icon12
                                    )}
                                  >
                                    {false ? (
                                      <Outlined8Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__elYuw
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__wy3M
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"leadingEnhancer12"}
                                  data-plasmic-override={
                                    overrides.leadingEnhancer12
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingEnhancer12
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"heart29"}
                                    data-plasmic-override={overrides.heart29}
                                    className={classNames(
                                      projectcss.all,
                                      sty.heart29
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__k9Z6X
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__xsvz0
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"textFrame12"}
                                data-plasmic-override={overrides.textFrame12}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.textFrame12
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingText12"}
                                  data-plasmic-override={
                                    overrides.leadingText12
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingText12
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"typography40"}
                                    data-plasmic-override={
                                      overrides.typography40
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography40
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium34"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium34
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium34
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text78"}
                                      data-plasmic-override={overrides.text78}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text78
                                      )}
                                    >
                                      {"Options"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer70"}
                                        data-plasmic-override={
                                          overrides.spacer70
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer70
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"typography41"}
                                      data-plasmic-override={
                                        overrides.typography41
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.typography41
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyParagraphMedium35"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyParagraphMedium35
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyParagraphMedium35
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text79"}
                                        data-plasmic-override={overrides.text79}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text79
                                        )}
                                      >
                                        {"Supporting text"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer71"}
                                          data-plasmic-override={
                                            overrides.spacer71
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer71
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography42"}
                                    data-plasmic-override={
                                      overrides.typography42
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography42
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium36"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium36
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium36
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__lLDoB
                                      )}
                                    >
                                      {"Text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer72"}
                                        data-plasmic-override={
                                          overrides.spacer72
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer72
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </Stack__>
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"trailingEnhancer12"}
                                  data-plasmic-override={
                                    overrides.trailingEnhancer12
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingEnhancer12
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"heart30"}
                                    data-plasmic-override={overrides.heart30}
                                    className={classNames(
                                      projectcss.all,
                                      sty.heart30
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__iz96F
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__f9QV1
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                            </Stack__>
                          ) : null}
                          <div
                            data-plasmic-name={"scrollBar3"}
                            data-plasmic-override={overrides.scrollBar3}
                            className={classNames(
                              projectcss.all,
                              sty.scrollBar3
                            )}
                          />
                        </div>
                      </div>
                    </Stack__>
                  ) : null}
                  <DropDown
                    data-plasmic-name={"model3"}
                    data-plasmic-override={overrides.model3}
                    check={false}
                    className={classNames("__wab_instance", sty.model3)}
                    label={"Mod\u00e8le de Runsheet & Dispositif*"}
                    options={["Default", "Special"]}
                    showLabel={true}
                    state={"default"}
                    type={"default"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttons3"}
                    data-plasmic-override={overrides.buttons3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttons3)}
                  >
                    <Button
                      data-plasmic-name={"button9"}
                      data-plasmic-override={overrides.button9}
                      className={classNames("__wab_instance", sty.button9)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yaa1Z
                          )}
                        >
                          {"Cr\u00e9er"}
                        </div>
                      }
                    />

                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1073713926"}
                        data-plasmic-override={overrides.frame1073713926}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1073713926
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vIlBk
                          )}
                        >
                          <Line9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pRDr
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qWw0T
                          )}
                        >
                          {"OU"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ogxbg
                          )}
                        >
                          <Line9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qzpk3
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1073713932"}
                        data-plasmic-override={overrides.frame1073713932}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1073713932
                        )}
                      >
                        <Button
                          data-plasmic-name={"button10"}
                          data-plasmic-override={overrides.button10}
                          className={classNames("__wab_instance", sty.button10)}
                        />

                        <Stack__
                          as={"div"}
                          data-plasmic-name={"button11"}
                          data-plasmic-override={overrides.button11}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button11)}
                        >
                          <IcTwotoneAppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a6G2B
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4WQ3X
                            )}
                          >
                            {"Apple"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"button12"}
                          data-plasmic-override={overrides.button12}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button12)}
                        >
                          <MdiFacebookIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pWblb
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zmJk3
                            )}
                          >
                            {"Facebook"}
                          </div>
                        </Stack__>
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
              </React.Fragment>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__qfHnd)} />
            }
            heading={
              <div
                data-plasmic-name={"frame1437254018"}
                data-plasmic-override={overrides.frame1437254018}
                className={classNames(projectcss.all, sty.frame1437254018)}
              >
                <div
                  data-plasmic-name={"name7"}
                  data-plasmic-override={overrides.name7}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name7
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Êtes-vous sûr(e) ?";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Supprimer";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254021"}
                  data-plasmic-override={overrides.frame1437254021}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254021)}
                >
                  <LinkSimpleIcon
                    className={classNames(projectcss.all, sty.svg__w0NJe)}
                    role={"img"}
                  />

                  <XIcon
                    className={classNames(projectcss.all, sty.svg__prvOi)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDeleteRetex2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteRetex2"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteRetex2"] != null &&
                        typeof $steps["updateDeleteRetex2"] === "object" &&
                        typeof $steps["updateDeleteRetex2"].then === "function"
                      ) {
                        $steps["updateDeleteRetex2"] = await $steps[
                          "updateDeleteRetex2"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
              </div>
            }
            isOpen={generateStateValueProp($state, ["deleteRetex", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "deleteRetex",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["updateDeleteRetex2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteRetex2"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteRetex2"] != null &&
                  typeof $steps["updateDeleteRetex2"] === "object" &&
                  typeof $steps["updateDeleteRetex2"].then === "function"
                ) {
                  $steps["updateDeleteRetex2"] = await $steps[
                    "updateDeleteRetex2"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            showFooter={false}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"editRetex2"}
            data-plasmic-override={overrides.editRetex2}
            className={classNames("__wab_instance", sty.editRetex2)}
            closeOnBackdropClick={false}
            content={
              <React.Fragment>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: (() => {
                      try {
                        return (
                          $queries.rtxFeedbacks.data.find(
                            feedback => parseInt(feedback.id) === $state.retexId
                          ) || $queries.rtxFeedbacks.data[0]
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["defaultSubmit"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "v6umJuHyep6kPNyCAJjouT",
                                opId: "dc1ad4fd-39bc-47e8-a3b3-61eae28e656d",
                                userArgs: {
                                  keys: [$state.retexId],
                                  variables: [
                                    $state.form2.value.feedback,
                                    $ctx.SupabaseUser.user.id,
                                    $state.form2.value.operation_id,
                                    new Date().toISOString()
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f",
                                  "f096d45e-97a3-4437-8829-d176d9e5f788"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["defaultSubmit"] != null &&
                        typeof $steps["defaultSubmit"] === "object" &&
                        typeof $steps["defaultSubmit"].then === "function"
                      ) {
                        $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Retex modifi\u00e9",
                                undefined,
                                undefined,
                                "bottom"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateNewOperation"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["editRetex"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewOperation"] != null &&
                        typeof $steps["updateNewOperation"] === "object" &&
                        typeof $steps["updateNewOperation"].then === "function"
                      ) {
                        $steps["updateNewOperation"] = await $steps[
                          "updateNewOperation"
                        ];
                      }
                    },
                    onFinishFailed: async data => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: ["error", "Erreur", ``, undefined, "bottom"]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__k6Huc
                        )}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ohUue
                            )}
                          >
                            {"Commentaires"}
                          </div>
                        }
                        name={"feedback"}
                      >
                        {(() => {
                          const child$Props = {
                            autoSize: false,
                            className: classNames(
                              "__wab_instance",
                              sty.textArea2
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea2", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "textArea2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea2.value"
                              }
                            ],
                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea2"}
                              data-plasmic-override={overrides.textArea2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__yIPa
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hIs0B
                            )}
                          >
                            {"Op\u00e9ration"}
                          </div>
                        }
                        name={"operation_id"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Mod\u00e8le requis"
                          }
                        ]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select3"}
                          data-plasmic-override={overrides.select3}
                          className={classNames("__wab_instance", sty.select3)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select3",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          optionClassName={classNames({
                            [sty["pcls_2jYELYT9H1hx"]]: true
                          })}
                          options={(() => {
                            try {
                              return $queries.rtxOperations.data.map(
                                ({ id, title }) => ({
                                  value: id,
                                  label: title
                                })
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  const __composite = [
                                    {
                                      type: "option",
                                      label: null,
                                      value: null
                                    },
                                    { type: "option", label: null, value: null }
                                  ];
                                  __composite["0"]["label"] =
                                    "Mod\u00e8le de match 21h";
                                  __composite["0"]["value"] = "1";
                                  __composite["1"]["label"] =
                                    "Mod\u00e8le de concert 20h";
                                  __composite["1"]["value"] = "2";
                                  return __composite;
                                })();
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cWeMi
                              )}
                            >
                              {"S\u00e9lectionner"}
                            </div>
                          }
                          placeholderClassName={classNames({
                            [sty["pcls_wmOA-2Rlkg8c"]]: true
                          })}
                          popupClassName={classNames({
                            [sty["pcls_OW3pM7WaFuud"]]: true
                          })}
                          popupScopeClassName={sty["select3__popup"]}
                          size={"middle"}
                          triggerClassName={classNames({
                            [sty["pcls_6gE8wK3G3MDW"]]: true
                          })}
                          value={generateStateValueProp($state, [
                            "select3",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aAZiI
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7ZSzq
                            )}
                          >
                            {"Modifier"}
                          </div>
                        }
                        submitsForm={true}
                      />
                    </FormWrapper>
                  );
                })()}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content2"}
                  data-plasmic-override={overrides.content2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content2)}
                >
                  <TextInput
                    data-plasmic-name={"titre2"}
                    data-plasmic-override={overrides.titre2}
                    className={classNames("__wab_instance", sty.titre2)}
                    isMulti={false}
                    label={"Titre*"}
                    placeholder={"Titre*"}
                    showIcon={false}
                    showLabel={true}
                    state={"default"}
                    text={``}
                    type={"text"}
                  />

                  <SitexTextInput
                    data-plasmic-name={"texinput22"}
                    data-plasmic-override={overrides.texinput22}
                    className={classNames("__wab_instance", sty.texinput22)}
                    initialValue={generateStateValueProp($state, [
                      "texinput22",
                      "value"
                    ])}
                    inputClassName={classNames({
                      [sty["pcls_mj2SFIihKuGB"]]: true
                    })}
                    onTextChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "texinput22",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    onValidationChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "texinput22",
                        "isInputValid"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={"Titre*"}
                    prefixedText={"Titre*"}
                    required={true}
                    type={"text"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"date2"}
                    data-plasmic-override={overrides.date2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.date2)}
                  >
                    <div
                      data-plasmic-name={"label7"}
                      data-plasmic-override={overrides.label7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label7
                      )}
                    >
                      {"Date et heure de d\u00e9but"}
                    </div>
                    {(() => {
                      const child$Props = {
                        allowClear: true,
                        className: classNames(
                          "__wab_instance",
                          sty.timePicker2
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["timePicker2", "value"],
                            AntdDatePicker_Helpers
                          ).apply(null, eventArgs);
                        },
                        popupScopeClassName:
                          sty["timePicker2__datePickerPopup"],
                        showTime: true,
                        value: generateStateValueProp($state, [
                          "timePicker2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "timePicker2.value"
                          }
                        ],
                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdDatePicker
                          data-plasmic-name={"timePicker2"}
                          data-plasmic-override={overrides.timePicker2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                  <DropDown
                    data-plasmic-name={"type2"}
                    data-plasmic-override={overrides.type2}
                    check={false}
                    className={classNames("__wab_instance", sty.type2)}
                    label={"Type"}
                    options={["Default", "Special"]}
                    showLabel={true}
                    state={"default"}
                    type={"default"}
                  />

                  <TextInput
                    data-plasmic-name={"budget2"}
                    data-plasmic-override={overrides.budget2}
                    className={classNames("__wab_instance", sty.budget2)}
                    isMulti={false}
                    label={"Budget"}
                    placeholder={"\u20ac"}
                    showIcon={false}
                    showLabel={true}
                    state={"default"}
                    text={""}
                    type={"text"}
                  />

                  <TextInput
                    data-plasmic-name={"comments2"}
                    data-plasmic-override={overrides.comments2}
                    className={classNames("__wab_instance", sty.comments2)}
                    isMulti={false}
                    label={"Commentaires"}
                    placeholder={"Commentaires"}
                    showIcon={false}
                    showLabel={true}
                    state={"Placeholder"}
                    text={""}
                    type={"TextArea"}
                  />

                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"input6"}
                      data-plasmic-override={overrides.input6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.input6)}
                    >
                      <div
                        data-plasmic-name={"name4"}
                        data-plasmic-override={overrides.name4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.name4
                        )}
                      >
                        {"Dispositif"}
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"datePickerWeb2"}
                        data-plasmic-override={overrides.datePickerWeb2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.datePickerWeb2
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputSelect2"}
                          data-plasmic-override={overrides.inputSelect2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputSelect2
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"signedByBaseFieldGroupSmall2"}
                              data-plasmic-override={
                                overrides.signedByBaseFieldGroupSmall2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseFieldGroupSmall2
                              )}
                            />
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"endDateCalendar2"}
                            data-plasmic-override={overrides.endDateCalendar2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.endDateCalendar2
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"inputElementTextField3"}
                                data-plasmic-override={
                                  overrides.inputElementTextField3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.inputElementTextField3
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseInputElementTextFieldSmallEnabled2"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseInputElementTextFieldSmallEnabled2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseInputElementTextFieldSmallEnabled2
                                    )}
                                  />
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "leadingArtworkContainer5"
                                    }
                                    data-plasmic-override={
                                      overrides.leadingArtworkContainer5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingArtworkContainer5
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"leadingArtwork3"}
                                      data-plasmic-override={
                                        overrides.leadingArtwork3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingArtwork3
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__diGot
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__dXyuy
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={"leadingLabelContainer5"}
                                    data-plasmic-override={
                                      overrides.leadingLabelContainer5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabelContainer5
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"leadingLabel5"}
                                      data-plasmic-override={
                                        overrides.leadingLabel5
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingLabel5
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelSmall3"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelSmall3
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelSmall3
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text30"}
                                        data-plasmic-override={overrides.text30}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text30
                                        )}
                                      >
                                        {"$"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer23"}
                                          data-plasmic-override={
                                            overrides.spacer23
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer23
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  </div>
                                ) : null}
                                <div
                                  data-plasmic-name={"inputElementContentText5"}
                                  data-plasmic-override={
                                    overrides.inputElementContentText5
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementContentText5
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementContentTextSmallOff2"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementContentTextSmallOff2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementContentTextSmallOff2
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text31"}
                                    data-plasmic-override={overrides.text31}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text31
                                    )}
                                  >
                                    {"MM/DD/YYYY"}
                                  </div>
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabelEnhancer5"}
                                    data-plasmic-override={
                                      overrides.trailingLabelEnhancer5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabelEnhancer5
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={"trailingLabel5"}
                                        data-plasmic-override={
                                          overrides.trailingLabel5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.trailingLabel5
                                        )}
                                      >
                                        {false ? (
                                          <div
                                            data-plasmic-name={
                                              "signedByBaseTypographyLabelSmall4"
                                            }
                                            data-plasmic-override={
                                              overrides.signedByBaseTypographyLabelSmall4
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.signedByBaseTypographyLabelSmall4
                                            )}
                                          />
                                        ) : null}
                                        <div
                                          data-plasmic-name={"text32"}
                                          data-plasmic-override={
                                            overrides.text32
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text32
                                          )}
                                        >
                                          {"USD"}
                                        </div>
                                        {false ? (
                                          <div
                                            data-plasmic-name={"spacer24"}
                                            data-plasmic-override={
                                              overrides.spacer24
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.spacer24
                                            )}
                                          />
                                        ) : null}
                                      </div>
                                    ) : null}
                                  </div>
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "trailingArtworkContainer5"
                                    }
                                    data-plasmic-override={
                                      overrides.trailingArtworkContainer5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtworkContainer5
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"trailingArtwork5"}
                                      data-plasmic-override={
                                        overrides.trailingArtwork5
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingArtwork5
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___8JLa6
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__thNpy
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"calendar2"}
                              data-plasmic-override={overrides.calendar2}
                              className={classNames(
                                projectcss.all,
                                sty.calendar2
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2
                                  )}
                                />
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingArtworkContainer6"}
                                data-plasmic-override={
                                  overrides.leadingArtworkContainer6
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtworkContainer6
                                )}
                              >
                                <div
                                  data-plasmic-name={"text33"}
                                  data-plasmic-override={overrides.text33}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text33
                                  )}
                                >
                                  {"S\u00e9lectionner..."}
                                </div>
                              </Stack__>
                              {false ? (
                                <div
                                  data-plasmic-name={"leadingLabelContainer6"}
                                  data-plasmic-override={
                                    overrides.leadingLabelContainer6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingLabelContainer6
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"leadingLabel6"}
                                    data-plasmic-override={
                                      overrides.leadingLabel6
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabel6
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelXSmall3"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelXSmall3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelXSmall3
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text34"}
                                      data-plasmic-override={overrides.text34}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text34
                                      )}
                                    >
                                      {"$"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer25"}
                                        data-plasmic-override={
                                          overrides.spacer25
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer25
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"inputElementContentText6"}
                                  data-plasmic-override={
                                    overrides.inputElementContentText6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementContentText6
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementContentTextXSmallWebOff2"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementContentTextXSmallWebOff2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementContentTextXSmallWebOff2
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text35"}
                                    data-plasmic-override={overrides.text35}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text35
                                    )}
                                  >
                                    {"Jr"}
                                  </div>
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"trailingLabelEnhancer6"}
                                  data-plasmic-override={
                                    overrides.trailingLabelEnhancer6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingLabelEnhancer6
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={"trailingLabel6"}
                                      data-plasmic-override={
                                        overrides.trailingLabel6
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingLabel6
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelXSmall4"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelXSmall4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelXSmall4
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text36"}
                                        data-plasmic-override={overrides.text36}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text36
                                        )}
                                      >
                                        {"USD"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer26"}
                                          data-plasmic-override={
                                            overrides.spacer26
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer26
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "trailingArtworkContainer6"
                                  }
                                  data-plasmic-override={
                                    overrides.trailingArtworkContainer6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingArtworkContainer6
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"trailingArtwork6"}
                                    data-plasmic-override={
                                      overrides.trailingArtwork6
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtwork6
                                    )}
                                  >
                                    {false ? (
                                      <Outlined2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__v5Wrj
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___65Epu
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"selectIndicatorContainer3"}
                                data-plasmic-override={
                                  overrides.selectIndicatorContainer3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.selectIndicatorContainer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"chevronIcon3"}
                                  data-plasmic-override={overrides.chevronIcon3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.chevronIcon3
                                  )}
                                >
                                  {false ? (
                                    <Outlined3Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__dqA27
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__vVrb0
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            </div>
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputElementHint3"}
                              data-plasmic-override={
                                overrides.inputElementHint3
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputElementHint3
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={"heart11"}
                                  data-plasmic-override={overrides.heart11}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart11
                                  )}
                                >
                                  {false ? (
                                    <Outlined4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__f8BmO
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___4Ow5X
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"hint3"}
                                data-plasmic-override={overrides.hint3}
                                className={classNames(
                                  projectcss.all,
                                  sty.hint3
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyParagraphSmall3"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyParagraphSmall3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyParagraphSmall3
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text37"}
                                  data-plasmic-override={overrides.text37}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text37
                                  )}
                                >
                                  {"MM/DD/YYYY"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer30"}
                                    data-plasmic-override={overrides.spacer30}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer30
                                    )}
                                  />
                                ) : null}
                              </div>
                            </Stack__>
                          ) : null}
                        </Stack__>
                      </Stack__>
                      <div
                        data-plasmic-name={"inputElementSelect2"}
                        data-plasmic-override={overrides.inputElementSelect2}
                        className={classNames(
                          projectcss.all,
                          sty.inputElementSelect2
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseInputElementSelectMediumSingleDefaultActive2"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseInputElementSelectMediumSingleDefaultActive2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseInputElementSelectMediumSingleDefaultActive2
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"selectFrame2"}
                            data-plasmic-override={overrides.selectFrame2}
                            className={classNames(
                              projectcss.all,
                              sty.selectFrame2
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"leadingArtworkContainer7"}
                                data-plasmic-override={
                                  overrides.leadingArtworkContainer7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtworkContainer7
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingArtwork4"}
                                  data-plasmic-override={
                                    overrides.leadingArtwork4
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingArtwork4
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__t8De
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__lINb
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"leadingLabelContainer7"}
                                data-plasmic-override={
                                  overrides.leadingLabelContainer7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingLabelContainer7
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingLabel7"}
                                  data-plasmic-override={
                                    overrides.leadingLabel7
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingLabel7
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyLabelMedium7"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyLabelMedium7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyLabelMedium7
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text38"}
                                    data-plasmic-override={overrides.text38}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text38
                                    )}
                                  >
                                    {"$"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer27"}
                                      data-plasmic-override={overrides.spacer27}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer27
                                      )}
                                    />
                                  ) : null}
                                </div>
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"inputElementContentText7"}
                              data-plasmic-override={
                                overrides.inputElementContentText7
                              }
                              className={classNames(
                                projectcss.all,
                                sty.inputElementContentText7
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementContentTextMediumOff3"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementContentTextMediumOff3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementContentTextMediumOff3
                                  )}
                                />
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"text39"}
                                  data-plasmic-override={overrides.text39}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text39
                                  )}
                                >
                                  {"S\u00e9lectionner..."}
                                </div>
                              ) : null}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"trailingLabelEnhancer7"}
                                data-plasmic-override={
                                  overrides.trailingLabelEnhancer7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingLabelEnhancer7
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabel7"}
                                    data-plasmic-override={
                                      overrides.trailingLabel7
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabel7
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelMedium8"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelMedium8
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelMedium8
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text40"}
                                      data-plasmic-override={overrides.text40}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text40
                                      )}
                                    >
                                      {"USD"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer31"}
                                        data-plasmic-override={
                                          overrides.spacer31
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer31
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"trailingArtworkContainer7"}
                                data-plasmic-override={
                                  overrides.trailingArtworkContainer7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingArtworkContainer7
                                )}
                              >
                                <div
                                  data-plasmic-name={"trailingArtwork7"}
                                  data-plasmic-override={
                                    overrides.trailingArtwork7
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingArtwork7
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__okA1W
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__yrgpH
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"selectIndicatorContainer4"}
                                data-plasmic-override={
                                  overrides.selectIndicatorContainer4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.selectIndicatorContainer4
                                )}
                              >
                                <div
                                  data-plasmic-name={"chevronIcon4"}
                                  data-plasmic-override={overrides.chevronIcon4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.chevronIcon4
                                  )}
                                >
                                  {false ? (
                                    <Outlined6Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ykBkA
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined6Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__lCq7
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"menu2"}
                          data-plasmic-override={overrides.menu2}
                          className={classNames(projectcss.all, sty.menu2)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"signedByBaseMenuListMedium2"}
                              data-plasmic-override={
                                overrides.signedByBaseMenuListMedium2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseMenuListMedium2
                              )}
                            />
                          ) : null}
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"menuItem6"}
                              data-plasmic-override={overrides.menuItem6}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuItem6
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseMenuItemSearchMediumNoneEnabled2"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseMenuItemSearchMediumNoneEnabled2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseMenuItemSearchMediumNoneEnabled2
                                  )}
                                />
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"searchField2"}
                                data-plasmic-override={overrides.searchField2}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.searchField2
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseSearchFieldMediumEnabled2"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseSearchFieldMediumEnabled2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseSearchFieldMediumEnabled2
                                    )}
                                  />
                                ) : null}
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputElementLabel2"}
                                    data-plasmic-override={
                                      overrides.inputElementLabel2
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementLabel2
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseInputElementLabelMedium2"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseInputElementLabelMedium2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseInputElementLabelMedium2
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"typography15"}
                                      data-plasmic-override={
                                        overrides.typography15
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.typography15
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelMedium9"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelMedium9
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelMedium9
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text41"}
                                        data-plasmic-override={overrides.text41}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text41
                                        )}
                                      >
                                        {"Label"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer32"}
                                          data-plasmic-override={
                                            overrides.spacer32
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer32
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                    {false ? (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={
                                          "characterCountFrame2"
                                        }
                                        data-plasmic-override={
                                          overrides.characterCountFrame2
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.characterCountFrame2
                                        )}
                                      >
                                        {false ? (
                                          <div
                                            data-plasmic-name={"heart12"}
                                            data-plasmic-override={
                                              overrides.heart12
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.heart12
                                            )}
                                          >
                                            {false ? (
                                              <OutlinedIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__rQpLw
                                                )}
                                                role={"img"}
                                              />
                                            ) : null}
                                            <FilledIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__hSegv
                                              )}
                                              role={"img"}
                                            />
                                          </div>
                                        ) : null}
                                        <div
                                          data-plasmic-name={"typography16"}
                                          data-plasmic-override={
                                            overrides.typography16
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.typography16
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium10"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium10
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium10
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text42"}
                                            data-plasmic-override={
                                              overrides.text42
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text42
                                            )}
                                          >
                                            {"0/100"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer33"}
                                              data-plasmic-override={
                                                overrides.spacer33
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer33
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      </Stack__>
                                    ) : null}
                                  </Stack__>
                                ) : null}
                                <div
                                  data-plasmic-name={"inputElementTextField4"}
                                  data-plasmic-override={
                                    overrides.inputElementTextField4
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementTextField4
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementTextFieldMediumEnabled2"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementTextFieldMediumEnabled2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementTextFieldMediumEnabled2
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={
                                      "leadingArtworkContainer8"
                                    }
                                    data-plasmic-override={
                                      overrides.leadingArtworkContainer8
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingArtworkContainer8
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"search2"}
                                      data-plasmic-override={overrides.search2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.search2
                                      )}
                                    >
                                      {false ? (
                                        <Outlined7Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__rRoVu
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <Outlined7Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__zrMdq
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "leadingLabelContainer8"
                                      }
                                      data-plasmic-override={
                                        overrides.leadingLabelContainer8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingLabelContainer8
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"leadingLabel8"}
                                          data-plasmic-override={
                                            overrides.leadingLabel8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.leadingLabel8
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium11"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium11
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium11
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text43"}
                                            data-plasmic-override={
                                              overrides.text43
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text43
                                            )}
                                          >
                                            {"$"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer34"}
                                              data-plasmic-override={
                                                overrides.spacer34
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer34
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                  <div
                                    data-plasmic-name={
                                      "inputElementContentText8"
                                    }
                                    data-plasmic-override={
                                      overrides.inputElementContentText8
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementContentText8
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseInputElementContentTextMediumOff4"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseInputElementContentTextMediumOff4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseInputElementContentTextMediumOff4
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text44"}
                                      data-plasmic-override={overrides.text44}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text44
                                      )}
                                    >
                                      {"Placeholder"}
                                    </div>
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "trailingLabelEnhancer8"
                                      }
                                      data-plasmic-override={
                                        overrides.trailingLabelEnhancer8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingLabelEnhancer8
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"trailingLabel8"}
                                          data-plasmic-override={
                                            overrides.trailingLabel8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.trailingLabel8
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium12"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium12
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium12
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text45"}
                                            data-plasmic-override={
                                              overrides.text45
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text45
                                            )}
                                          >
                                            {"USD"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer35"}
                                              data-plasmic-override={
                                                overrides.spacer35
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer35
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "trailingArtworkContainer8"
                                      }
                                      data-plasmic-override={
                                        overrides.trailingArtworkContainer8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingArtworkContainer8
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"trailingArtwork8"}
                                          data-plasmic-override={
                                            overrides.trailingArtwork8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.trailingArtwork8
                                          )}
                                        >
                                          {false ? (
                                            <Outlined5Icon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__v9Y0S
                                              )}
                                              role={"img"}
                                            />
                                          ) : null}
                                          <Filled4Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__qLnO3
                                            )}
                                            role={"img"}
                                          />
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputElementHint4"}
                                    data-plasmic-override={
                                      overrides.inputElementHint4
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementHint4
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={"heart13"}
                                        data-plasmic-override={
                                          overrides.heart13
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.heart13
                                        )}
                                      >
                                        {false ? (
                                          <Outlined4Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__tHbWv
                                            )}
                                            role={"img"}
                                          />
                                        ) : null}
                                        <Filled3Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__bzHdg
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    ) : null}
                                    <div
                                      data-plasmic-name={"hint4"}
                                      data-plasmic-override={overrides.hint4}
                                      className={classNames(
                                        projectcss.all,
                                        sty.hint4
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyParagraphSmall4"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyParagraphSmall4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyParagraphSmall4
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text46"}
                                        data-plasmic-override={overrides.text46}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text46
                                        )}
                                      >
                                        {"Hint"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer36"}
                                          data-plasmic-override={
                                            overrides.spacer36
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer36
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  </Stack__>
                                ) : null}
                              </Stack__>
                            </Stack__>
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem7"}
                            data-plasmic-override={overrides.menuItem7}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem7
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled5"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled5
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled5
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked5"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked5
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked5
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked5"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked5
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon5"}
                                  data-plasmic-override={overrides.icon5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon5
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__oe2Hn
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__vvdWe
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer5"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer5
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer5
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart14"}
                                  data-plasmic-override={overrides.heart14}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart14
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__e6UJ2
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__cwws8
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame5"}
                              data-plasmic-override={overrides.textFrame5}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame5
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText5"}
                                data-plasmic-override={overrides.leadingText5}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText5
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography17"}
                                  data-plasmic-override={overrides.typography17}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography17
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium13"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium13
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium13
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text47"}
                                    data-plasmic-override={overrides.text47}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text47
                                    )}
                                  >
                                    {"Mod\u00e8le de concert 20h"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer37"}
                                      data-plasmic-override={overrides.spacer37}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer37
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography18"}
                                    data-plasmic-override={
                                      overrides.typography18
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography18
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium14"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium14
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium14
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text48"}
                                      data-plasmic-override={overrides.text48}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text48
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer38"}
                                        data-plasmic-override={
                                          overrides.spacer38
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer38
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography19"}
                                  data-plasmic-override={overrides.typography19}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography19
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium15"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium15
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium15
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fglpT
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer39"}
                                      data-plasmic-override={overrides.spacer39}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer39
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer5"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer5
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer5
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart15"}
                                  data-plasmic-override={overrides.heart15}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart15
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__wVyO
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gSiR4
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem8"}
                            data-plasmic-override={overrides.menuItem8}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem8
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled6"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled6
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled6
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked6"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked6
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked6
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked6"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked6
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked6
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon6"}
                                  data-plasmic-override={overrides.icon6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon6
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__my1Ky
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__kUrCr
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer6"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer6
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer6
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart16"}
                                  data-plasmic-override={overrides.heart16}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart16
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__b8Mz9
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__yFq1Z
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame6"}
                              data-plasmic-override={overrides.textFrame6}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame6
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText6"}
                                data-plasmic-override={overrides.leadingText6}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText6
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography20"}
                                  data-plasmic-override={overrides.typography20}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography20
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium16"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium16
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium16
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text49"}
                                    data-plasmic-override={overrides.text49}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text49
                                    )}
                                  >
                                    {"Mod\u00e8le de match 21h"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer40"}
                                      data-plasmic-override={overrides.spacer40}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer40
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography21"}
                                    data-plasmic-override={
                                      overrides.typography21
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography21
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium17"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium17
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium17
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text50"}
                                      data-plasmic-override={overrides.text50}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text50
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer41"}
                                        data-plasmic-override={
                                          overrides.spacer41
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer41
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography22"}
                                  data-plasmic-override={overrides.typography22}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography22
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium18"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium18
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium18
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bYBwG
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer42"}
                                      data-plasmic-override={overrides.spacer42}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer42
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer6"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer6
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer6
                                )}
                              >
                                <div
                                  data-plasmic-name={"checkmarkSmall2"}
                                  data-plasmic-override={
                                    overrides.checkmarkSmall2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.checkmarkSmall2
                                  )}
                                >
                                  {false ? (
                                    <Outlined9Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__dy59R
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined9Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__p2LwJ
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem9"}
                            data-plasmic-override={overrides.menuItem9}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem9
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled7"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled7
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked7"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked7
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked7
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked7"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked7
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked7
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon7"}
                                  data-plasmic-override={overrides.icon7}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon7
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__vspm2
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___8XcGy
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer7"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer7
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer7
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart17"}
                                  data-plasmic-override={overrides.heart17}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart17
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__vCTwv
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__yaRNl
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <IcRoundPlusIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__c0ZqR
                              )}
                              role={"img"}
                            />

                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame7"}
                              data-plasmic-override={overrides.textFrame7}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame7
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText7"}
                                data-plasmic-override={overrides.leadingText7}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText7
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography23"}
                                  data-plasmic-override={overrides.typography23}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography23
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium19"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium19
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium19
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text51"}
                                    data-plasmic-override={overrides.text51}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text51
                                    )}
                                  >
                                    {"Dispositif vierge"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer43"}
                                      data-plasmic-override={overrides.spacer43}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer43
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography24"}
                                    data-plasmic-override={
                                      overrides.typography24
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography24
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium20"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium20
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium20
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text52"}
                                      data-plasmic-override={overrides.text52}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text52
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer44"}
                                        data-plasmic-override={
                                          overrides.spacer44
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer44
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography25"}
                                  data-plasmic-override={overrides.typography25}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography25
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium21"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium21
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium21
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yzBWx
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer45"}
                                      data-plasmic-override={overrides.spacer45}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer45
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer7"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer7
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer7
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart18"}
                                  data-plasmic-override={overrides.heart18}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart18
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__pu8Iw
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___21JpZ
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"menuItem10"}
                              data-plasmic-override={overrides.menuItem10}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuItem10
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseMenuItemOptionMediumStandardEnabled8"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseMenuItemOptionMediumStandardEnabled8
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseMenuItemOptionMediumStandardEnabled8
                                  )}
                                />
                              ) : null}
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={
                                    "menuItemControlMediumCheckboxUnchecked8"
                                  }
                                  data-plasmic-override={
                                    overrides.menuItemControlMediumCheckboxUnchecked8
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.menuItemControlMediumCheckboxUnchecked8
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseMenuItemControlMediumCheckboxUnchecked8"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseMenuItemControlMediumCheckboxUnchecked8
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"icon8"}
                                    data-plasmic-override={overrides.icon8}
                                    className={classNames(
                                      projectcss.all,
                                      sty.icon8
                                    )}
                                  >
                                    {false ? (
                                      <Outlined8Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__eiKoY
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___138Pq
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"leadingEnhancer8"}
                                  data-plasmic-override={
                                    overrides.leadingEnhancer8
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingEnhancer8
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"heart19"}
                                    data-plasmic-override={overrides.heart19}
                                    className={classNames(
                                      projectcss.all,
                                      sty.heart19
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__fvorx
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hSv6D
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"textFrame8"}
                                data-plasmic-override={overrides.textFrame8}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.textFrame8
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingText8"}
                                  data-plasmic-override={overrides.leadingText8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingText8
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"typography26"}
                                    data-plasmic-override={
                                      overrides.typography26
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography26
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium22"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium22
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium22
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text53"}
                                      data-plasmic-override={overrides.text53}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text53
                                      )}
                                    >
                                      {"Options"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer46"}
                                        data-plasmic-override={
                                          overrides.spacer46
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer46
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"typography27"}
                                      data-plasmic-override={
                                        overrides.typography27
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.typography27
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyParagraphMedium23"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyParagraphMedium23
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyParagraphMedium23
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text54"}
                                        data-plasmic-override={overrides.text54}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text54
                                        )}
                                      >
                                        {"Supporting text"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer47"}
                                          data-plasmic-override={
                                            overrides.spacer47
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer47
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography28"}
                                    data-plasmic-override={
                                      overrides.typography28
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography28
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium24"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium24
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium24
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6WiP4
                                      )}
                                    >
                                      {"Text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer48"}
                                        data-plasmic-override={
                                          overrides.spacer48
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer48
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </Stack__>
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"trailingEnhancer8"}
                                  data-plasmic-override={
                                    overrides.trailingEnhancer8
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingEnhancer8
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"heart20"}
                                    data-plasmic-override={overrides.heart20}
                                    className={classNames(
                                      projectcss.all,
                                      sty.heart20
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__bqft3
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__b7BUo
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                            </Stack__>
                          ) : null}
                          <div
                            data-plasmic-name={"scrollBar2"}
                            data-plasmic-override={overrides.scrollBar2}
                            className={classNames(
                              projectcss.all,
                              sty.scrollBar2
                            )}
                          />
                        </div>
                      </div>
                    </Stack__>
                  ) : null}
                  <DropDown
                    data-plasmic-name={"model2"}
                    data-plasmic-override={overrides.model2}
                    check={false}
                    className={classNames("__wab_instance", sty.model2)}
                    label={"Mod\u00e8le de Runsheet & Dispositif*"}
                    options={["Default", "Special"]}
                    showLabel={true}
                    state={"default"}
                    type={"default"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttons2"}
                    data-plasmic-override={overrides.buttons2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttons2)}
                  >
                    <Button
                      data-plasmic-name={"button5"}
                      data-plasmic-override={overrides.button5}
                      className={classNames("__wab_instance", sty.button5)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nXr87
                          )}
                        >
                          {"Cr\u00e9er"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["useIntegration"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["useIntegration"] != null &&
                          typeof $steps["useIntegration"] === "object" &&
                          typeof $steps["useIntegration"].then === "function"
                        ) {
                          $steps["useIntegration"] = await $steps[
                            "useIntegration"
                          ];
                        }
                      }}
                    />

                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1073713925"}
                        data-plasmic-override={overrides.frame1073713925}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1073713925
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4B4Ca
                          )}
                        >
                          <Line9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___54Wvh
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eh2No
                          )}
                        >
                          {"OU"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kNapL
                          )}
                        >
                          <Line9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jTxOi
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1073713931"}
                        data-plasmic-override={overrides.frame1073713931}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1073713931
                        )}
                      >
                        <Button
                          data-plasmic-name={"button6"}
                          data-plasmic-override={overrides.button6}
                          className={classNames("__wab_instance", sty.button6)}
                        />

                        <Stack__
                          as={"div"}
                          data-plasmic-name={"button7"}
                          data-plasmic-override={overrides.button7}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button7)}
                        >
                          <IcTwotoneAppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___1Kqkt
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a5Vht
                            )}
                          >
                            {"Apple"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"button8"}
                          data-plasmic-override={overrides.button8}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button8)}
                        >
                          <MdiFacebookIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__eme7W
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bxL3M
                            )}
                          >
                            {"Facebook"}
                          </div>
                        </Stack__>
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
              </React.Fragment>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__gz5N2)} />
            }
            heading={
              <div
                data-plasmic-name={"frame1437254017"}
                data-plasmic-override={overrides.frame1437254017}
                className={classNames(projectcss.all, sty.frame1437254017)}
              >
                <div
                  data-plasmic-name={"name3"}
                  data-plasmic-override={overrides.name3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name3
                  )}
                >
                  {"Modifier Retex"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254020"}
                  data-plasmic-override={overrides.frame1437254020}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254020)}
                >
                  <LinkSimpleIcon
                    className={classNames(projectcss.all, sty.svg___8Z3H)}
                    role={"img"}
                  />

                  <XIcon
                    className={classNames(projectcss.all, sty.svg__yPZc)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateNewOperation"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["editRetex"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewOperation"] != null &&
                        typeof $steps["updateNewOperation"] === "object" &&
                        typeof $steps["updateNewOperation"].then === "function"
                      ) {
                        $steps["updateNewOperation"] = await $steps[
                          "updateNewOperation"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
              </div>
            }
            isOpen={generateStateValueProp($state, ["editRetex2", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["editRetex2", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"newRetex2"}
            data-plasmic-override={overrides.newRetex2}
            className={classNames("__wab_instance", sty.newRetex2)}
            closeOnBackdropClick={false}
            content={
              <React.Fragment>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["defaultSubmit"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "v6umJuHyep6kPNyCAJjouT",
                                opId: "a1f030ec-46a3-4d03-9575-d19a1ca6ce47",
                                userArgs: {
                                  variables: [
                                    $state.form.value.feedback,
                                    $state.form.value.operation_id,
                                    $ctx.SupabaseUser.user.id,
                                    new Date().toISOString(),
                                    new Date().toISOString(),
                                    $state.header.userClientId
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f",
                                  "f096d45e-97a3-4437-8829-d176d9e5f788"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["defaultSubmit"] != null &&
                        typeof $steps["defaultSubmit"] === "object" &&
                        typeof $steps["defaultSubmit"].then === "function"
                      ) {
                        $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Retex cr\u00e9\u00e9",
                                undefined,
                                undefined,
                                "bottom"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateNewOperation"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["newRetex"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewOperation"] != null &&
                        typeof $steps["updateNewOperation"] === "object" &&
                        typeof $steps["updateNewOperation"].then === "function"
                      ) {
                        $steps["updateNewOperation"] = await $steps[
                          "updateNewOperation"
                        ];
                      }
                    },
                    onFinishFailed: async data => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: ["error", "Erreur", ``, undefined, "bottom"]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__jmt5
                        )}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Cudg
                            )}
                          >
                            {"Commentaires"}
                          </div>
                        }
                        name={"feedback"}
                      >
                        {(() => {
                          const child$Props = {
                            autoSize: false,
                            className: classNames(
                              "__wab_instance",
                              sty.textArea
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],
                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__fyV7S
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4CleH
                            )}
                          >
                            {"Op\u00e9ration"}
                          </div>
                        }
                        name={"operation_id"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Mod\u00e8le requis"
                          }
                        ]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          className={classNames("__wab_instance", sty.select2)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select2",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          optionClassName={classNames({
                            [sty["pcls_Yh02d6mV2aBy"]]: true
                          })}
                          options={(() => {
                            try {
                              return $queries.rtxOperations.data.map(
                                ({ id, title }) => ({
                                  value: id,
                                  label: title
                                })
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  const __composite = [
                                    {
                                      type: "option",
                                      label: null,
                                      value: null
                                    },
                                    { type: "option", label: null, value: null }
                                  ];
                                  __composite["0"]["label"] =
                                    "Mod\u00e8le de match 21h";
                                  __composite["0"]["value"] = "1";
                                  __composite["1"]["label"] =
                                    "Mod\u00e8le de concert 20h";
                                  __composite["1"]["value"] = "2";
                                  return __composite;
                                })();
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___51
                              )}
                            >
                              {"S\u00e9lectionner"}
                            </div>
                          }
                          placeholderClassName={classNames({
                            [sty["pcls_m_l9sZLEyJvG"]]: true
                          })}
                          popupClassName={classNames({
                            [sty["pcls_tObUmTX67OTh"]]: true
                          })}
                          popupScopeClassName={sty["select2__popup"]}
                          size={"middle"}
                          triggerClassName={classNames({
                            [sty["pcls_4nmZOqXBvH3t"]]: true
                          })}
                          value={generateStateValueProp($state, [
                            "select2",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__dhlGc
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aOcm
                            )}
                          >
                            {"Cr\u00e9er"}
                          </div>
                        }
                        submitsForm={true}
                      />
                    </FormWrapper>
                  );
                })()}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <TextInput
                    data-plasmic-name={"titre"}
                    data-plasmic-override={overrides.titre}
                    className={classNames("__wab_instance", sty.titre)}
                    isMulti={false}
                    label={"Titre*"}
                    placeholder={"Titre*"}
                    showIcon={false}
                    showLabel={true}
                    state={"default"}
                    text={``}
                    type={"text"}
                  />

                  <SitexTextInput
                    data-plasmic-name={"texinput2"}
                    data-plasmic-override={overrides.texinput2}
                    className={classNames("__wab_instance", sty.texinput2)}
                    initialValue={generateStateValueProp($state, [
                      "texinput2",
                      "value"
                    ])}
                    inputClassName={classNames({
                      [sty["pcls_19lMdJdXraOR"]]: true
                    })}
                    onTextChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "texinput2",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    onValidationChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "texinput2",
                        "isInputValid"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={"Titre*"}
                    prefixedText={"Titre*"}
                    required={true}
                    type={"text"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"date"}
                    data-plasmic-override={overrides.date}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.date)}
                  >
                    <div
                      data-plasmic-name={"label6"}
                      data-plasmic-override={overrides.label6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label6
                      )}
                    >
                      {"Date et heure de d\u00e9but"}
                    </div>
                    {(() => {
                      const child$Props = {
                        allowClear: true,
                        className: classNames("__wab_instance", sty.timePicker),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["timePicker", "value"],
                            AntdDatePicker_Helpers
                          ).apply(null, eventArgs);
                        },
                        popupScopeClassName: sty["timePicker__datePickerPopup"],
                        showTime: true,
                        value: generateStateValueProp($state, [
                          "timePicker",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "timePicker.value"
                          }
                        ],
                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdDatePicker
                          data-plasmic-name={"timePicker"}
                          data-plasmic-override={overrides.timePicker}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                  <DropDown
                    data-plasmic-name={"type"}
                    data-plasmic-override={overrides.type}
                    check={false}
                    className={classNames("__wab_instance", sty.type)}
                    label={"Type"}
                    options={["Default", "Special"]}
                    showLabel={true}
                    state={"default"}
                    type={"default"}
                  />

                  <TextInput
                    data-plasmic-name={"budget"}
                    data-plasmic-override={overrides.budget}
                    className={classNames("__wab_instance", sty.budget)}
                    isMulti={false}
                    label={"Budget"}
                    placeholder={"\u20ac"}
                    showIcon={false}
                    showLabel={true}
                    state={"default"}
                    text={""}
                    type={"text"}
                  />

                  <TextInput
                    data-plasmic-name={"comments"}
                    data-plasmic-override={overrides.comments}
                    className={classNames("__wab_instance", sty.comments)}
                    isMulti={false}
                    label={"Commentaires"}
                    placeholder={"Commentaires"}
                    showIcon={false}
                    showLabel={true}
                    state={"Placeholder"}
                    text={""}
                    type={"TextArea"}
                  />

                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"input5"}
                      data-plasmic-override={overrides.input5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.input5)}
                    >
                      <div
                        data-plasmic-name={"name2"}
                        data-plasmic-override={overrides.name2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.name2
                        )}
                      >
                        {"Dispositif"}
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"datePickerWeb"}
                        data-plasmic-override={overrides.datePickerWeb}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.datePickerWeb
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputSelect"}
                          data-plasmic-override={overrides.inputSelect}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputSelect
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"signedByBaseFieldGroupSmall"}
                              data-plasmic-override={
                                overrides.signedByBaseFieldGroupSmall
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseFieldGroupSmall
                              )}
                            />
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"endDateCalendar"}
                            data-plasmic-override={overrides.endDateCalendar}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.endDateCalendar
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"inputElementTextField"}
                                data-plasmic-override={
                                  overrides.inputElementTextField
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.inputElementTextField
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseInputElementTextFieldSmallEnabled"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseInputElementTextFieldSmallEnabled
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseInputElementTextFieldSmallEnabled
                                    )}
                                  />
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "leadingArtworkContainer"
                                    }
                                    data-plasmic-override={
                                      overrides.leadingArtworkContainer
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingArtworkContainer
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"leadingArtwork"}
                                      data-plasmic-override={
                                        overrides.leadingArtwork
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingArtwork
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__qfKpl
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__xIp6
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={"leadingLabelContainer"}
                                    data-plasmic-override={
                                      overrides.leadingLabelContainer
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabelContainer
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"leadingLabel"}
                                      data-plasmic-override={
                                        overrides.leadingLabel
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingLabel
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelSmall"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelSmall
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelSmall
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text5"}
                                        data-plasmic-override={overrides.text5}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text5
                                        )}
                                      >
                                        {"$"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer"}
                                          data-plasmic-override={
                                            overrides.spacer
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  </div>
                                ) : null}
                                <div
                                  data-plasmic-name={"inputElementContentText"}
                                  data-plasmic-override={
                                    overrides.inputElementContentText
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementContentText
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementContentTextSmallOff"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementContentTextSmallOff
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementContentTextSmallOff
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text6"}
                                    data-plasmic-override={overrides.text6}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text6
                                    )}
                                  >
                                    {"MM/DD/YYYY"}
                                  </div>
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabelEnhancer"}
                                    data-plasmic-override={
                                      overrides.trailingLabelEnhancer
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabelEnhancer
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={"trailingLabel"}
                                        data-plasmic-override={
                                          overrides.trailingLabel
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.trailingLabel
                                        )}
                                      >
                                        {false ? (
                                          <div
                                            data-plasmic-name={
                                              "signedByBaseTypographyLabelSmall2"
                                            }
                                            data-plasmic-override={
                                              overrides.signedByBaseTypographyLabelSmall2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.signedByBaseTypographyLabelSmall2
                                            )}
                                          />
                                        ) : null}
                                        <div
                                          data-plasmic-name={"text7"}
                                          data-plasmic-override={
                                            overrides.text7
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text7
                                          )}
                                        >
                                          {"USD"}
                                        </div>
                                        {false ? (
                                          <div
                                            data-plasmic-name={"spacer2"}
                                            data-plasmic-override={
                                              overrides.spacer2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.spacer2
                                            )}
                                          />
                                        ) : null}
                                      </div>
                                    ) : null}
                                  </div>
                                ) : null}
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "trailingArtworkContainer"
                                    }
                                    data-plasmic-override={
                                      overrides.trailingArtworkContainer
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtworkContainer
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"trailingArtwork"}
                                      data-plasmic-override={
                                        overrides.trailingArtwork
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingArtwork
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__sExCm
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__iyX6U
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"calendar"}
                              data-plasmic-override={overrides.calendar}
                              className={classNames(
                                projectcss.all,
                                sty.calendar
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled
                                  )}
                                />
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingArtworkContainer2"}
                                data-plasmic-override={
                                  overrides.leadingArtworkContainer2
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtworkContainer2
                                )}
                              >
                                <div
                                  data-plasmic-name={"text8"}
                                  data-plasmic-override={overrides.text8}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text8
                                  )}
                                >
                                  {"S\u00e9lectionner..."}
                                </div>
                              </Stack__>
                              {false ? (
                                <div
                                  data-plasmic-name={"leadingLabelContainer2"}
                                  data-plasmic-override={
                                    overrides.leadingLabelContainer2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingLabelContainer2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"leadingLabel2"}
                                    data-plasmic-override={
                                      overrides.leadingLabel2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabel2
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelXSmall"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelXSmall
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelXSmall
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text9"}
                                      data-plasmic-override={overrides.text9}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text9
                                      )}
                                    >
                                      {"$"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer3"}
                                        data-plasmic-override={
                                          overrides.spacer3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer3
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"inputElementContentText2"}
                                  data-plasmic-override={
                                    overrides.inputElementContentText2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementContentText2
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementContentTextXSmallWebOff"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementContentTextXSmallWebOff
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementContentTextXSmallWebOff
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text10"}
                                    data-plasmic-override={overrides.text10}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text10
                                    )}
                                  >
                                    {"Jr"}
                                  </div>
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"trailingLabelEnhancer2"}
                                  data-plasmic-override={
                                    overrides.trailingLabelEnhancer2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingLabelEnhancer2
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={"trailingLabel2"}
                                      data-plasmic-override={
                                        overrides.trailingLabel2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingLabel2
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelXSmall2"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelXSmall2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelXSmall2
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text11"}
                                        data-plasmic-override={overrides.text11}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text11
                                        )}
                                      >
                                        {"USD"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer4"}
                                          data-plasmic-override={
                                            overrides.spacer4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer4
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "trailingArtworkContainer2"
                                  }
                                  data-plasmic-override={
                                    overrides.trailingArtworkContainer2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingArtworkContainer2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"trailingArtwork2"}
                                    data-plasmic-override={
                                      overrides.trailingArtwork2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtwork2
                                    )}
                                  >
                                    {false ? (
                                      <Outlined2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__zuQoV
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__sycfQ
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"selectIndicatorContainer"}
                                data-plasmic-override={
                                  overrides.selectIndicatorContainer
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.selectIndicatorContainer
                                )}
                              >
                                <div
                                  data-plasmic-name={"chevronIcon"}
                                  data-plasmic-override={overrides.chevronIcon}
                                  className={classNames(
                                    projectcss.all,
                                    sty.chevronIcon
                                  )}
                                >
                                  {false ? (
                                    <Outlined3Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__pBuD
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___7WYqN
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            </div>
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputElementHint"}
                              data-plasmic-override={overrides.inputElementHint}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputElementHint
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={"heart"}
                                  data-plasmic-override={overrides.heart}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart
                                  )}
                                >
                                  {false ? (
                                    <Outlined4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__bIPab
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__leXxc
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"hint"}
                                data-plasmic-override={overrides.hint}
                                className={classNames(projectcss.all, sty.hint)}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyParagraphSmall"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyParagraphSmall
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyParagraphSmall
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text12"}
                                  data-plasmic-override={overrides.text12}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text12
                                  )}
                                >
                                  {"MM/DD/YYYY"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer28"}
                                    data-plasmic-override={overrides.spacer28}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer28
                                    )}
                                  />
                                ) : null}
                              </div>
                            </Stack__>
                          ) : null}
                        </Stack__>
                      </Stack__>
                      <div
                        data-plasmic-name={"inputElementSelect"}
                        data-plasmic-override={overrides.inputElementSelect}
                        className={classNames(
                          projectcss.all,
                          sty.inputElementSelect
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseInputElementSelectMediumSingleDefaultActive"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseInputElementSelectMediumSingleDefaultActive
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseInputElementSelectMediumSingleDefaultActive
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"selectFrame"}
                            data-plasmic-override={overrides.selectFrame}
                            className={classNames(
                              projectcss.all,
                              sty.selectFrame
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"leadingArtworkContainer3"}
                                data-plasmic-override={
                                  overrides.leadingArtworkContainer3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtworkContainer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingArtwork2"}
                                  data-plasmic-override={
                                    overrides.leadingArtwork2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingArtwork2
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hTjBv
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__p9OvG
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"leadingLabelContainer3"}
                                data-plasmic-override={
                                  overrides.leadingLabelContainer3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingLabelContainer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingLabel3"}
                                  data-plasmic-override={
                                    overrides.leadingLabel3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingLabel3
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyLabelMedium"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyLabelMedium
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyLabelMedium
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text13"}
                                    data-plasmic-override={overrides.text13}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text13
                                    )}
                                  >
                                    {"$"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer5"}
                                      data-plasmic-override={overrides.spacer5}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer5
                                      )}
                                    />
                                  ) : null}
                                </div>
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"inputElementContentText3"}
                              data-plasmic-override={
                                overrides.inputElementContentText3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.inputElementContentText3
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementContentTextMediumOff"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementContentTextMediumOff
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementContentTextMediumOff
                                  )}
                                />
                              ) : null}
                              {false ? (
                                <div
                                  data-plasmic-name={"text14"}
                                  data-plasmic-override={overrides.text14}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text14
                                  )}
                                >
                                  {"S\u00e9lectionner..."}
                                </div>
                              ) : null}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"trailingLabelEnhancer3"}
                                data-plasmic-override={
                                  overrides.trailingLabelEnhancer3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingLabelEnhancer3
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabel3"}
                                    data-plasmic-override={
                                      overrides.trailingLabel3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabel3
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelMedium2"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelMedium2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelMedium2
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text15"}
                                      data-plasmic-override={overrides.text15}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text15
                                      )}
                                    >
                                      {"USD"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer6"}
                                        data-plasmic-override={
                                          overrides.spacer6
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer6
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"trailingArtworkContainer3"}
                                data-plasmic-override={
                                  overrides.trailingArtworkContainer3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingArtworkContainer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"trailingArtwork3"}
                                  data-plasmic-override={
                                    overrides.trailingArtwork3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingArtwork3
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__pjBfx
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pEpjm
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"selectIndicatorContainer2"}
                                data-plasmic-override={
                                  overrides.selectIndicatorContainer2
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.selectIndicatorContainer2
                                )}
                              >
                                <div
                                  data-plasmic-name={"chevronIcon2"}
                                  data-plasmic-override={overrides.chevronIcon2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.chevronIcon2
                                  )}
                                >
                                  {false ? (
                                    <Outlined6Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__cDfsn
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined6Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__bz3Pj
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"menu"}
                          data-plasmic-override={overrides.menu}
                          className={classNames(projectcss.all, sty.menu)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"signedByBaseMenuListMedium"}
                              data-plasmic-override={
                                overrides.signedByBaseMenuListMedium
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseMenuListMedium
                              )}
                            />
                          ) : null}
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"menuItem"}
                              data-plasmic-override={overrides.menuItem}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuItem
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseMenuItemSearchMediumNoneEnabled"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseMenuItemSearchMediumNoneEnabled
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseMenuItemSearchMediumNoneEnabled
                                  )}
                                />
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"searchField"}
                                data-plasmic-override={overrides.searchField}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.searchField
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseSearchFieldMediumEnabled"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseSearchFieldMediumEnabled
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseSearchFieldMediumEnabled
                                    )}
                                  />
                                ) : null}
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputElementLabel"}
                                    data-plasmic-override={
                                      overrides.inputElementLabel
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementLabel
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseInputElementLabelMedium"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseInputElementLabelMedium
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseInputElementLabelMedium
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"typography"}
                                      data-plasmic-override={
                                        overrides.typography
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.typography
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyLabelMedium3"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyLabelMedium3
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyLabelMedium3
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text16"}
                                        data-plasmic-override={overrides.text16}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text16
                                        )}
                                      >
                                        {"Label"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer7"}
                                          data-plasmic-override={
                                            overrides.spacer7
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer7
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                    {false ? (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={
                                          "characterCountFrame"
                                        }
                                        data-plasmic-override={
                                          overrides.characterCountFrame
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.characterCountFrame
                                        )}
                                      >
                                        {false ? (
                                          <div
                                            data-plasmic-name={"heart2"}
                                            data-plasmic-override={
                                              overrides.heart2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.heart2
                                            )}
                                          >
                                            {false ? (
                                              <OutlinedIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__kKvmn
                                                )}
                                                role={"img"}
                                              />
                                            ) : null}
                                            <FilledIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__ySosC
                                              )}
                                              role={"img"}
                                            />
                                          </div>
                                        ) : null}
                                        <div
                                          data-plasmic-name={"typography2"}
                                          data-plasmic-override={
                                            overrides.typography2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.typography2
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium4"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium4
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium4
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text17"}
                                            data-plasmic-override={
                                              overrides.text17
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text17
                                            )}
                                          >
                                            {"0/100"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer8"}
                                              data-plasmic-override={
                                                overrides.spacer8
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer8
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      </Stack__>
                                    ) : null}
                                  </Stack__>
                                ) : null}
                                <div
                                  data-plasmic-name={"inputElementTextField2"}
                                  data-plasmic-override={
                                    overrides.inputElementTextField2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.inputElementTextField2
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseInputElementTextFieldMediumEnabled"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseInputElementTextFieldMediumEnabled
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseInputElementTextFieldMediumEnabled
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={
                                      "leadingArtworkContainer4"
                                    }
                                    data-plasmic-override={
                                      overrides.leadingArtworkContainer4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingArtworkContainer4
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"search"}
                                      data-plasmic-override={overrides.search}
                                      className={classNames(
                                        projectcss.all,
                                        sty.search
                                      )}
                                    >
                                      {false ? (
                                        <Outlined7Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__yeYcT
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <Outlined7Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__uG4Cs
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "leadingLabelContainer4"
                                      }
                                      data-plasmic-override={
                                        overrides.leadingLabelContainer4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.leadingLabelContainer4
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"leadingLabel4"}
                                          data-plasmic-override={
                                            overrides.leadingLabel4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.leadingLabel4
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium5"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium5
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium5
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text18"}
                                            data-plasmic-override={
                                              overrides.text18
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text18
                                            )}
                                          >
                                            {"$"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer9"}
                                              data-plasmic-override={
                                                overrides.spacer9
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer9
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                  <div
                                    data-plasmic-name={
                                      "inputElementContentText4"
                                    }
                                    data-plasmic-override={
                                      overrides.inputElementContentText4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementContentText4
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseInputElementContentTextMediumOff2"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseInputElementContentTextMediumOff2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseInputElementContentTextMediumOff2
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text19"}
                                      data-plasmic-override={overrides.text19}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text19
                                      )}
                                    >
                                      {"Placeholder"}
                                    </div>
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "trailingLabelEnhancer4"
                                      }
                                      data-plasmic-override={
                                        overrides.trailingLabelEnhancer4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingLabelEnhancer4
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"trailingLabel4"}
                                          data-plasmic-override={
                                            overrides.trailingLabel4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.trailingLabel4
                                          )}
                                        >
                                          {false ? (
                                            <div
                                              data-plasmic-name={
                                                "signedByBaseTypographyLabelMedium6"
                                              }
                                              data-plasmic-override={
                                                overrides.signedByBaseTypographyLabelMedium6
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.signedByBaseTypographyLabelMedium6
                                              )}
                                            />
                                          ) : null}
                                          <div
                                            data-plasmic-name={"text20"}
                                            data-plasmic-override={
                                              overrides.text20
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text20
                                            )}
                                          >
                                            {"USD"}
                                          </div>
                                          {false ? (
                                            <div
                                              data-plasmic-name={"spacer10"}
                                              data-plasmic-override={
                                                overrides.spacer10
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.spacer10
                                              )}
                                            />
                                          ) : null}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "trailingArtworkContainer4"
                                      }
                                      data-plasmic-override={
                                        overrides.trailingArtworkContainer4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.trailingArtworkContainer4
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={"trailingArtwork4"}
                                          data-plasmic-override={
                                            overrides.trailingArtwork4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.trailingArtwork4
                                          )}
                                        >
                                          {false ? (
                                            <Outlined5Icon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__rcdt2
                                              )}
                                              role={"img"}
                                            />
                                          ) : null}
                                          <Filled4Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__iGhOf
                                            )}
                                            role={"img"}
                                          />
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputElementHint2"}
                                    data-plasmic-override={
                                      overrides.inputElementHint2
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputElementHint2
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={"heart3"}
                                        data-plasmic-override={overrides.heart3}
                                        className={classNames(
                                          projectcss.all,
                                          sty.heart3
                                        )}
                                      >
                                        {false ? (
                                          <Outlined4Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__k4LM4
                                            )}
                                            role={"img"}
                                          />
                                        ) : null}
                                        <Filled3Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__otptU
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    ) : null}
                                    <div
                                      data-plasmic-name={"hint2"}
                                      data-plasmic-override={overrides.hint2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.hint2
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyParagraphSmall2"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyParagraphSmall2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyParagraphSmall2
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text21"}
                                        data-plasmic-override={overrides.text21}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text21
                                        )}
                                      >
                                        {"Hint"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer29"}
                                          data-plasmic-override={
                                            overrides.spacer29
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer29
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  </Stack__>
                                ) : null}
                              </Stack__>
                            </Stack__>
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem2"}
                            data-plasmic-override={overrides.menuItem2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem2
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon"}
                                  data-plasmic-override={overrides.icon}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__fPzrP
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__t4Ad
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart4"}
                                  data-plasmic-override={overrides.heart4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart4
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__j8SH4
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__fj3Eh
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame"}
                              data-plasmic-override={overrides.textFrame}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText"}
                                data-plasmic-override={overrides.leadingText}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography3"}
                                  data-plasmic-override={overrides.typography3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography3
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text22"}
                                    data-plasmic-override={overrides.text22}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text22
                                    )}
                                  >
                                    {"Mod\u00e8le de concert 20h"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer11"}
                                      data-plasmic-override={overrides.spacer11}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer11
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography4"}
                                    data-plasmic-override={
                                      overrides.typography4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography4
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium2"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium2
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text23"}
                                      data-plasmic-override={overrides.text23}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text23
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer12"}
                                        data-plasmic-override={
                                          overrides.spacer12
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer12
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography5"}
                                  data-plasmic-override={overrides.typography5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography5
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium3"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium3
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uVQoR
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer13"}
                                      data-plasmic-override={overrides.spacer13}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer13
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart5"}
                                  data-plasmic-override={overrides.heart5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart5
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__bfJwY
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__azs5G
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem3"}
                            data-plasmic-override={overrides.menuItem3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem3
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled2"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled2
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled2
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked2"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked2
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked2
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked2"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked2
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon2"}
                                  data-plasmic-override={overrides.icon2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon2
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__z21Jh
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__napSv
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer2"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer2
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer2
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart6"}
                                  data-plasmic-override={overrides.heart6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart6
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__vbsek
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__zqK9H
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame2"}
                              data-plasmic-override={overrides.textFrame2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame2
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText2"}
                                data-plasmic-override={overrides.leadingText2}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText2
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography6"}
                                  data-plasmic-override={overrides.typography6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography6
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium4"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium4
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text24"}
                                    data-plasmic-override={overrides.text24}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text24
                                    )}
                                  >
                                    {"Mod\u00e8le de match 21h"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer14"}
                                      data-plasmic-override={overrides.spacer14}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer14
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography7"}
                                    data-plasmic-override={
                                      overrides.typography7
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography7
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium5"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium5
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text25"}
                                      data-plasmic-override={overrides.text25}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text25
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer15"}
                                        data-plasmic-override={
                                          overrides.spacer15
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer15
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography8"}
                                  data-plasmic-override={overrides.typography8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography8
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium6"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium6
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium6
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gyMl
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer16"}
                                      data-plasmic-override={overrides.spacer16}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer16
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer2"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer2
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer2
                                )}
                              >
                                <div
                                  data-plasmic-name={"checkmarkSmall"}
                                  data-plasmic-override={
                                    overrides.checkmarkSmall
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.checkmarkSmall
                                  )}
                                >
                                  {false ? (
                                    <Outlined9Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__dgxkz
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined9Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__exy58
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"menuItem4"}
                            data-plasmic-override={overrides.menuItem4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItem4
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemOptionMediumStandardEnabled3"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemOptionMediumStandardEnabled3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemOptionMediumStandardEnabled3
                                )}
                              />
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={
                                  "menuItemControlMediumCheckboxUnchecked3"
                                }
                                data-plasmic-override={
                                  overrides.menuItemControlMediumCheckboxUnchecked3
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuItemControlMediumCheckboxUnchecked3
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseMenuItemControlMediumCheckboxUnchecked3"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseMenuItemControlMediumCheckboxUnchecked3
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"icon3"}
                                  data-plasmic-override={overrides.icon3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.icon3
                                  )}
                                >
                                  {false ? (
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__iUh2K
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Outlined8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__r0VWo
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"leadingEnhancer3"}
                                data-plasmic-override={
                                  overrides.leadingEnhancer3
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingEnhancer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart7"}
                                  data-plasmic-override={overrides.heart7}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart7
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hq8PZ
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__suEnn
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                            <IcRoundPlusIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__l4O7S
                              )}
                              role={"img"}
                            />

                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textFrame3"}
                              data-plasmic-override={overrides.textFrame3}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textFrame3
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingText3"}
                                data-plasmic-override={overrides.leadingText3}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingText3
                                )}
                              >
                                <div
                                  data-plasmic-name={"typography9"}
                                  data-plasmic-override={overrides.typography9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography9
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium7"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium7
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text26"}
                                    data-plasmic-override={overrides.text26}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text26
                                    )}
                                  >
                                    {"Dispositif vierge"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer17"}
                                      data-plasmic-override={overrides.spacer17}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer17
                                      )}
                                    />
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography10"}
                                    data-plasmic-override={
                                      overrides.typography10
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography10
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium8"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium8
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium8
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text27"}
                                      data-plasmic-override={overrides.text27}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text27
                                      )}
                                    >
                                      {"Supporting text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer18"}
                                        data-plasmic-override={
                                          overrides.spacer18
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer18
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"typography11"}
                                  data-plasmic-override={overrides.typography11}
                                  className={classNames(
                                    projectcss.all,
                                    sty.typography11
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyParagraphMedium9"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyParagraphMedium9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyParagraphMedium9
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0Jxwd
                                    )}
                                  >
                                    {"Text"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer19"}
                                      data-plasmic-override={overrides.spacer19}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer19
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </Stack__>
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"trailingEnhancer3"}
                                data-plasmic-override={
                                  overrides.trailingEnhancer3
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingEnhancer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"heart8"}
                                  data-plasmic-override={overrides.heart8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart8
                                  )}
                                >
                                  {false ? (
                                    <Outlined5Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__zLkIr
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__uAq1Z
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"menuItem5"}
                              data-plasmic-override={overrides.menuItem5}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuItem5
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseMenuItemOptionMediumStandardEnabled4"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseMenuItemOptionMediumStandardEnabled4
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseMenuItemOptionMediumStandardEnabled4
                                  )}
                                />
                              ) : null}
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={
                                    "menuItemControlMediumCheckboxUnchecked4"
                                  }
                                  data-plasmic-override={
                                    overrides.menuItemControlMediumCheckboxUnchecked4
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.menuItemControlMediumCheckboxUnchecked4
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseMenuItemControlMediumCheckboxUnchecked4"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseMenuItemControlMediumCheckboxUnchecked4
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"icon4"}
                                    data-plasmic-override={overrides.icon4}
                                    className={classNames(
                                      projectcss.all,
                                      sty.icon4
                                    )}
                                  >
                                    {false ? (
                                      <Outlined8Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___9Xxk9
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Outlined8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__nXe4
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"leadingEnhancer4"}
                                  data-plasmic-override={
                                    overrides.leadingEnhancer4
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingEnhancer4
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"heart9"}
                                    data-plasmic-override={overrides.heart9}
                                    className={classNames(
                                      projectcss.all,
                                      sty.heart9
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__ek5N
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__tG2Ct
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"textFrame4"}
                                data-plasmic-override={overrides.textFrame4}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.textFrame4
                                )}
                              >
                                <div
                                  data-plasmic-name={"leadingText4"}
                                  data-plasmic-override={overrides.leadingText4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.leadingText4
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"typography12"}
                                    data-plasmic-override={
                                      overrides.typography12
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography12
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium10"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium10
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium10
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text28"}
                                      data-plasmic-override={overrides.text28}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text28
                                      )}
                                    >
                                      {"Options"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer20"}
                                        data-plasmic-override={
                                          overrides.spacer20
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer20
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"typography13"}
                                      data-plasmic-override={
                                        overrides.typography13
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.typography13
                                      )}
                                    >
                                      {false ? (
                                        <div
                                          data-plasmic-name={
                                            "signedByBaseTypographyParagraphMedium11"
                                          }
                                          data-plasmic-override={
                                            overrides.signedByBaseTypographyParagraphMedium11
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.signedByBaseTypographyParagraphMedium11
                                          )}
                                        />
                                      ) : null}
                                      <div
                                        data-plasmic-name={"text29"}
                                        data-plasmic-override={overrides.text29}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text29
                                        )}
                                      >
                                        {"Supporting text"}
                                      </div>
                                      {false ? (
                                        <div
                                          data-plasmic-name={"spacer21"}
                                          data-plasmic-override={
                                            overrides.spacer21
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.spacer21
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"typography14"}
                                    data-plasmic-override={
                                      overrides.typography14
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography14
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyParagraphMedium12"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyParagraphMedium12
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyParagraphMedium12
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cShAl
                                      )}
                                    >
                                      {"Text"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer22"}
                                        data-plasmic-override={
                                          overrides.spacer22
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer22
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </Stack__>
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"trailingEnhancer4"}
                                  data-plasmic-override={
                                    overrides.trailingEnhancer4
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingEnhancer4
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"heart10"}
                                    data-plasmic-override={overrides.heart10}
                                    className={classNames(
                                      projectcss.all,
                                      sty.heart10
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__lOrc
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__nFT7
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              ) : null}
                            </Stack__>
                          ) : null}
                          <div
                            data-plasmic-name={"scrollBar"}
                            data-plasmic-override={overrides.scrollBar}
                            className={classNames(
                              projectcss.all,
                              sty.scrollBar
                            )}
                          />
                        </div>
                      </div>
                    </Stack__>
                  ) : null}
                  <DropDown
                    data-plasmic-name={"model"}
                    data-plasmic-override={overrides.model}
                    check={false}
                    className={classNames("__wab_instance", sty.model)}
                    label={"Mod\u00e8le de Runsheet & Dispositif*"}
                    options={["Default", "Special"]}
                    showLabel={true}
                    state={"default"}
                    type={"default"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttons"}
                    data-plasmic-override={overrides.buttons}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttons)}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___23Q5U
                          )}
                        >
                          {"Cr\u00e9er"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["useIntegration"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["useIntegration"] != null &&
                          typeof $steps["useIntegration"] === "object" &&
                          typeof $steps["useIntegration"].then === "function"
                        ) {
                          $steps["useIntegration"] = await $steps[
                            "useIntegration"
                          ];
                        }
                      }}
                    />

                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1073713924"}
                        data-plasmic-override={overrides.frame1073713924}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1073713924
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8FPsc
                          )}
                        >
                          <Line9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tg5L2
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jRlaf
                          )}
                        >
                          {"OU"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aiWro
                          )}
                        >
                          <Line9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___80Ecw
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1073713930"}
                        data-plasmic-override={overrides.frame1073713930}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1073713930
                        )}
                      >
                        <Button
                          data-plasmic-name={"button2"}
                          data-plasmic-override={overrides.button2}
                          className={classNames("__wab_instance", sty.button2)}
                        />

                        <Stack__
                          as={"div"}
                          data-plasmic-name={"button3"}
                          data-plasmic-override={overrides.button3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button3)}
                        >
                          <IcTwotoneAppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zvrBo
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zueIj
                            )}
                          >
                            {"Apple"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"button4"}
                          data-plasmic-override={overrides.button4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button4)}
                        >
                          <MdiFacebookIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jj4K
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aLppH
                            )}
                          >
                            {"Facebook"}
                          </div>
                        </Stack__>
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
              </React.Fragment>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__d5TrK)} />
            }
            heading={
              <div
                data-plasmic-name={"frame1437254016"}
                data-plasmic-override={overrides.frame1437254016}
                className={classNames(projectcss.all, sty.frame1437254016)}
              >
                <div
                  data-plasmic-name={"name"}
                  data-plasmic-override={overrides.name}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name
                  )}
                >
                  {"Nouveau Retex"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254019"}
                  data-plasmic-override={overrides.frame1437254019}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254019)}
                >
                  <LinkSimpleIcon
                    className={classNames(projectcss.all, sty.svg__u5Yw)}
                    role={"img"}
                  />

                  <XIcon
                    className={classNames(projectcss.all, sty.svg___8NMTm)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateNewOperation"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["newRetex"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNewOperation"] != null &&
                        typeof $steps["updateNewOperation"] === "object" &&
                        typeof $steps["updateNewOperation"].then === "function"
                      ) {
                        $steps["updateNewOperation"] = await $steps[
                          "updateNewOperation"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
              </div>
            }
            isOpen={generateStateValueProp($state, ["newRetex2", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["newRetex2", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            trigger={null}
          />

          <div
            data-plasmic-name={"accueilDashboard"}
            data-plasmic-override={overrides.accueilDashboard}
            className={classNames(projectcss.all, sty.accueilDashboard)}
          >
            <LeftMenu
              data-plasmic-name={"leftMenu"}
              data-plasmic-override={overrides.leftMenu}
              className={classNames("__wab_instance", sty.leftMenu)}
              onSubMenuParamsChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "leftMenu",
                  "subMenuParams"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            <TabsContainer
              initialKey={(() => {
                try {
                  return 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              previewKey={(() => {
                try {
                  return 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    data-plasmic-name={"main"}
                    data-plasmic-override={overrides.main}
                    className={classNames(projectcss.all, sty.main)}
                  >
                    <Header
                      data-plasmic-name={"header"}
                      data-plasmic-override={overrides.header}
                      className={classNames("__wab_instance", sty.header)}
                      onMoisChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "header",
                          "mois"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOperationIdChange2={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "header",
                          "operationId"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onRunsheetChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "header",
                          "runsheet"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onUserClientIdChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "header",
                          "userClientId"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      operationId={generateStateValueProp($state, [
                        "header",
                        "operationId"
                      ])}
                      runsheet={generateStateValueProp($state, [
                        "header",
                        "runsheet"
                      ])}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437253918"}
                      data-plasmic-override={overrides.frame1437253918}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253918
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"filters2"}
                        data-plasmic-override={overrides.filters2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.filters2)}
                      >
                        <Button
                          data-plasmic-name={"buttonFilter2"}
                          data-plasmic-override={overrides.buttonFilter2}
                          className={classNames(
                            "__wab_instance",
                            sty.buttonFilter2
                          )}
                          disabled={true}
                          end={
                            <PlusIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ixCJu
                              )}
                              role={"img"}
                            />
                          }
                          iconStart={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4Dg9B
                              )}
                            >
                              {"Filtrer"}
                            </div>
                          }
                          start={
                            <SlidersHorizontalIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xdWzZ
                              )}
                              role={"img"}
                            />
                          }
                          type={"secondary"}
                        />

                        <Button
                          data-plasmic-name={"buttonAdd2"}
                          data-plasmic-override={overrides.buttonAdd2}
                          className={classNames(
                            "__wab_instance",
                            sty.buttonAdd2
                          )}
                          end={
                            <PlusIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__cAhWs
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eF1E
                              )}
                            >
                              {"Cr\u00e9er un nouveau RETEX"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateVariable"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["newRetex"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVariable"] != null &&
                              typeof $steps["updateVariable"] === "object" &&
                              typeof $steps["updateVariable"].then ===
                                "function"
                            ) {
                              $steps["updateVariable"] = await $steps[
                                "updateVariable"
                              ];
                            }
                          }}
                        />
                      </Stack__>
                      <RetexMenu
                        data-plasmic-name={"retexMenu"}
                        data-plasmic-override={overrides.retexMenu}
                        className={classNames("__wab_instance", sty.retexMenu)}
                        submenu={"analytics"}
                      />

                      <TabsContainer initialKey={"tab1"}>
                        <DataCtxReader__>
                          {$ctx => (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___8CJ81
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dRhEw
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"buttonBase"}
                                  data-plasmic-override={overrides.buttonBase}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.buttonBase
                                  )}
                                >
                                  <SlidersHorizontal2Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__rOMcL
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"text"}
                                    data-plasmic-override={overrides.text}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text
                                    )}
                                  >
                                    {"Filtrer"}
                                  </div>
                                </Stack__>
                                <div
                                  data-plasmic-name={"subTabs"}
                                  data-plasmic-override={overrides.subTabs}
                                  className={classNames(
                                    projectcss.all,
                                    sty.subTabs
                                  )}
                                >
                                  <TabButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabButton___0Lw1P
                                    )}
                                    tabKey={"tab1"}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__aGr3K
                                      )}
                                      color={(() => {
                                        try {
                                          return $ctx.currentTabKey === "tab1"
                                            ? "success"
                                            : null;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "success";
                                          }
                                          throw e;
                                        }
                                      })()}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__yNwhS
                                          )}
                                        >
                                          {"Bilan dispositif"}
                                        </div>
                                      }
                                      type={"tag"}
                                    />
                                  </TabButton>
                                  <TabButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabButton__ag7Dv
                                    )}
                                    tabKey={"tab2"}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__xwFvk
                                      )}
                                      color={(() => {
                                        try {
                                          return $ctx.currentTabKey === "tab2"
                                            ? "success"
                                            : null;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fz7M
                                          )}
                                        >
                                          {"Bilan quantitatif et main courante"}
                                        </div>
                                      }
                                      type={"tag"}
                                    />
                                  </TabButton>
                                  <TabButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabButton___08OZx
                                    )}
                                    tabKey={"tab3"}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__ohlcY
                                      )}
                                      color={(() => {
                                        try {
                                          return $ctx.currentTabKey === "tab3"
                                            ? "success"
                                            : null;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__t4Op9
                                          )}
                                        >
                                          {
                                            "Faits marquants et regard particulier"
                                          }
                                        </div>
                                      }
                                      type={"tag"}
                                    />
                                  </TabButton>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__d4LeR
                                )}
                              >
                                <TabContent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabContent__maXl
                                  )}
                                  tabKey={"tab1"}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ePNyM
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"metricItem"}
                                      data-plasmic-override={
                                        overrides.metricItem
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.metricItem
                                      )}
                                    >
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"headingAndDropdown"}
                                        data-plasmic-override={
                                          overrides.headingAndDropdown
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.headingAndDropdown
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"heading"}
                                          data-plasmic-override={
                                            overrides.heading
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.heading
                                          )}
                                        >
                                          {
                                            "Total Heures de Services pr\u00e9vues"
                                          }
                                        </div>
                                      </Stack__>
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"numberAndChart"}
                                        data-plasmic-override={
                                          overrides.numberAndChart
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.numberAndChart
                                        )}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"numberAndBadge"}
                                          data-plasmic-override={
                                            overrides.numberAndBadge
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.numberAndBadge
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"number"}
                                            data-plasmic-override={
                                              overrides.number
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.number
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    Math.round(
                                                      $queries.rtxDispo.data
                                                        .map(x =>
                                                          Number(x.total_hours)
                                                        )
                                                        .reduce(
                                                          (acc, curr) =>
                                                            acc + curr,
                                                          0
                                                        ) * 100
                                                    ) /
                                                      100 +
                                                    " h"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "2,420 h";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <Stack__
                                            as={"div"}
                                            data-plasmic-name={
                                              "frame1437254335"
                                            }
                                            data-plasmic-override={
                                              overrides.frame1437254335
                                            }
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.frame1437254335
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"number2"}
                                              data-plasmic-override={
                                                overrides.number2
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.number2
                                              )}
                                            >
                                              {"soit en euros"}
                                            </div>
                                            <div
                                              data-plasmic-name={"number3"}
                                              data-plasmic-override={
                                                overrides.number3
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.number3
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      Math.round(
                                                        $queries.rtxDispo.data
                                                          .map(x =>
                                                            Number(
                                                              x.total_price
                                                            )
                                                          )
                                                          .reduce(
                                                            (acc, curr) =>
                                                              acc + curr,
                                                            0
                                                          ) * 100
                                                      ) /
                                                        100 +
                                                      " \u20AC"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "20 420 \u20ac";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </Stack__>
                                        </Stack__>
                                      </Stack__>
                                    </Stack__>
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.subGroupsDispo;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <div
                                            data-plasmic-name={"subgroups"}
                                            data-plasmic-override={
                                              overrides.subgroups
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.subgroups
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__qI9Gs
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return ($state.subGroupsDispo[
                                                              currentIndex
                                                            ].visible =
                                                              !$state
                                                                .subGroupsDispo[
                                                                currentIndex
                                                              ].visible);
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__pWdr
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.label;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              {(() => {
                                                try {
                                                  return !currentItem.visible;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronDownIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__xNqMm
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                              {(() => {
                                                try {
                                                  return currentItem.visible;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronDownIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__q9417
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                            {(() => {
                                              try {
                                                return currentItem.visible;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"service"}
                                                data-plasmic-override={
                                                  overrides.service
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.service
                                                )}
                                              >
                                                <DataGrid
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.dataGrid__ix7Bl
                                                  )}
                                                  columnLabels={{
                                                    total_price:
                                                      "Budget (k\u20ac)",
                                                    total_hours:
                                                      "Heures Dispositif",
                                                    main_mission:
                                                      "Mission principale",
                                                    function:
                                                      "Type d\u2019agent",
                                                    service_type: "Service",
                                                    company: "Soci\u00e9t\u00e9"
                                                  }}
                                                  currentPage={1}
                                                  emptyStateMessage={
                                                    "Aucune donnée disponible"
                                                  }
                                                  enableColumnReordering={true}
                                                  enableExport={false}
                                                  enablePrint={false}
                                                  exportFormats={"excel"}
                                                  groupBy={(() => {
                                                    try {
                                                      return currentIndex == 0
                                                        ? "main_mission"
                                                        : currentIndex == 1
                                                        ? "company"
                                                        : currentIndex == 2
                                                        ? "function"
                                                        : currentIndex == 3
                                                        ? "service_type"
                                                        : null;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  monetaryColumns={["budget"]}
                                                  numericColumns={(() => {
                                                    try {
                                                      return [
                                                        "total_hours",
                                                        "total_price"
                                                      ];
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return ["budget"];
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  onDeleteClick={async taskId => {
                                                    const $steps = {};

                                                    $steps[
                                                      "updateDeleteRetex2"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "deleteRetex2"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: true
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateDeleteRetex2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateDeleteRetex2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateDeleteRetex2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateDeleteRetex2"
                                                      ] = await $steps[
                                                        "updateDeleteRetex2"
                                                      ];
                                                    }

                                                    $steps["updateRetexId"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "retexId"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: taskId
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["updateRetexId"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "updateRetexId"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateRetexId"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["updateRetexId"] =
                                                        await $steps[
                                                          "updateRetexId"
                                                        ];
                                                    }
                                                  }}
                                                  onEditClick={async taskId => {
                                                    const $steps = {};

                                                    $steps["updateEditRetex"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "editRetex"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: true
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateEditRetex"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateEditRetex"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateEditRetex"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateEditRetex"
                                                      ] = await $steps[
                                                        "updateEditRetex"
                                                      ];
                                                    }

                                                    $steps["updateRetexId"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "retexId"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: taskId
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["updateRetexId"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "updateRetexId"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateRetexId"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["updateRetexId"] =
                                                        await $steps[
                                                          "updateRetexId"
                                                        ];
                                                    }
                                                  }}
                                                  pageSize={10}
                                                  pdfTitle={"Sitex - Commande"}
                                                  responsive={{
                                                    minWidth: "100%",
                                                    horizontalOverflow: "auto",
                                                    verticalOverflow: "auto",
                                                    stickyHeader: true,
                                                    compactOnMobile: true,
                                                    breakpoint: 768
                                                  }}
                                                  showActions={false}
                                                  tasks={(() => {
                                                    try {
                                                      return $state.header
                                                        .operationId !==
                                                        undefined &&
                                                        $state.header
                                                          .operationId !== 0
                                                        ? $queries.rtxDispo.data.filter(
                                                            x =>
                                                              x.associated_operation ==
                                                              Number(
                                                                $state.header
                                                                  .operationId
                                                              )
                                                          )
                                                        : $queries.rtxDispo
                                                            .data;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  theme={(() => {
                                                    const __composite = {
                                                      headerBgColor: "#ECE6DF",
                                                      rowBgColor: "#ffffff",
                                                      hoverBgColor: "#f9f5ff",
                                                      borderColor: "#d9cdbf",
                                                      textColor: "#333333",
                                                      fontSize: "14px",
                                                      dragHandleColor: null
                                                    };
                                                    __composite[
                                                      "dragHandleColor"
                                                    ] = "#333333";
                                                    return __composite;
                                                  })()}
                                                  visibleColumns={(() => {
                                                    try {
                                                      return currentIndex == 0
                                                        ? [
                                                            "main_mission",
                                                            "total_hours",
                                                            "total_price"
                                                          ]
                                                        : currentIndex == 1
                                                        ? [
                                                            "company",
                                                            "total_hours",
                                                            "total_price"
                                                          ]
                                                        : currentIndex == 2
                                                        ? [
                                                            "function",
                                                            "total_hours",
                                                            "total_price"
                                                          ]
                                                        : currentIndex == 3
                                                        ? [
                                                            "service_type",
                                                            "total_hours",
                                                            "total_price"
                                                          ]
                                                        : [
                                                            "id",
                                                            "main_mission",
                                                            "function",
                                                            "service_type",
                                                            "company",
                                                            "total_hours",
                                                            "total_price"
                                                          ];
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </Stack__>
                                            ) : null}
                                          </div>
                                        );
                                      }
                                    )}
                                  </Stack__>
                                </TabContent>
                                <TabContent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabContent__bPUj5
                                  )}
                                  tabKey={"tab2"}
                                >
                                  <TabContent
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabContent__kOtqw
                                    )}
                                    tabKey={"tab3"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__om7L
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lxLbM
                                        )}
                                      >
                                        {"Some content for tab 2"}
                                      </div>
                                    </div>
                                  </TabContent>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___87Adf
                                    )}
                                  >
                                    <BarChartMultiple
                                      data={(() => {
                                        try {
                                          return (() => {
                                            const dominantes =
                                              $queries.retexOperationStats.data
                                                .response.dominantes;
                                            const colors = [
                                              "#D6BBFB",
                                              "#6941C6",
                                              "#9E77ED"
                                            ];

                                            const items = [
                                              {
                                                label: "Dominantes",
                                                ...Object.fromEntries(
                                                  dominantes.map(d => [
                                                    d.label,
                                                    d.count
                                                  ])
                                                )
                                              }
                                            ];
                                            const datasets = dominantes.map(
                                              (d, index) => ({
                                                key: d.label,
                                                label: d.label,
                                                color:
                                                  colors[index % colors.length]
                                              })
                                            );
                                            return {
                                              xAxisKey: "label",
                                              datasets,
                                              items
                                            };
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              xAxisKey: "month",
                                              datasets: [
                                                {
                                                  key: "desktop",
                                                  label: "Desktop",
                                                  color: "#6366F1"
                                                },
                                                {
                                                  key: "mobile",
                                                  label: "Mobile",
                                                  color: "#22C55E"
                                                }
                                              ],
                                              items: [
                                                {
                                                  month: "January",
                                                  desktop: 186,
                                                  mobile: 80
                                                },
                                                {
                                                  month: "February",
                                                  desktop: 305,
                                                  mobile: 200
                                                },
                                                {
                                                  month: "March",
                                                  desktop: 237,
                                                  mobile: 120
                                                },
                                                {
                                                  month: "April",
                                                  desktop: 73,
                                                  mobile: 190
                                                },
                                                {
                                                  month: "May",
                                                  desktop: 209,
                                                  mobile: 130
                                                },
                                                {
                                                  month: "June",
                                                  desktop: 214,
                                                  mobile: 140
                                                }
                                              ]
                                            };
                                          }
                                          throw e;
                                        }
                                      })()}
                                      description={``}
                                      height={236}
                                      title={"R\u00e9partition dominantes"}
                                      width={600}
                                    />

                                    <BarChartMultiple
                                      data={(() => {
                                        try {
                                          return (() => {
                                            function formatForChart(dataArray) {
                                              const colors = [
                                                "#D6BBFB",
                                                "#6941C6",
                                                "#9E77ED"
                                              ];

                                              const items = [
                                                {
                                                  label: "Précisions",
                                                  ...Object.fromEntries(
                                                    dataArray.map(d => [
                                                      d.label,
                                                      d.count
                                                    ])
                                                  )
                                                }
                                              ];
                                              const datasets = dataArray.map(
                                                (d, i) => ({
                                                  key: d.label,
                                                  label: d.label,
                                                  color:
                                                    colors[i % colors.length]
                                                })
                                              );
                                              return {
                                                xAxisKey: "label",
                                                datasets,
                                                items
                                              };
                                            }
                                            const dominantesChartData =
                                              formatForChart(
                                                $queries.retexOperationStats
                                                  .data.response.dominantes
                                              );
                                            const precisionsChartData =
                                              formatForChart(
                                                $queries.retexOperationStats
                                                  .data.response.precisions
                                              );
                                            return precisionsChartData;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              xAxisKey: "month",
                                              datasets: [
                                                {
                                                  key: "desktop",
                                                  label: "Desktop",
                                                  color: "#6366F1"
                                                },
                                                {
                                                  key: "mobile",
                                                  label: "Mobile",
                                                  color: "#22C55E"
                                                }
                                              ],
                                              items: [
                                                {
                                                  month: "January",
                                                  desktop: 186,
                                                  mobile: 80
                                                },
                                                {
                                                  month: "February",
                                                  desktop: 305,
                                                  mobile: 200
                                                },
                                                {
                                                  month: "March",
                                                  desktop: 237,
                                                  mobile: 120
                                                },
                                                {
                                                  month: "April",
                                                  desktop: 73,
                                                  mobile: 190
                                                },
                                                {
                                                  month: "May",
                                                  desktop: 209,
                                                  mobile: 130
                                                },
                                                {
                                                  month: "June",
                                                  desktop: 214,
                                                  mobile: 140
                                                }
                                              ]
                                            };
                                          }
                                          throw e;
                                        }
                                      })()}
                                      description={``}
                                      height={236}
                                      title={"R\u00e9partition pr\u00e9cisions"}
                                      width={600}
                                    />

                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"metricItem4"}
                                      data-plasmic-override={
                                        overrides.metricItem4
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.metricItem4
                                      )}
                                    >
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={
                                          "headingAndDropdown4"
                                        }
                                        data-plasmic-override={
                                          overrides.headingAndDropdown4
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.headingAndDropdown4
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"heading4"}
                                          data-plasmic-override={
                                            overrides.heading4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.heading4
                                          )}
                                        >
                                          {"Total \u00e9victions"}
                                        </div>
                                      </Stack__>
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"numberAndChart4"}
                                        data-plasmic-override={
                                          overrides.numberAndChart4
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.numberAndChart4
                                        )}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"numberAndBadge4"}
                                          data-plasmic-override={
                                            overrides.numberAndBadge4
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.numberAndBadge4
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"number4"}
                                            data-plasmic-override={
                                              overrides.number4
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.number4
                                            )}
                                          >
                                            {""}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___5YRlw
                                            )}
                                          >
                                            {"4"}
                                          </div>
                                        </Stack__>
                                      </Stack__>
                                    </Stack__>
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"service2"}
                                    data-plasmic-override={overrides.service2}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.service2
                                    )}
                                  >
                                    <DataGrid
                                      className={classNames(
                                        "__wab_instance",
                                        sty.dataGrid__dmZqw
                                      )}
                                      columnLabels={{ count: "Nombre" }}
                                      currentPage={1}
                                      emptyStateMessage={
                                        "Aucune donnée disponible"
                                      }
                                      enableColumnReordering={true}
                                      enableExport={false}
                                      enablePrint={false}
                                      exportFormats={"excel"}
                                      monetaryColumns={["budget"]}
                                      numericColumns={(() => {
                                        try {
                                          return ["count"];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return ["budget"];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onDeleteClick={async taskId => {
                                        const $steps = {};

                                        $steps["updateDeleteRetex2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["deleteRetex2"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDeleteRetex2"] !=
                                            null &&
                                          typeof $steps[
                                            "updateDeleteRetex2"
                                          ] === "object" &&
                                          typeof $steps["updateDeleteRetex2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateDeleteRetex2"] =
                                            await $steps["updateDeleteRetex2"];
                                        }

                                        $steps["updateRetexId"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["retexId"]
                                                },
                                                operation: 0,
                                                value: taskId
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateRetexId"] != null &&
                                          typeof $steps["updateRetexId"] ===
                                            "object" &&
                                          typeof $steps["updateRetexId"]
                                            .then === "function"
                                        ) {
                                          $steps["updateRetexId"] =
                                            await $steps["updateRetexId"];
                                        }
                                      }}
                                      onEditClick={async taskId => {
                                        const $steps = {};

                                        $steps["updateEditRetex"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["editRetex"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateEditRetex"] != null &&
                                          typeof $steps["updateEditRetex"] ===
                                            "object" &&
                                          typeof $steps["updateEditRetex"]
                                            .then === "function"
                                        ) {
                                          $steps["updateEditRetex"] =
                                            await $steps["updateEditRetex"];
                                        }

                                        $steps["updateRetexId"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["retexId"]
                                                },
                                                operation: 0,
                                                value: taskId
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateRetexId"] != null &&
                                          typeof $steps["updateRetexId"] ===
                                            "object" &&
                                          typeof $steps["updateRetexId"]
                                            .then === "function"
                                        ) {
                                          $steps["updateRetexId"] =
                                            await $steps["updateRetexId"];
                                        }
                                      }}
                                      pageSize={10}
                                      pdfTitle={"Sitex - Commande"}
                                      responsive={{
                                        minWidth: "100%",
                                        horizontalOverflow: "auto",
                                        verticalOverflow: "auto",
                                        stickyHeader: true,
                                        compactOnMobile: true,
                                        breakpoint: 768
                                      }}
                                      showActions={false}
                                      tasks={(() => {
                                        try {
                                          return $queries.retexOperationStats
                                            .data.response.precisions;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      theme={{
                                        headerBgColor: "#ECE6DF",
                                        rowBgColor: "#ffffff",
                                        hoverBgColor: "#f9f5ff",
                                        borderColor: "#d9cdbf",
                                        textColor: "#333333",
                                        fontSize: "14px",
                                        dragHandleColor: "#6B21A8"
                                      }}
                                    />
                                  </Stack__>
                                </TabContent>
                                <TabContent
                                  data-plasmic-name={"faitsMarquant"}
                                  data-plasmic-override={
                                    overrides.faitsMarquant
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.faitsMarquant
                                  )}
                                  tabKey={"tab3"}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oDz23
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.subGroupsSpecial;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <div
                                            data-plasmic-name={"subgroups2"}
                                            data-plasmic-override={
                                              overrides.subgroups2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.subgroups2
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__v9SMx
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return ($state.subGroupsSpecial[
                                                              currentIndex
                                                            ].visible =
                                                              !$state
                                                                .subGroupsSpecial[
                                                                currentIndex
                                                              ].visible);
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___6Uamf
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.label;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              {(() => {
                                                try {
                                                  return !currentItem.visible;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronDownIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__p9GGl
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                              {(() => {
                                                try {
                                                  return currentItem.visible;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <ChevronDownIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__h98G7
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                            {(() => {
                                              try {
                                                return currentItem.visible;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"service3"}
                                                data-plasmic-override={
                                                  overrides.service3
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.service3
                                                )}
                                              >
                                                <Kanban
                                                  data-plasmic-name={"kanban"}
                                                  data-plasmic-override={
                                                    overrides.kanban
                                                  }
                                                  cardMaxWidth={"320px"}
                                                  cardMinHeight={"auto"}
                                                  cardMinWidth={"280px"}
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.kanban
                                                  )}
                                                  columnGap={"16px"}
                                                  columnMaxWidth={"320px"}
                                                  columnMinWidth={"280px"}
                                                  containerHeight={"auto"}
                                                  containerMaxWidth={"100%"}
                                                  containerWidth={"100%"}
                                                  groupBy={(() => {
                                                    try {
                                                      return currentIndex == 0
                                                        ? "particular"
                                                        : "priority";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "precisions";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  headerStyle={{
                                                    backgroundColor:
                                                      "transparent",
                                                    textColor: "#2D3748",
                                                    borderRadius:
                                                      "0.5rem 0.5rem 0 0",
                                                    textAlign: "left",
                                                    fontSize: "14px",
                                                    fontWeight: "600",
                                                    padding: "1rem",
                                                    fontFamily: "Manrope",
                                                    uppercase: false
                                                  }}
                                                  minHeight={"500px"}
                                                  scrollBehavior={"overflow"}
                                                  showFilters={false}
                                                  sortBy={"date_start"}
                                                  sortDirection={"asc"}
                                                  taskColors={{
                                                    backgroundColor: "#ffffff",
                                                    textColor: "#131013",
                                                    borderColor: "#E2E8F0"
                                                  }}
                                                  tasks={(() => {
                                                    try {
                                                      return (() => {
                                                        const rawData =
                                                          $queries
                                                            .rtxTasksSpecial
                                                            .data;
                                                        const filtData =
                                                          $state.header
                                                            .operationId !==
                                                            undefined &&
                                                          $state.header
                                                            .operationId !== 0
                                                            ? rawData.filter(
                                                                o =>
                                                                  o.associated_operation ==
                                                                  Number(
                                                                    $state
                                                                      .header
                                                                      .operationId
                                                                  )
                                                              )
                                                            : rawData;
                                                        return currentIndex == 0
                                                          ? filtData.filter(
                                                              x =>
                                                                x.particular ==
                                                                true
                                                            )
                                                          : filtData.filter(
                                                              x =>
                                                                x.priority ===
                                                                  "5: Crise" ||
                                                                x.priority ===
                                                                  "4: Fort"
                                                            );
                                                      })();
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </Stack__>
                                            ) : null}
                                          </div>
                                        );
                                      }
                                    )}
                                  </Stack__>
                                </TabContent>
                              </div>
                            </Stack__>
                          )}
                        </DataCtxReader__>
                      </TabsContainer>
                    </Stack__>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </div>
          <BottomMenu
            data-plasmic-name={"bottomMenu"}
            data-plasmic-override={overrides.bottomMenu}
            className={classNames("__wab_instance", sty.bottomMenu)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "deleteRetex",
    "frame1437254018",
    "name7",
    "frame1437254021",
    "form3",
    "content3",
    "titre3",
    "texinput23",
    "date3",
    "label8",
    "timePicker9",
    "type3",
    "budget3",
    "comments3",
    "input9",
    "name6",
    "datePickerWeb3",
    "inputSelect3",
    "signedByBaseFieldGroupSmall3",
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5",
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53",
    "inputElementSelect3",
    "signedByBaseInputElementSelectMediumSingleDefaultActive3",
    "selectFrame3",
    "leadingArtworkContainer11",
    "leadingArtwork6",
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54",
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64",
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55",
    "trailingArtworkContainer11",
    "trailingArtwork11",
    "selectIndicatorContainer6",
    "chevronIcon6",
    "menu3",
    "signedByBaseMenuListMedium3",
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60",
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25",
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3",
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28",
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30",
    "scrollBar3",
    "model3",
    "buttons3",
    "button9",
    "frame1073713926",
    "frame1073713932",
    "button10",
    "button11",
    "button12",
    "editRetex2",
    "frame1437254017",
    "name3",
    "frame1437254020",
    "form2",
    "textArea2",
    "select3",
    "content2",
    "titre2",
    "texinput22",
    "date2",
    "label7",
    "timePicker2",
    "type2",
    "budget2",
    "comments2",
    "input6",
    "name4",
    "datePickerWeb2",
    "inputSelect2",
    "signedByBaseFieldGroupSmall2",
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3",
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30",
    "inputElementSelect2",
    "signedByBaseInputElementSelectMediumSingleDefaultActive2",
    "selectFrame2",
    "leadingArtworkContainer7",
    "leadingArtwork4",
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27",
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39",
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31",
    "trailingArtworkContainer7",
    "trailingArtwork7",
    "selectIndicatorContainer4",
    "chevronIcon4",
    "menu2",
    "signedByBaseMenuListMedium2",
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36",
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15",
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2",
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18",
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20",
    "scrollBar2",
    "model2",
    "buttons2",
    "button5",
    "frame1073713925",
    "frame1073713931",
    "button6",
    "button7",
    "button8",
    "newRetex2",
    "frame1437254016",
    "name",
    "frame1437254019",
    "form",
    "textArea",
    "select2",
    "content",
    "titre",
    "texinput2",
    "date",
    "label6",
    "timePicker",
    "type",
    "budget",
    "comments",
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar",
    "model",
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4",
    "accueilDashboard",
    "leftMenu",
    "main",
    "header",
    "frame1437253918",
    "filters2",
    "buttonFilter2",
    "buttonAdd2",
    "retexMenu",
    "buttonBase",
    "text",
    "subTabs",
    "metricItem",
    "headingAndDropdown",
    "heading",
    "numberAndChart",
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3",
    "subgroups",
    "service",
    "metricItem4",
    "headingAndDropdown4",
    "heading4",
    "numberAndChart4",
    "numberAndBadge4",
    "number4",
    "service2",
    "faitsMarquant",
    "subgroups2",
    "service3",
    "kanban",
    "bottomMenu"
  ],
  deleteRetex: [
    "deleteRetex",
    "frame1437254018",
    "name7",
    "frame1437254021",
    "form3",
    "content3",
    "titre3",
    "texinput23",
    "date3",
    "label8",
    "timePicker9",
    "type3",
    "budget3",
    "comments3",
    "input9",
    "name6",
    "datePickerWeb3",
    "inputSelect3",
    "signedByBaseFieldGroupSmall3",
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5",
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53",
    "inputElementSelect3",
    "signedByBaseInputElementSelectMediumSingleDefaultActive3",
    "selectFrame3",
    "leadingArtworkContainer11",
    "leadingArtwork6",
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54",
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64",
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55",
    "trailingArtworkContainer11",
    "trailingArtwork11",
    "selectIndicatorContainer6",
    "chevronIcon6",
    "menu3",
    "signedByBaseMenuListMedium3",
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60",
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25",
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3",
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28",
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30",
    "scrollBar3",
    "model3",
    "buttons3",
    "button9",
    "frame1073713926",
    "frame1073713932",
    "button10",
    "button11",
    "button12"
  ],
  frame1437254018: ["frame1437254018", "name7", "frame1437254021"],
  name7: ["name7"],
  frame1437254021: ["frame1437254021"],
  form3: ["form3"],
  content3: [
    "content3",
    "titre3",
    "texinput23",
    "date3",
    "label8",
    "timePicker9",
    "type3",
    "budget3",
    "comments3",
    "input9",
    "name6",
    "datePickerWeb3",
    "inputSelect3",
    "signedByBaseFieldGroupSmall3",
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5",
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53",
    "inputElementSelect3",
    "signedByBaseInputElementSelectMediumSingleDefaultActive3",
    "selectFrame3",
    "leadingArtworkContainer11",
    "leadingArtwork6",
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54",
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64",
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55",
    "trailingArtworkContainer11",
    "trailingArtwork11",
    "selectIndicatorContainer6",
    "chevronIcon6",
    "menu3",
    "signedByBaseMenuListMedium3",
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60",
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25",
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3",
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28",
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30",
    "scrollBar3",
    "model3",
    "buttons3",
    "button9",
    "frame1073713926",
    "frame1073713932",
    "button10",
    "button11",
    "button12"
  ],
  titre3: ["titre3"],
  texinput23: ["texinput23"],
  date3: ["date3", "label8", "timePicker9"],
  label8: ["label8"],
  timePicker9: ["timePicker9"],
  type3: ["type3"],
  budget3: ["budget3"],
  comments3: ["comments3"],
  input9: [
    "input9",
    "name6",
    "datePickerWeb3",
    "inputSelect3",
    "signedByBaseFieldGroupSmall3",
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5",
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53",
    "inputElementSelect3",
    "signedByBaseInputElementSelectMediumSingleDefaultActive3",
    "selectFrame3",
    "leadingArtworkContainer11",
    "leadingArtwork6",
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54",
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64",
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55",
    "trailingArtworkContainer11",
    "trailingArtwork11",
    "selectIndicatorContainer6",
    "chevronIcon6",
    "menu3",
    "signedByBaseMenuListMedium3",
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60",
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25",
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3",
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28",
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30",
    "scrollBar3"
  ],
  name6: ["name6"],
  datePickerWeb3: [
    "datePickerWeb3",
    "inputSelect3",
    "signedByBaseFieldGroupSmall3",
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5",
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53"
  ],
  inputSelect3: [
    "inputSelect3",
    "signedByBaseFieldGroupSmall3",
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5",
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53"
  ],
  signedByBaseFieldGroupSmall3: ["signedByBaseFieldGroupSmall3"],
  endDateCalendar3: [
    "endDateCalendar3",
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9",
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5"
  ],
  inputElementTextField5: [
    "inputElementTextField5",
    "signedByBaseInputElementTextFieldSmallEnabled3",
    "leadingArtworkContainer9",
    "leadingArtwork5",
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49",
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56",
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50",
    "trailingArtworkContainer9",
    "trailingArtwork9"
  ],
  signedByBaseInputElementTextFieldSmallEnabled3: [
    "signedByBaseInputElementTextFieldSmallEnabled3"
  ],
  leadingArtworkContainer9: ["leadingArtworkContainer9", "leadingArtwork5"],
  leadingArtwork5: ["leadingArtwork5"],
  leadingLabelContainer9: [
    "leadingLabelContainer9",
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49"
  ],
  leadingLabel9: [
    "leadingLabel9",
    "signedByBaseTypographyLabelSmall5",
    "text55",
    "spacer49"
  ],
  signedByBaseTypographyLabelSmall5: ["signedByBaseTypographyLabelSmall5"],
  text55: ["text55"],
  spacer49: ["spacer49"],
  inputElementContentText9: [
    "inputElementContentText9",
    "signedByBaseInputElementContentTextSmallOff3",
    "text56"
  ],
  signedByBaseInputElementContentTextSmallOff3: [
    "signedByBaseInputElementContentTextSmallOff3"
  ],
  text56: ["text56"],
  trailingLabelEnhancer9: [
    "trailingLabelEnhancer9",
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50"
  ],
  trailingLabel9: [
    "trailingLabel9",
    "signedByBaseTypographyLabelSmall6",
    "text57",
    "spacer50"
  ],
  signedByBaseTypographyLabelSmall6: ["signedByBaseTypographyLabelSmall6"],
  text57: ["text57"],
  spacer50: ["spacer50"],
  trailingArtworkContainer9: ["trailingArtworkContainer9", "trailingArtwork9"],
  trailingArtwork9: ["trailingArtwork9"],
  calendar3: [
    "calendar3",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3",
    "leadingArtworkContainer10",
    "text58",
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51",
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60",
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52",
    "trailingArtworkContainer10",
    "trailingArtwork10",
    "selectIndicatorContainer5",
    "chevronIcon5"
  ],
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3: [
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3"
  ],
  leadingArtworkContainer10: ["leadingArtworkContainer10", "text58"],
  text58: ["text58"],
  leadingLabelContainer10: [
    "leadingLabelContainer10",
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51"
  ],
  leadingLabel10: [
    "leadingLabel10",
    "signedByBaseTypographyLabelXSmall5",
    "text59",
    "spacer51"
  ],
  signedByBaseTypographyLabelXSmall5: ["signedByBaseTypographyLabelXSmall5"],
  text59: ["text59"],
  spacer51: ["spacer51"],
  inputElementContentText10: [
    "inputElementContentText10",
    "signedByBaseInputElementContentTextXSmallWebOff3",
    "text60"
  ],
  signedByBaseInputElementContentTextXSmallWebOff3: [
    "signedByBaseInputElementContentTextXSmallWebOff3"
  ],
  text60: ["text60"],
  trailingLabelEnhancer10: [
    "trailingLabelEnhancer10",
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52"
  ],
  trailingLabel10: [
    "trailingLabel10",
    "signedByBaseTypographyLabelXSmall6",
    "text61",
    "spacer52"
  ],
  signedByBaseTypographyLabelXSmall6: ["signedByBaseTypographyLabelXSmall6"],
  text61: ["text61"],
  spacer52: ["spacer52"],
  trailingArtworkContainer10: [
    "trailingArtworkContainer10",
    "trailingArtwork10"
  ],
  trailingArtwork10: ["trailingArtwork10"],
  selectIndicatorContainer5: ["selectIndicatorContainer5", "chevronIcon5"],
  chevronIcon5: ["chevronIcon5"],
  inputElementHint5: [
    "inputElementHint5",
    "heart21",
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53"
  ],
  heart21: ["heart21"],
  hint5: [
    "hint5",
    "signedByBaseTypographyParagraphSmall5",
    "text62",
    "spacer53"
  ],
  signedByBaseTypographyParagraphSmall5: [
    "signedByBaseTypographyParagraphSmall5"
  ],
  text62: ["text62"],
  spacer53: ["spacer53"],
  inputElementSelect3: [
    "inputElementSelect3",
    "signedByBaseInputElementSelectMediumSingleDefaultActive3",
    "selectFrame3",
    "leadingArtworkContainer11",
    "leadingArtwork6",
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54",
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64",
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55",
    "trailingArtworkContainer11",
    "trailingArtwork11",
    "selectIndicatorContainer6",
    "chevronIcon6",
    "menu3",
    "signedByBaseMenuListMedium3",
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60",
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25",
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3",
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28",
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30",
    "scrollBar3"
  ],
  signedByBaseInputElementSelectMediumSingleDefaultActive3: [
    "signedByBaseInputElementSelectMediumSingleDefaultActive3"
  ],
  selectFrame3: [
    "selectFrame3",
    "leadingArtworkContainer11",
    "leadingArtwork6",
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54",
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64",
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55",
    "trailingArtworkContainer11",
    "trailingArtwork11",
    "selectIndicatorContainer6",
    "chevronIcon6"
  ],
  leadingArtworkContainer11: ["leadingArtworkContainer11", "leadingArtwork6"],
  leadingArtwork6: ["leadingArtwork6"],
  leadingLabelContainer11: [
    "leadingLabelContainer11",
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54"
  ],
  leadingLabel11: [
    "leadingLabel11",
    "signedByBaseTypographyLabelMedium13",
    "text63",
    "spacer54"
  ],
  signedByBaseTypographyLabelMedium13: ["signedByBaseTypographyLabelMedium13"],
  text63: ["text63"],
  spacer54: ["spacer54"],
  inputElementContentText11: [
    "inputElementContentText11",
    "signedByBaseInputElementContentTextMediumOff5",
    "text64"
  ],
  signedByBaseInputElementContentTextMediumOff5: [
    "signedByBaseInputElementContentTextMediumOff5"
  ],
  text64: ["text64"],
  trailingLabelEnhancer11: [
    "trailingLabelEnhancer11",
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55"
  ],
  trailingLabel11: [
    "trailingLabel11",
    "signedByBaseTypographyLabelMedium14",
    "text65",
    "spacer55"
  ],
  signedByBaseTypographyLabelMedium14: ["signedByBaseTypographyLabelMedium14"],
  text65: ["text65"],
  spacer55: ["spacer55"],
  trailingArtworkContainer11: [
    "trailingArtworkContainer11",
    "trailingArtwork11"
  ],
  trailingArtwork11: ["trailingArtwork11"],
  selectIndicatorContainer6: ["selectIndicatorContainer6", "chevronIcon6"],
  chevronIcon6: ["chevronIcon6"],
  menu3: [
    "menu3",
    "signedByBaseMenuListMedium3",
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60",
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25",
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3",
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28",
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30",
    "scrollBar3"
  ],
  signedByBaseMenuListMedium3: ["signedByBaseMenuListMedium3"],
  menuItem11: [
    "menuItem11",
    "signedByBaseMenuItemSearchMediumNoneEnabled3",
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60"
  ],
  signedByBaseMenuItemSearchMediumNoneEnabled3: [
    "signedByBaseMenuItemSearchMediumNoneEnabled3"
  ],
  searchField3: [
    "searchField3",
    "signedByBaseSearchFieldMediumEnabled3",
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57",
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12",
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60"
  ],
  signedByBaseSearchFieldMediumEnabled3: [
    "signedByBaseSearchFieldMediumEnabled3"
  ],
  inputElementLabel3: [
    "inputElementLabel3",
    "signedByBaseInputElementLabelMedium3",
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56",
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57"
  ],
  signedByBaseInputElementLabelMedium3: [
    "signedByBaseInputElementLabelMedium3"
  ],
  typography29: [
    "typography29",
    "signedByBaseTypographyLabelMedium15",
    "text66",
    "spacer56"
  ],
  signedByBaseTypographyLabelMedium15: ["signedByBaseTypographyLabelMedium15"],
  text66: ["text66"],
  spacer56: ["spacer56"],
  characterCountFrame3: [
    "characterCountFrame3",
    "heart22",
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57"
  ],
  heart22: ["heart22"],
  typography30: [
    "typography30",
    "signedByBaseTypographyLabelMedium16",
    "text67",
    "spacer57"
  ],
  signedByBaseTypographyLabelMedium16: ["signedByBaseTypographyLabelMedium16"],
  text67: ["text67"],
  spacer57: ["spacer57"],
  inputElementTextField6: [
    "inputElementTextField6",
    "signedByBaseInputElementTextFieldMediumEnabled3",
    "leadingArtworkContainer12",
    "search3",
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58",
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69",
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59",
    "trailingArtworkContainer12",
    "trailingArtwork12"
  ],
  signedByBaseInputElementTextFieldMediumEnabled3: [
    "signedByBaseInputElementTextFieldMediumEnabled3"
  ],
  leadingArtworkContainer12: ["leadingArtworkContainer12", "search3"],
  search3: ["search3"],
  leadingLabelContainer12: [
    "leadingLabelContainer12",
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58"
  ],
  leadingLabel12: [
    "leadingLabel12",
    "signedByBaseTypographyLabelMedium17",
    "text68",
    "spacer58"
  ],
  signedByBaseTypographyLabelMedium17: ["signedByBaseTypographyLabelMedium17"],
  text68: ["text68"],
  spacer58: ["spacer58"],
  inputElementContentText12: [
    "inputElementContentText12",
    "signedByBaseInputElementContentTextMediumOff6",
    "text69"
  ],
  signedByBaseInputElementContentTextMediumOff6: [
    "signedByBaseInputElementContentTextMediumOff6"
  ],
  text69: ["text69"],
  trailingLabelEnhancer12: [
    "trailingLabelEnhancer12",
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59"
  ],
  trailingLabel12: [
    "trailingLabel12",
    "signedByBaseTypographyLabelMedium18",
    "text70",
    "spacer59"
  ],
  signedByBaseTypographyLabelMedium18: ["signedByBaseTypographyLabelMedium18"],
  text70: ["text70"],
  spacer59: ["spacer59"],
  trailingArtworkContainer12: [
    "trailingArtworkContainer12",
    "trailingArtwork12"
  ],
  trailingArtwork12: ["trailingArtwork12"],
  inputElementHint6: [
    "inputElementHint6",
    "heart23",
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60"
  ],
  heart23: ["heart23"],
  hint6: [
    "hint6",
    "signedByBaseTypographyParagraphSmall6",
    "text71",
    "spacer60"
  ],
  signedByBaseTypographyParagraphSmall6: [
    "signedByBaseTypographyParagraphSmall6"
  ],
  text71: ["text71"],
  spacer60: ["spacer60"],
  menuItem12: [
    "menuItem12",
    "signedByBaseMenuItemOptionMediumStandardEnabled9",
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9",
    "leadingEnhancer9",
    "heart24",
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63",
    "trailingEnhancer9",
    "heart25"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled9: [
    "signedByBaseMenuItemOptionMediumStandardEnabled9"
  ],
  menuItemControlMediumCheckboxUnchecked9: [
    "menuItemControlMediumCheckboxUnchecked9",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9",
    "icon9"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked9: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked9"
  ],
  icon9: ["icon9"],
  leadingEnhancer9: ["leadingEnhancer9", "heart24"],
  heart24: ["heart24"],
  textFrame9: [
    "textFrame9",
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62",
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63"
  ],
  leadingText9: [
    "leadingText9",
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61",
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62"
  ],
  typography31: [
    "typography31",
    "signedByBaseTypographyParagraphMedium25",
    "text72",
    "spacer61"
  ],
  signedByBaseTypographyParagraphMedium25: [
    "signedByBaseTypographyParagraphMedium25"
  ],
  text72: ["text72"],
  spacer61: ["spacer61"],
  typography32: [
    "typography32",
    "signedByBaseTypographyParagraphMedium26",
    "text73",
    "spacer62"
  ],
  signedByBaseTypographyParagraphMedium26: [
    "signedByBaseTypographyParagraphMedium26"
  ],
  text73: ["text73"],
  spacer62: ["spacer62"],
  typography33: [
    "typography33",
    "signedByBaseTypographyParagraphMedium27",
    "spacer63"
  ],
  signedByBaseTypographyParagraphMedium27: [
    "signedByBaseTypographyParagraphMedium27"
  ],
  spacer63: ["spacer63"],
  trailingEnhancer9: ["trailingEnhancer9", "heart25"],
  heart25: ["heart25"],
  menuItem13: [
    "menuItem13",
    "signedByBaseMenuItemOptionMediumStandardEnabled10",
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10",
    "leadingEnhancer10",
    "heart26",
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66",
    "trailingEnhancer10",
    "checkmarkSmall3"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled10: [
    "signedByBaseMenuItemOptionMediumStandardEnabled10"
  ],
  menuItemControlMediumCheckboxUnchecked10: [
    "menuItemControlMediumCheckboxUnchecked10",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10",
    "icon10"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked10: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked10"
  ],
  icon10: ["icon10"],
  leadingEnhancer10: ["leadingEnhancer10", "heart26"],
  heart26: ["heart26"],
  textFrame10: [
    "textFrame10",
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65",
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66"
  ],
  leadingText10: [
    "leadingText10",
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64",
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65"
  ],
  typography34: [
    "typography34",
    "signedByBaseTypographyParagraphMedium28",
    "text74",
    "spacer64"
  ],
  signedByBaseTypographyParagraphMedium28: [
    "signedByBaseTypographyParagraphMedium28"
  ],
  text74: ["text74"],
  spacer64: ["spacer64"],
  typography35: [
    "typography35",
    "signedByBaseTypographyParagraphMedium29",
    "text75",
    "spacer65"
  ],
  signedByBaseTypographyParagraphMedium29: [
    "signedByBaseTypographyParagraphMedium29"
  ],
  text75: ["text75"],
  spacer65: ["spacer65"],
  typography36: [
    "typography36",
    "signedByBaseTypographyParagraphMedium30",
    "spacer66"
  ],
  signedByBaseTypographyParagraphMedium30: [
    "signedByBaseTypographyParagraphMedium30"
  ],
  spacer66: ["spacer66"],
  trailingEnhancer10: ["trailingEnhancer10", "checkmarkSmall3"],
  checkmarkSmall3: ["checkmarkSmall3"],
  menuItem14: [
    "menuItem14",
    "signedByBaseMenuItemOptionMediumStandardEnabled11",
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11",
    "leadingEnhancer11",
    "heart27",
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69",
    "trailingEnhancer11",
    "heart28"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled11: [
    "signedByBaseMenuItemOptionMediumStandardEnabled11"
  ],
  menuItemControlMediumCheckboxUnchecked11: [
    "menuItemControlMediumCheckboxUnchecked11",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11",
    "icon11"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked11: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked11"
  ],
  icon11: ["icon11"],
  leadingEnhancer11: ["leadingEnhancer11", "heart27"],
  heart27: ["heart27"],
  textFrame11: [
    "textFrame11",
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68",
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69"
  ],
  leadingText11: [
    "leadingText11",
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67",
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68"
  ],
  typography37: [
    "typography37",
    "signedByBaseTypographyParagraphMedium31",
    "text76",
    "spacer67"
  ],
  signedByBaseTypographyParagraphMedium31: [
    "signedByBaseTypographyParagraphMedium31"
  ],
  text76: ["text76"],
  spacer67: ["spacer67"],
  typography38: [
    "typography38",
    "signedByBaseTypographyParagraphMedium32",
    "text77",
    "spacer68"
  ],
  signedByBaseTypographyParagraphMedium32: [
    "signedByBaseTypographyParagraphMedium32"
  ],
  text77: ["text77"],
  spacer68: ["spacer68"],
  typography39: [
    "typography39",
    "signedByBaseTypographyParagraphMedium33",
    "spacer69"
  ],
  signedByBaseTypographyParagraphMedium33: [
    "signedByBaseTypographyParagraphMedium33"
  ],
  spacer69: ["spacer69"],
  trailingEnhancer11: ["trailingEnhancer11", "heart28"],
  heart28: ["heart28"],
  menuItem15: [
    "menuItem15",
    "signedByBaseMenuItemOptionMediumStandardEnabled12",
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12",
    "leadingEnhancer12",
    "heart29",
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72",
    "trailingEnhancer12",
    "heart30"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled12: [
    "signedByBaseMenuItemOptionMediumStandardEnabled12"
  ],
  menuItemControlMediumCheckboxUnchecked12: [
    "menuItemControlMediumCheckboxUnchecked12",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12",
    "icon12"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked12: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked12"
  ],
  icon12: ["icon12"],
  leadingEnhancer12: ["leadingEnhancer12", "heart29"],
  heart29: ["heart29"],
  textFrame12: [
    "textFrame12",
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71",
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72"
  ],
  leadingText12: [
    "leadingText12",
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70",
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71"
  ],
  typography40: [
    "typography40",
    "signedByBaseTypographyParagraphMedium34",
    "text78",
    "spacer70"
  ],
  signedByBaseTypographyParagraphMedium34: [
    "signedByBaseTypographyParagraphMedium34"
  ],
  text78: ["text78"],
  spacer70: ["spacer70"],
  typography41: [
    "typography41",
    "signedByBaseTypographyParagraphMedium35",
    "text79",
    "spacer71"
  ],
  signedByBaseTypographyParagraphMedium35: [
    "signedByBaseTypographyParagraphMedium35"
  ],
  text79: ["text79"],
  spacer71: ["spacer71"],
  typography42: [
    "typography42",
    "signedByBaseTypographyParagraphMedium36",
    "spacer72"
  ],
  signedByBaseTypographyParagraphMedium36: [
    "signedByBaseTypographyParagraphMedium36"
  ],
  spacer72: ["spacer72"],
  trailingEnhancer12: ["trailingEnhancer12", "heart30"],
  heart30: ["heart30"],
  scrollBar3: ["scrollBar3"],
  model3: ["model3"],
  buttons3: [
    "buttons3",
    "button9",
    "frame1073713926",
    "frame1073713932",
    "button10",
    "button11",
    "button12"
  ],
  button9: ["button9"],
  frame1073713926: ["frame1073713926"],
  frame1073713932: ["frame1073713932", "button10", "button11", "button12"],
  button10: ["button10"],
  button11: ["button11"],
  button12: ["button12"],
  editRetex2: [
    "editRetex2",
    "frame1437254017",
    "name3",
    "frame1437254020",
    "form2",
    "textArea2",
    "select3",
    "content2",
    "titre2",
    "texinput22",
    "date2",
    "label7",
    "timePicker2",
    "type2",
    "budget2",
    "comments2",
    "input6",
    "name4",
    "datePickerWeb2",
    "inputSelect2",
    "signedByBaseFieldGroupSmall2",
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3",
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30",
    "inputElementSelect2",
    "signedByBaseInputElementSelectMediumSingleDefaultActive2",
    "selectFrame2",
    "leadingArtworkContainer7",
    "leadingArtwork4",
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27",
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39",
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31",
    "trailingArtworkContainer7",
    "trailingArtwork7",
    "selectIndicatorContainer4",
    "chevronIcon4",
    "menu2",
    "signedByBaseMenuListMedium2",
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36",
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15",
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2",
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18",
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20",
    "scrollBar2",
    "model2",
    "buttons2",
    "button5",
    "frame1073713925",
    "frame1073713931",
    "button6",
    "button7",
    "button8"
  ],
  frame1437254017: ["frame1437254017", "name3", "frame1437254020"],
  name3: ["name3"],
  frame1437254020: ["frame1437254020"],
  form2: ["form2", "textArea2", "select3"],
  textArea2: ["textArea2"],
  select3: ["select3"],
  content2: [
    "content2",
    "titre2",
    "texinput22",
    "date2",
    "label7",
    "timePicker2",
    "type2",
    "budget2",
    "comments2",
    "input6",
    "name4",
    "datePickerWeb2",
    "inputSelect2",
    "signedByBaseFieldGroupSmall2",
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3",
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30",
    "inputElementSelect2",
    "signedByBaseInputElementSelectMediumSingleDefaultActive2",
    "selectFrame2",
    "leadingArtworkContainer7",
    "leadingArtwork4",
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27",
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39",
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31",
    "trailingArtworkContainer7",
    "trailingArtwork7",
    "selectIndicatorContainer4",
    "chevronIcon4",
    "menu2",
    "signedByBaseMenuListMedium2",
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36",
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15",
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2",
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18",
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20",
    "scrollBar2",
    "model2",
    "buttons2",
    "button5",
    "frame1073713925",
    "frame1073713931",
    "button6",
    "button7",
    "button8"
  ],
  titre2: ["titre2"],
  texinput22: ["texinput22"],
  date2: ["date2", "label7", "timePicker2"],
  label7: ["label7"],
  timePicker2: ["timePicker2"],
  type2: ["type2"],
  budget2: ["budget2"],
  comments2: ["comments2"],
  input6: [
    "input6",
    "name4",
    "datePickerWeb2",
    "inputSelect2",
    "signedByBaseFieldGroupSmall2",
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3",
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30",
    "inputElementSelect2",
    "signedByBaseInputElementSelectMediumSingleDefaultActive2",
    "selectFrame2",
    "leadingArtworkContainer7",
    "leadingArtwork4",
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27",
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39",
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31",
    "trailingArtworkContainer7",
    "trailingArtwork7",
    "selectIndicatorContainer4",
    "chevronIcon4",
    "menu2",
    "signedByBaseMenuListMedium2",
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36",
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15",
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2",
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18",
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20",
    "scrollBar2"
  ],
  name4: ["name4"],
  datePickerWeb2: [
    "datePickerWeb2",
    "inputSelect2",
    "signedByBaseFieldGroupSmall2",
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3",
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30"
  ],
  inputSelect2: [
    "inputSelect2",
    "signedByBaseFieldGroupSmall2",
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3",
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30"
  ],
  signedByBaseFieldGroupSmall2: ["signedByBaseFieldGroupSmall2"],
  endDateCalendar2: [
    "endDateCalendar2",
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5",
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3"
  ],
  inputElementTextField3: [
    "inputElementTextField3",
    "signedByBaseInputElementTextFieldSmallEnabled2",
    "leadingArtworkContainer5",
    "leadingArtwork3",
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23",
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31",
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24",
    "trailingArtworkContainer5",
    "trailingArtwork5"
  ],
  signedByBaseInputElementTextFieldSmallEnabled2: [
    "signedByBaseInputElementTextFieldSmallEnabled2"
  ],
  leadingArtworkContainer5: ["leadingArtworkContainer5", "leadingArtwork3"],
  leadingArtwork3: ["leadingArtwork3"],
  leadingLabelContainer5: [
    "leadingLabelContainer5",
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23"
  ],
  leadingLabel5: [
    "leadingLabel5",
    "signedByBaseTypographyLabelSmall3",
    "text30",
    "spacer23"
  ],
  signedByBaseTypographyLabelSmall3: ["signedByBaseTypographyLabelSmall3"],
  text30: ["text30"],
  spacer23: ["spacer23"],
  inputElementContentText5: [
    "inputElementContentText5",
    "signedByBaseInputElementContentTextSmallOff2",
    "text31"
  ],
  signedByBaseInputElementContentTextSmallOff2: [
    "signedByBaseInputElementContentTextSmallOff2"
  ],
  text31: ["text31"],
  trailingLabelEnhancer5: [
    "trailingLabelEnhancer5",
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24"
  ],
  trailingLabel5: [
    "trailingLabel5",
    "signedByBaseTypographyLabelSmall4",
    "text32",
    "spacer24"
  ],
  signedByBaseTypographyLabelSmall4: ["signedByBaseTypographyLabelSmall4"],
  text32: ["text32"],
  spacer24: ["spacer24"],
  trailingArtworkContainer5: ["trailingArtworkContainer5", "trailingArtwork5"],
  trailingArtwork5: ["trailingArtwork5"],
  calendar2: [
    "calendar2",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2",
    "leadingArtworkContainer6",
    "text33",
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25",
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35",
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26",
    "trailingArtworkContainer6",
    "trailingArtwork6",
    "selectIndicatorContainer3",
    "chevronIcon3"
  ],
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2: [
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2"
  ],
  leadingArtworkContainer6: ["leadingArtworkContainer6", "text33"],
  text33: ["text33"],
  leadingLabelContainer6: [
    "leadingLabelContainer6",
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25"
  ],
  leadingLabel6: [
    "leadingLabel6",
    "signedByBaseTypographyLabelXSmall3",
    "text34",
    "spacer25"
  ],
  signedByBaseTypographyLabelXSmall3: ["signedByBaseTypographyLabelXSmall3"],
  text34: ["text34"],
  spacer25: ["spacer25"],
  inputElementContentText6: [
    "inputElementContentText6",
    "signedByBaseInputElementContentTextXSmallWebOff2",
    "text35"
  ],
  signedByBaseInputElementContentTextXSmallWebOff2: [
    "signedByBaseInputElementContentTextXSmallWebOff2"
  ],
  text35: ["text35"],
  trailingLabelEnhancer6: [
    "trailingLabelEnhancer6",
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26"
  ],
  trailingLabel6: [
    "trailingLabel6",
    "signedByBaseTypographyLabelXSmall4",
    "text36",
    "spacer26"
  ],
  signedByBaseTypographyLabelXSmall4: ["signedByBaseTypographyLabelXSmall4"],
  text36: ["text36"],
  spacer26: ["spacer26"],
  trailingArtworkContainer6: ["trailingArtworkContainer6", "trailingArtwork6"],
  trailingArtwork6: ["trailingArtwork6"],
  selectIndicatorContainer3: ["selectIndicatorContainer3", "chevronIcon3"],
  chevronIcon3: ["chevronIcon3"],
  inputElementHint3: [
    "inputElementHint3",
    "heart11",
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30"
  ],
  heart11: ["heart11"],
  hint3: [
    "hint3",
    "signedByBaseTypographyParagraphSmall3",
    "text37",
    "spacer30"
  ],
  signedByBaseTypographyParagraphSmall3: [
    "signedByBaseTypographyParagraphSmall3"
  ],
  text37: ["text37"],
  spacer30: ["spacer30"],
  inputElementSelect2: [
    "inputElementSelect2",
    "signedByBaseInputElementSelectMediumSingleDefaultActive2",
    "selectFrame2",
    "leadingArtworkContainer7",
    "leadingArtwork4",
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27",
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39",
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31",
    "trailingArtworkContainer7",
    "trailingArtwork7",
    "selectIndicatorContainer4",
    "chevronIcon4",
    "menu2",
    "signedByBaseMenuListMedium2",
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36",
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15",
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2",
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18",
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20",
    "scrollBar2"
  ],
  signedByBaseInputElementSelectMediumSingleDefaultActive2: [
    "signedByBaseInputElementSelectMediumSingleDefaultActive2"
  ],
  selectFrame2: [
    "selectFrame2",
    "leadingArtworkContainer7",
    "leadingArtwork4",
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27",
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39",
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31",
    "trailingArtworkContainer7",
    "trailingArtwork7",
    "selectIndicatorContainer4",
    "chevronIcon4"
  ],
  leadingArtworkContainer7: ["leadingArtworkContainer7", "leadingArtwork4"],
  leadingArtwork4: ["leadingArtwork4"],
  leadingLabelContainer7: [
    "leadingLabelContainer7",
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27"
  ],
  leadingLabel7: [
    "leadingLabel7",
    "signedByBaseTypographyLabelMedium7",
    "text38",
    "spacer27"
  ],
  signedByBaseTypographyLabelMedium7: ["signedByBaseTypographyLabelMedium7"],
  text38: ["text38"],
  spacer27: ["spacer27"],
  inputElementContentText7: [
    "inputElementContentText7",
    "signedByBaseInputElementContentTextMediumOff3",
    "text39"
  ],
  signedByBaseInputElementContentTextMediumOff3: [
    "signedByBaseInputElementContentTextMediumOff3"
  ],
  text39: ["text39"],
  trailingLabelEnhancer7: [
    "trailingLabelEnhancer7",
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31"
  ],
  trailingLabel7: [
    "trailingLabel7",
    "signedByBaseTypographyLabelMedium8",
    "text40",
    "spacer31"
  ],
  signedByBaseTypographyLabelMedium8: ["signedByBaseTypographyLabelMedium8"],
  text40: ["text40"],
  spacer31: ["spacer31"],
  trailingArtworkContainer7: ["trailingArtworkContainer7", "trailingArtwork7"],
  trailingArtwork7: ["trailingArtwork7"],
  selectIndicatorContainer4: ["selectIndicatorContainer4", "chevronIcon4"],
  chevronIcon4: ["chevronIcon4"],
  menu2: [
    "menu2",
    "signedByBaseMenuListMedium2",
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36",
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15",
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2",
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18",
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20",
    "scrollBar2"
  ],
  signedByBaseMenuListMedium2: ["signedByBaseMenuListMedium2"],
  menuItem6: [
    "menuItem6",
    "signedByBaseMenuItemSearchMediumNoneEnabled2",
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36"
  ],
  signedByBaseMenuItemSearchMediumNoneEnabled2: [
    "signedByBaseMenuItemSearchMediumNoneEnabled2"
  ],
  searchField2: [
    "searchField2",
    "signedByBaseSearchFieldMediumEnabled2",
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33",
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8",
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36"
  ],
  signedByBaseSearchFieldMediumEnabled2: [
    "signedByBaseSearchFieldMediumEnabled2"
  ],
  inputElementLabel2: [
    "inputElementLabel2",
    "signedByBaseInputElementLabelMedium2",
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32",
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33"
  ],
  signedByBaseInputElementLabelMedium2: [
    "signedByBaseInputElementLabelMedium2"
  ],
  typography15: [
    "typography15",
    "signedByBaseTypographyLabelMedium9",
    "text41",
    "spacer32"
  ],
  signedByBaseTypographyLabelMedium9: ["signedByBaseTypographyLabelMedium9"],
  text41: ["text41"],
  spacer32: ["spacer32"],
  characterCountFrame2: [
    "characterCountFrame2",
    "heart12",
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33"
  ],
  heart12: ["heart12"],
  typography16: [
    "typography16",
    "signedByBaseTypographyLabelMedium10",
    "text42",
    "spacer33"
  ],
  signedByBaseTypographyLabelMedium10: ["signedByBaseTypographyLabelMedium10"],
  text42: ["text42"],
  spacer33: ["spacer33"],
  inputElementTextField4: [
    "inputElementTextField4",
    "signedByBaseInputElementTextFieldMediumEnabled2",
    "leadingArtworkContainer8",
    "search2",
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34",
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44",
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35",
    "trailingArtworkContainer8",
    "trailingArtwork8"
  ],
  signedByBaseInputElementTextFieldMediumEnabled2: [
    "signedByBaseInputElementTextFieldMediumEnabled2"
  ],
  leadingArtworkContainer8: ["leadingArtworkContainer8", "search2"],
  search2: ["search2"],
  leadingLabelContainer8: [
    "leadingLabelContainer8",
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34"
  ],
  leadingLabel8: [
    "leadingLabel8",
    "signedByBaseTypographyLabelMedium11",
    "text43",
    "spacer34"
  ],
  signedByBaseTypographyLabelMedium11: ["signedByBaseTypographyLabelMedium11"],
  text43: ["text43"],
  spacer34: ["spacer34"],
  inputElementContentText8: [
    "inputElementContentText8",
    "signedByBaseInputElementContentTextMediumOff4",
    "text44"
  ],
  signedByBaseInputElementContentTextMediumOff4: [
    "signedByBaseInputElementContentTextMediumOff4"
  ],
  text44: ["text44"],
  trailingLabelEnhancer8: [
    "trailingLabelEnhancer8",
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35"
  ],
  trailingLabel8: [
    "trailingLabel8",
    "signedByBaseTypographyLabelMedium12",
    "text45",
    "spacer35"
  ],
  signedByBaseTypographyLabelMedium12: ["signedByBaseTypographyLabelMedium12"],
  text45: ["text45"],
  spacer35: ["spacer35"],
  trailingArtworkContainer8: ["trailingArtworkContainer8", "trailingArtwork8"],
  trailingArtwork8: ["trailingArtwork8"],
  inputElementHint4: [
    "inputElementHint4",
    "heart13",
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36"
  ],
  heart13: ["heart13"],
  hint4: [
    "hint4",
    "signedByBaseTypographyParagraphSmall4",
    "text46",
    "spacer36"
  ],
  signedByBaseTypographyParagraphSmall4: [
    "signedByBaseTypographyParagraphSmall4"
  ],
  text46: ["text46"],
  spacer36: ["spacer36"],
  menuItem7: [
    "menuItem7",
    "signedByBaseMenuItemOptionMediumStandardEnabled5",
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5",
    "leadingEnhancer5",
    "heart14",
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39",
    "trailingEnhancer5",
    "heart15"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled5: [
    "signedByBaseMenuItemOptionMediumStandardEnabled5"
  ],
  menuItemControlMediumCheckboxUnchecked5: [
    "menuItemControlMediumCheckboxUnchecked5",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5",
    "icon5"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked5: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked5"
  ],
  icon5: ["icon5"],
  leadingEnhancer5: ["leadingEnhancer5", "heart14"],
  heart14: ["heart14"],
  textFrame5: [
    "textFrame5",
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38",
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39"
  ],
  leadingText5: [
    "leadingText5",
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37",
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38"
  ],
  typography17: [
    "typography17",
    "signedByBaseTypographyParagraphMedium13",
    "text47",
    "spacer37"
  ],
  signedByBaseTypographyParagraphMedium13: [
    "signedByBaseTypographyParagraphMedium13"
  ],
  text47: ["text47"],
  spacer37: ["spacer37"],
  typography18: [
    "typography18",
    "signedByBaseTypographyParagraphMedium14",
    "text48",
    "spacer38"
  ],
  signedByBaseTypographyParagraphMedium14: [
    "signedByBaseTypographyParagraphMedium14"
  ],
  text48: ["text48"],
  spacer38: ["spacer38"],
  typography19: [
    "typography19",
    "signedByBaseTypographyParagraphMedium15",
    "spacer39"
  ],
  signedByBaseTypographyParagraphMedium15: [
    "signedByBaseTypographyParagraphMedium15"
  ],
  spacer39: ["spacer39"],
  trailingEnhancer5: ["trailingEnhancer5", "heart15"],
  heart15: ["heart15"],
  menuItem8: [
    "menuItem8",
    "signedByBaseMenuItemOptionMediumStandardEnabled6",
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6",
    "leadingEnhancer6",
    "heart16",
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42",
    "trailingEnhancer6",
    "checkmarkSmall2"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled6: [
    "signedByBaseMenuItemOptionMediumStandardEnabled6"
  ],
  menuItemControlMediumCheckboxUnchecked6: [
    "menuItemControlMediumCheckboxUnchecked6",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6",
    "icon6"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked6: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked6"
  ],
  icon6: ["icon6"],
  leadingEnhancer6: ["leadingEnhancer6", "heart16"],
  heart16: ["heart16"],
  textFrame6: [
    "textFrame6",
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41",
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42"
  ],
  leadingText6: [
    "leadingText6",
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40",
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41"
  ],
  typography20: [
    "typography20",
    "signedByBaseTypographyParagraphMedium16",
    "text49",
    "spacer40"
  ],
  signedByBaseTypographyParagraphMedium16: [
    "signedByBaseTypographyParagraphMedium16"
  ],
  text49: ["text49"],
  spacer40: ["spacer40"],
  typography21: [
    "typography21",
    "signedByBaseTypographyParagraphMedium17",
    "text50",
    "spacer41"
  ],
  signedByBaseTypographyParagraphMedium17: [
    "signedByBaseTypographyParagraphMedium17"
  ],
  text50: ["text50"],
  spacer41: ["spacer41"],
  typography22: [
    "typography22",
    "signedByBaseTypographyParagraphMedium18",
    "spacer42"
  ],
  signedByBaseTypographyParagraphMedium18: [
    "signedByBaseTypographyParagraphMedium18"
  ],
  spacer42: ["spacer42"],
  trailingEnhancer6: ["trailingEnhancer6", "checkmarkSmall2"],
  checkmarkSmall2: ["checkmarkSmall2"],
  menuItem9: [
    "menuItem9",
    "signedByBaseMenuItemOptionMediumStandardEnabled7",
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7",
    "leadingEnhancer7",
    "heart17",
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45",
    "trailingEnhancer7",
    "heart18"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled7: [
    "signedByBaseMenuItemOptionMediumStandardEnabled7"
  ],
  menuItemControlMediumCheckboxUnchecked7: [
    "menuItemControlMediumCheckboxUnchecked7",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7",
    "icon7"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked7: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked7"
  ],
  icon7: ["icon7"],
  leadingEnhancer7: ["leadingEnhancer7", "heart17"],
  heart17: ["heart17"],
  textFrame7: [
    "textFrame7",
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44",
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45"
  ],
  leadingText7: [
    "leadingText7",
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43",
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44"
  ],
  typography23: [
    "typography23",
    "signedByBaseTypographyParagraphMedium19",
    "text51",
    "spacer43"
  ],
  signedByBaseTypographyParagraphMedium19: [
    "signedByBaseTypographyParagraphMedium19"
  ],
  text51: ["text51"],
  spacer43: ["spacer43"],
  typography24: [
    "typography24",
    "signedByBaseTypographyParagraphMedium20",
    "text52",
    "spacer44"
  ],
  signedByBaseTypographyParagraphMedium20: [
    "signedByBaseTypographyParagraphMedium20"
  ],
  text52: ["text52"],
  spacer44: ["spacer44"],
  typography25: [
    "typography25",
    "signedByBaseTypographyParagraphMedium21",
    "spacer45"
  ],
  signedByBaseTypographyParagraphMedium21: [
    "signedByBaseTypographyParagraphMedium21"
  ],
  spacer45: ["spacer45"],
  trailingEnhancer7: ["trailingEnhancer7", "heart18"],
  heart18: ["heart18"],
  menuItem10: [
    "menuItem10",
    "signedByBaseMenuItemOptionMediumStandardEnabled8",
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8",
    "leadingEnhancer8",
    "heart19",
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48",
    "trailingEnhancer8",
    "heart20"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled8: [
    "signedByBaseMenuItemOptionMediumStandardEnabled8"
  ],
  menuItemControlMediumCheckboxUnchecked8: [
    "menuItemControlMediumCheckboxUnchecked8",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8",
    "icon8"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked8: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked8"
  ],
  icon8: ["icon8"],
  leadingEnhancer8: ["leadingEnhancer8", "heart19"],
  heart19: ["heart19"],
  textFrame8: [
    "textFrame8",
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47",
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48"
  ],
  leadingText8: [
    "leadingText8",
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46",
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47"
  ],
  typography26: [
    "typography26",
    "signedByBaseTypographyParagraphMedium22",
    "text53",
    "spacer46"
  ],
  signedByBaseTypographyParagraphMedium22: [
    "signedByBaseTypographyParagraphMedium22"
  ],
  text53: ["text53"],
  spacer46: ["spacer46"],
  typography27: [
    "typography27",
    "signedByBaseTypographyParagraphMedium23",
    "text54",
    "spacer47"
  ],
  signedByBaseTypographyParagraphMedium23: [
    "signedByBaseTypographyParagraphMedium23"
  ],
  text54: ["text54"],
  spacer47: ["spacer47"],
  typography28: [
    "typography28",
    "signedByBaseTypographyParagraphMedium24",
    "spacer48"
  ],
  signedByBaseTypographyParagraphMedium24: [
    "signedByBaseTypographyParagraphMedium24"
  ],
  spacer48: ["spacer48"],
  trailingEnhancer8: ["trailingEnhancer8", "heart20"],
  heart20: ["heart20"],
  scrollBar2: ["scrollBar2"],
  model2: ["model2"],
  buttons2: [
    "buttons2",
    "button5",
    "frame1073713925",
    "frame1073713931",
    "button6",
    "button7",
    "button8"
  ],
  button5: ["button5"],
  frame1073713925: ["frame1073713925"],
  frame1073713931: ["frame1073713931", "button6", "button7", "button8"],
  button6: ["button6"],
  button7: ["button7"],
  button8: ["button8"],
  newRetex2: [
    "newRetex2",
    "frame1437254016",
    "name",
    "frame1437254019",
    "form",
    "textArea",
    "select2",
    "content",
    "titre",
    "texinput2",
    "date",
    "label6",
    "timePicker",
    "type",
    "budget",
    "comments",
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar",
    "model",
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4"
  ],
  frame1437254016: ["frame1437254016", "name", "frame1437254019"],
  name: ["name"],
  frame1437254019: ["frame1437254019"],
  form: ["form", "textArea", "select2"],
  textArea: ["textArea"],
  select2: ["select2"],
  content: [
    "content",
    "titre",
    "texinput2",
    "date",
    "label6",
    "timePicker",
    "type",
    "budget",
    "comments",
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar",
    "model",
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4"
  ],
  titre: ["titre"],
  texinput2: ["texinput2"],
  date: ["date", "label6", "timePicker"],
  label6: ["label6"],
  timePicker: ["timePicker"],
  type: ["type"],
  budget: ["budget"],
  comments: ["comments"],
  input5: [
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar"
  ],
  name2: ["name2"],
  datePickerWeb: [
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28"
  ],
  inputSelect: [
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28"
  ],
  signedByBaseFieldGroupSmall: ["signedByBaseFieldGroupSmall"],
  endDateCalendar: [
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon"
  ],
  inputElementTextField: [
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork"
  ],
  signedByBaseInputElementTextFieldSmallEnabled: [
    "signedByBaseInputElementTextFieldSmallEnabled"
  ],
  leadingArtworkContainer: ["leadingArtworkContainer", "leadingArtwork"],
  leadingArtwork: ["leadingArtwork"],
  leadingLabelContainer: [
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer"
  ],
  leadingLabel: [
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer"
  ],
  signedByBaseTypographyLabelSmall: ["signedByBaseTypographyLabelSmall"],
  text5: ["text5"],
  spacer: ["spacer"],
  inputElementContentText: [
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6"
  ],
  signedByBaseInputElementContentTextSmallOff: [
    "signedByBaseInputElementContentTextSmallOff"
  ],
  text6: ["text6"],
  trailingLabelEnhancer: [
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2"
  ],
  trailingLabel: [
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2"
  ],
  signedByBaseTypographyLabelSmall2: ["signedByBaseTypographyLabelSmall2"],
  text7: ["text7"],
  spacer2: ["spacer2"],
  trailingArtworkContainer: ["trailingArtworkContainer", "trailingArtwork"],
  trailingArtwork: ["trailingArtwork"],
  calendar: [
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon"
  ],
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled: [
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled"
  ],
  leadingArtworkContainer2: ["leadingArtworkContainer2", "text8"],
  text8: ["text8"],
  leadingLabelContainer2: [
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3"
  ],
  leadingLabel2: [
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3"
  ],
  signedByBaseTypographyLabelXSmall: ["signedByBaseTypographyLabelXSmall"],
  text9: ["text9"],
  spacer3: ["spacer3"],
  inputElementContentText2: [
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10"
  ],
  signedByBaseInputElementContentTextXSmallWebOff: [
    "signedByBaseInputElementContentTextXSmallWebOff"
  ],
  text10: ["text10"],
  trailingLabelEnhancer2: [
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4"
  ],
  trailingLabel2: [
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4"
  ],
  signedByBaseTypographyLabelXSmall2: ["signedByBaseTypographyLabelXSmall2"],
  text11: ["text11"],
  spacer4: ["spacer4"],
  trailingArtworkContainer2: ["trailingArtworkContainer2", "trailingArtwork2"],
  trailingArtwork2: ["trailingArtwork2"],
  selectIndicatorContainer: ["selectIndicatorContainer", "chevronIcon"],
  chevronIcon: ["chevronIcon"],
  inputElementHint: [
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28"
  ],
  heart: ["heart"],
  hint: ["hint", "signedByBaseTypographyParagraphSmall", "text12", "spacer28"],
  signedByBaseTypographyParagraphSmall: [
    "signedByBaseTypographyParagraphSmall"
  ],
  text12: ["text12"],
  spacer28: ["spacer28"],
  inputElementSelect: [
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar"
  ],
  signedByBaseInputElementSelectMediumSingleDefaultActive: [
    "signedByBaseInputElementSelectMediumSingleDefaultActive"
  ],
  selectFrame: [
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2"
  ],
  leadingArtworkContainer3: ["leadingArtworkContainer3", "leadingArtwork2"],
  leadingArtwork2: ["leadingArtwork2"],
  leadingLabelContainer3: [
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5"
  ],
  leadingLabel3: [
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5"
  ],
  signedByBaseTypographyLabelMedium: ["signedByBaseTypographyLabelMedium"],
  text13: ["text13"],
  spacer5: ["spacer5"],
  inputElementContentText3: [
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14"
  ],
  signedByBaseInputElementContentTextMediumOff: [
    "signedByBaseInputElementContentTextMediumOff"
  ],
  text14: ["text14"],
  trailingLabelEnhancer3: [
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6"
  ],
  trailingLabel3: [
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6"
  ],
  signedByBaseTypographyLabelMedium2: ["signedByBaseTypographyLabelMedium2"],
  text15: ["text15"],
  spacer6: ["spacer6"],
  trailingArtworkContainer3: ["trailingArtworkContainer3", "trailingArtwork3"],
  trailingArtwork3: ["trailingArtwork3"],
  selectIndicatorContainer2: ["selectIndicatorContainer2", "chevronIcon2"],
  chevronIcon2: ["chevronIcon2"],
  menu: [
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar"
  ],
  signedByBaseMenuListMedium: ["signedByBaseMenuListMedium"],
  menuItem: [
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  signedByBaseMenuItemSearchMediumNoneEnabled: [
    "signedByBaseMenuItemSearchMediumNoneEnabled"
  ],
  searchField: [
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  signedByBaseSearchFieldMediumEnabled: [
    "signedByBaseSearchFieldMediumEnabled"
  ],
  inputElementLabel: [
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8"
  ],
  signedByBaseInputElementLabelMedium: ["signedByBaseInputElementLabelMedium"],
  typography: [
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7"
  ],
  signedByBaseTypographyLabelMedium3: ["signedByBaseTypographyLabelMedium3"],
  text16: ["text16"],
  spacer7: ["spacer7"],
  characterCountFrame: [
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8"
  ],
  heart2: ["heart2"],
  typography2: [
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8"
  ],
  signedByBaseTypographyLabelMedium4: ["signedByBaseTypographyLabelMedium4"],
  text17: ["text17"],
  spacer8: ["spacer8"],
  inputElementTextField2: [
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4"
  ],
  signedByBaseInputElementTextFieldMediumEnabled: [
    "signedByBaseInputElementTextFieldMediumEnabled"
  ],
  leadingArtworkContainer4: ["leadingArtworkContainer4", "search"],
  search: ["search"],
  leadingLabelContainer4: [
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9"
  ],
  leadingLabel4: [
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9"
  ],
  signedByBaseTypographyLabelMedium5: ["signedByBaseTypographyLabelMedium5"],
  text18: ["text18"],
  spacer9: ["spacer9"],
  inputElementContentText4: [
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19"
  ],
  signedByBaseInputElementContentTextMediumOff2: [
    "signedByBaseInputElementContentTextMediumOff2"
  ],
  text19: ["text19"],
  trailingLabelEnhancer4: [
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10"
  ],
  trailingLabel4: [
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10"
  ],
  signedByBaseTypographyLabelMedium6: ["signedByBaseTypographyLabelMedium6"],
  text20: ["text20"],
  spacer10: ["spacer10"],
  trailingArtworkContainer4: ["trailingArtworkContainer4", "trailingArtwork4"],
  trailingArtwork4: ["trailingArtwork4"],
  inputElementHint2: [
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  heart3: ["heart3"],
  hint2: [
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  signedByBaseTypographyParagraphSmall2: [
    "signedByBaseTypographyParagraphSmall2"
  ],
  text21: ["text21"],
  spacer29: ["spacer29"],
  menuItem2: [
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled: [
    "signedByBaseMenuItemOptionMediumStandardEnabled"
  ],
  menuItemControlMediumCheckboxUnchecked: [
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked"
  ],
  icon: ["icon"],
  leadingEnhancer: ["leadingEnhancer", "heart4"],
  heart4: ["heart4"],
  textFrame: [
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13"
  ],
  leadingText: [
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12"
  ],
  typography3: [
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11"
  ],
  signedByBaseTypographyParagraphMedium: [
    "signedByBaseTypographyParagraphMedium"
  ],
  text22: ["text22"],
  spacer11: ["spacer11"],
  typography4: [
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12"
  ],
  signedByBaseTypographyParagraphMedium2: [
    "signedByBaseTypographyParagraphMedium2"
  ],
  text23: ["text23"],
  spacer12: ["spacer12"],
  typography5: [
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13"
  ],
  signedByBaseTypographyParagraphMedium3: [
    "signedByBaseTypographyParagraphMedium3"
  ],
  spacer13: ["spacer13"],
  trailingEnhancer: ["trailingEnhancer", "heart5"],
  heart5: ["heart5"],
  menuItem3: [
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled2: [
    "signedByBaseMenuItemOptionMediumStandardEnabled2"
  ],
  menuItemControlMediumCheckboxUnchecked2: [
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked2: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2"
  ],
  icon2: ["icon2"],
  leadingEnhancer2: ["leadingEnhancer2", "heart6"],
  heart6: ["heart6"],
  textFrame2: [
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16"
  ],
  leadingText2: [
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15"
  ],
  typography6: [
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14"
  ],
  signedByBaseTypographyParagraphMedium4: [
    "signedByBaseTypographyParagraphMedium4"
  ],
  text24: ["text24"],
  spacer14: ["spacer14"],
  typography7: [
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15"
  ],
  signedByBaseTypographyParagraphMedium5: [
    "signedByBaseTypographyParagraphMedium5"
  ],
  text25: ["text25"],
  spacer15: ["spacer15"],
  typography8: [
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16"
  ],
  signedByBaseTypographyParagraphMedium6: [
    "signedByBaseTypographyParagraphMedium6"
  ],
  spacer16: ["spacer16"],
  trailingEnhancer2: ["trailingEnhancer2", "checkmarkSmall"],
  checkmarkSmall: ["checkmarkSmall"],
  menuItem4: [
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled3: [
    "signedByBaseMenuItemOptionMediumStandardEnabled3"
  ],
  menuItemControlMediumCheckboxUnchecked3: [
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked3: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3"
  ],
  icon3: ["icon3"],
  leadingEnhancer3: ["leadingEnhancer3", "heart7"],
  heart7: ["heart7"],
  textFrame3: [
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19"
  ],
  leadingText3: [
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18"
  ],
  typography9: [
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17"
  ],
  signedByBaseTypographyParagraphMedium7: [
    "signedByBaseTypographyParagraphMedium7"
  ],
  text26: ["text26"],
  spacer17: ["spacer17"],
  typography10: [
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18"
  ],
  signedByBaseTypographyParagraphMedium8: [
    "signedByBaseTypographyParagraphMedium8"
  ],
  text27: ["text27"],
  spacer18: ["spacer18"],
  typography11: [
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19"
  ],
  signedByBaseTypographyParagraphMedium9: [
    "signedByBaseTypographyParagraphMedium9"
  ],
  spacer19: ["spacer19"],
  trailingEnhancer3: ["trailingEnhancer3", "heart8"],
  heart8: ["heart8"],
  menuItem5: [
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled4: [
    "signedByBaseMenuItemOptionMediumStandardEnabled4"
  ],
  menuItemControlMediumCheckboxUnchecked4: [
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked4: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4"
  ],
  icon4: ["icon4"],
  leadingEnhancer4: ["leadingEnhancer4", "heart9"],
  heart9: ["heart9"],
  textFrame4: [
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22"
  ],
  leadingText4: [
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21"
  ],
  typography12: [
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20"
  ],
  signedByBaseTypographyParagraphMedium10: [
    "signedByBaseTypographyParagraphMedium10"
  ],
  text28: ["text28"],
  spacer20: ["spacer20"],
  typography13: [
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21"
  ],
  signedByBaseTypographyParagraphMedium11: [
    "signedByBaseTypographyParagraphMedium11"
  ],
  text29: ["text29"],
  spacer21: ["spacer21"],
  typography14: [
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22"
  ],
  signedByBaseTypographyParagraphMedium12: [
    "signedByBaseTypographyParagraphMedium12"
  ],
  spacer22: ["spacer22"],
  trailingEnhancer4: ["trailingEnhancer4", "heart10"],
  heart10: ["heart10"],
  scrollBar: ["scrollBar"],
  model: ["model"],
  buttons: [
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4"
  ],
  button: ["button"],
  frame1073713924: ["frame1073713924"],
  frame1073713930: ["frame1073713930", "button2", "button3", "button4"],
  button2: ["button2"],
  button3: ["button3"],
  button4: ["button4"],
  accueilDashboard: [
    "accueilDashboard",
    "leftMenu",
    "main",
    "header",
    "frame1437253918",
    "filters2",
    "buttonFilter2",
    "buttonAdd2",
    "retexMenu",
    "buttonBase",
    "text",
    "subTabs",
    "metricItem",
    "headingAndDropdown",
    "heading",
    "numberAndChart",
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3",
    "subgroups",
    "service",
    "metricItem4",
    "headingAndDropdown4",
    "heading4",
    "numberAndChart4",
    "numberAndBadge4",
    "number4",
    "service2",
    "faitsMarquant",
    "subgroups2",
    "service3",
    "kanban"
  ],
  leftMenu: ["leftMenu"],
  main: [
    "main",
    "header",
    "frame1437253918",
    "filters2",
    "buttonFilter2",
    "buttonAdd2",
    "retexMenu",
    "buttonBase",
    "text",
    "subTabs",
    "metricItem",
    "headingAndDropdown",
    "heading",
    "numberAndChart",
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3",
    "subgroups",
    "service",
    "metricItem4",
    "headingAndDropdown4",
    "heading4",
    "numberAndChart4",
    "numberAndBadge4",
    "number4",
    "service2",
    "faitsMarquant",
    "subgroups2",
    "service3",
    "kanban"
  ],
  header: ["header"],
  frame1437253918: [
    "frame1437253918",
    "filters2",
    "buttonFilter2",
    "buttonAdd2",
    "retexMenu",
    "buttonBase",
    "text",
    "subTabs",
    "metricItem",
    "headingAndDropdown",
    "heading",
    "numberAndChart",
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3",
    "subgroups",
    "service",
    "metricItem4",
    "headingAndDropdown4",
    "heading4",
    "numberAndChart4",
    "numberAndBadge4",
    "number4",
    "service2",
    "faitsMarquant",
    "subgroups2",
    "service3",
    "kanban"
  ],
  filters2: ["filters2", "buttonFilter2", "buttonAdd2"],
  buttonFilter2: ["buttonFilter2"],
  buttonAdd2: ["buttonAdd2"],
  retexMenu: ["retexMenu"],
  buttonBase: ["buttonBase", "text"],
  text: ["text"],
  subTabs: ["subTabs"],
  metricItem: [
    "metricItem",
    "headingAndDropdown",
    "heading",
    "numberAndChart",
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3"
  ],
  headingAndDropdown: ["headingAndDropdown", "heading"],
  heading: ["heading"],
  numberAndChart: [
    "numberAndChart",
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3"
  ],
  numberAndBadge: [
    "numberAndBadge",
    "number",
    "frame1437254335",
    "number2",
    "number3"
  ],
  number: ["number"],
  frame1437254335: ["frame1437254335", "number2", "number3"],
  number2: ["number2"],
  number3: ["number3"],
  subgroups: ["subgroups", "service"],
  service: ["service"],
  metricItem4: [
    "metricItem4",
    "headingAndDropdown4",
    "heading4",
    "numberAndChart4",
    "numberAndBadge4",
    "number4"
  ],
  headingAndDropdown4: ["headingAndDropdown4", "heading4"],
  heading4: ["heading4"],
  numberAndChart4: ["numberAndChart4", "numberAndBadge4", "number4"],
  numberAndBadge4: ["numberAndBadge4", "number4"],
  number4: ["number4"],
  service2: ["service2"],
  faitsMarquant: ["faitsMarquant", "subgroups2", "service3", "kanban"],
  subgroups2: ["subgroups2", "service3", "kanban"],
  service3: ["service3", "kanban"],
  kanban: ["kanban"],
  bottomMenu: ["bottomMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  deleteRetex: typeof Modal;
  frame1437254018: "div";
  name7: "div";
  frame1437254021: "div";
  form3: typeof FormWrapper;
  content3: "div";
  titre3: typeof TextInput;
  texinput23: typeof SitexTextInput;
  date3: "div";
  label8: "div";
  timePicker9: typeof AntdDatePicker;
  type3: typeof DropDown;
  budget3: typeof TextInput;
  comments3: typeof TextInput;
  input9: "div";
  name6: "div";
  datePickerWeb3: "div";
  inputSelect3: "div";
  signedByBaseFieldGroupSmall3: "div";
  endDateCalendar3: "div";
  inputElementTextField5: "div";
  signedByBaseInputElementTextFieldSmallEnabled3: "div";
  leadingArtworkContainer9: "div";
  leadingArtwork5: "div";
  leadingLabelContainer9: "div";
  leadingLabel9: "div";
  signedByBaseTypographyLabelSmall5: "div";
  text55: "div";
  spacer49: "div";
  inputElementContentText9: "div";
  signedByBaseInputElementContentTextSmallOff3: "div";
  text56: "div";
  trailingLabelEnhancer9: "div";
  trailingLabel9: "div";
  signedByBaseTypographyLabelSmall6: "div";
  text57: "div";
  spacer50: "div";
  trailingArtworkContainer9: "div";
  trailingArtwork9: "div";
  calendar3: "div";
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3: "div";
  leadingArtworkContainer10: "div";
  text58: "div";
  leadingLabelContainer10: "div";
  leadingLabel10: "div";
  signedByBaseTypographyLabelXSmall5: "div";
  text59: "div";
  spacer51: "div";
  inputElementContentText10: "div";
  signedByBaseInputElementContentTextXSmallWebOff3: "div";
  text60: "div";
  trailingLabelEnhancer10: "div";
  trailingLabel10: "div";
  signedByBaseTypographyLabelXSmall6: "div";
  text61: "div";
  spacer52: "div";
  trailingArtworkContainer10: "div";
  trailingArtwork10: "div";
  selectIndicatorContainer5: "div";
  chevronIcon5: "div";
  inputElementHint5: "div";
  heart21: "div";
  hint5: "div";
  signedByBaseTypographyParagraphSmall5: "div";
  text62: "div";
  spacer53: "div";
  inputElementSelect3: "div";
  signedByBaseInputElementSelectMediumSingleDefaultActive3: "div";
  selectFrame3: "div";
  leadingArtworkContainer11: "div";
  leadingArtwork6: "div";
  leadingLabelContainer11: "div";
  leadingLabel11: "div";
  signedByBaseTypographyLabelMedium13: "div";
  text63: "div";
  spacer54: "div";
  inputElementContentText11: "div";
  signedByBaseInputElementContentTextMediumOff5: "div";
  text64: "div";
  trailingLabelEnhancer11: "div";
  trailingLabel11: "div";
  signedByBaseTypographyLabelMedium14: "div";
  text65: "div";
  spacer55: "div";
  trailingArtworkContainer11: "div";
  trailingArtwork11: "div";
  selectIndicatorContainer6: "div";
  chevronIcon6: "div";
  menu3: "div";
  signedByBaseMenuListMedium3: "div";
  menuItem11: "div";
  signedByBaseMenuItemSearchMediumNoneEnabled3: "div";
  searchField3: "div";
  signedByBaseSearchFieldMediumEnabled3: "div";
  inputElementLabel3: "div";
  signedByBaseInputElementLabelMedium3: "div";
  typography29: "div";
  signedByBaseTypographyLabelMedium15: "div";
  text66: "div";
  spacer56: "div";
  characterCountFrame3: "div";
  heart22: "div";
  typography30: "div";
  signedByBaseTypographyLabelMedium16: "div";
  text67: "div";
  spacer57: "div";
  inputElementTextField6: "div";
  signedByBaseInputElementTextFieldMediumEnabled3: "div";
  leadingArtworkContainer12: "div";
  search3: "div";
  leadingLabelContainer12: "div";
  leadingLabel12: "div";
  signedByBaseTypographyLabelMedium17: "div";
  text68: "div";
  spacer58: "div";
  inputElementContentText12: "div";
  signedByBaseInputElementContentTextMediumOff6: "div";
  text69: "div";
  trailingLabelEnhancer12: "div";
  trailingLabel12: "div";
  signedByBaseTypographyLabelMedium18: "div";
  text70: "div";
  spacer59: "div";
  trailingArtworkContainer12: "div";
  trailingArtwork12: "div";
  inputElementHint6: "div";
  heart23: "div";
  hint6: "div";
  signedByBaseTypographyParagraphSmall6: "div";
  text71: "div";
  spacer60: "div";
  menuItem12: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled9: "div";
  menuItemControlMediumCheckboxUnchecked9: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked9: "div";
  icon9: "div";
  leadingEnhancer9: "div";
  heart24: "div";
  textFrame9: "div";
  leadingText9: "div";
  typography31: "div";
  signedByBaseTypographyParagraphMedium25: "div";
  text72: "div";
  spacer61: "div";
  typography32: "div";
  signedByBaseTypographyParagraphMedium26: "div";
  text73: "div";
  spacer62: "div";
  typography33: "div";
  signedByBaseTypographyParagraphMedium27: "div";
  spacer63: "div";
  trailingEnhancer9: "div";
  heart25: "div";
  menuItem13: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled10: "div";
  menuItemControlMediumCheckboxUnchecked10: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked10: "div";
  icon10: "div";
  leadingEnhancer10: "div";
  heart26: "div";
  textFrame10: "div";
  leadingText10: "div";
  typography34: "div";
  signedByBaseTypographyParagraphMedium28: "div";
  text74: "div";
  spacer64: "div";
  typography35: "div";
  signedByBaseTypographyParagraphMedium29: "div";
  text75: "div";
  spacer65: "div";
  typography36: "div";
  signedByBaseTypographyParagraphMedium30: "div";
  spacer66: "div";
  trailingEnhancer10: "div";
  checkmarkSmall3: "div";
  menuItem14: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled11: "div";
  menuItemControlMediumCheckboxUnchecked11: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked11: "div";
  icon11: "div";
  leadingEnhancer11: "div";
  heart27: "div";
  textFrame11: "div";
  leadingText11: "div";
  typography37: "div";
  signedByBaseTypographyParagraphMedium31: "div";
  text76: "div";
  spacer67: "div";
  typography38: "div";
  signedByBaseTypographyParagraphMedium32: "div";
  text77: "div";
  spacer68: "div";
  typography39: "div";
  signedByBaseTypographyParagraphMedium33: "div";
  spacer69: "div";
  trailingEnhancer11: "div";
  heart28: "div";
  menuItem15: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled12: "div";
  menuItemControlMediumCheckboxUnchecked12: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked12: "div";
  icon12: "div";
  leadingEnhancer12: "div";
  heart29: "div";
  textFrame12: "div";
  leadingText12: "div";
  typography40: "div";
  signedByBaseTypographyParagraphMedium34: "div";
  text78: "div";
  spacer70: "div";
  typography41: "div";
  signedByBaseTypographyParagraphMedium35: "div";
  text79: "div";
  spacer71: "div";
  typography42: "div";
  signedByBaseTypographyParagraphMedium36: "div";
  spacer72: "div";
  trailingEnhancer12: "div";
  heart30: "div";
  scrollBar3: "div";
  model3: typeof DropDown;
  buttons3: "div";
  button9: typeof Button;
  frame1073713926: "div";
  frame1073713932: "div";
  button10: typeof Button;
  button11: "div";
  button12: "div";
  editRetex2: typeof Modal;
  frame1437254017: "div";
  name3: "div";
  frame1437254020: "div";
  form2: typeof FormWrapper;
  textArea2: typeof AntdTextArea;
  select3: typeof AntdSelect;
  content2: "div";
  titre2: typeof TextInput;
  texinput22: typeof SitexTextInput;
  date2: "div";
  label7: "div";
  timePicker2: typeof AntdDatePicker;
  type2: typeof DropDown;
  budget2: typeof TextInput;
  comments2: typeof TextInput;
  input6: "div";
  name4: "div";
  datePickerWeb2: "div";
  inputSelect2: "div";
  signedByBaseFieldGroupSmall2: "div";
  endDateCalendar2: "div";
  inputElementTextField3: "div";
  signedByBaseInputElementTextFieldSmallEnabled2: "div";
  leadingArtworkContainer5: "div";
  leadingArtwork3: "div";
  leadingLabelContainer5: "div";
  leadingLabel5: "div";
  signedByBaseTypographyLabelSmall3: "div";
  text30: "div";
  spacer23: "div";
  inputElementContentText5: "div";
  signedByBaseInputElementContentTextSmallOff2: "div";
  text31: "div";
  trailingLabelEnhancer5: "div";
  trailingLabel5: "div";
  signedByBaseTypographyLabelSmall4: "div";
  text32: "div";
  spacer24: "div";
  trailingArtworkContainer5: "div";
  trailingArtwork5: "div";
  calendar2: "div";
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2: "div";
  leadingArtworkContainer6: "div";
  text33: "div";
  leadingLabelContainer6: "div";
  leadingLabel6: "div";
  signedByBaseTypographyLabelXSmall3: "div";
  text34: "div";
  spacer25: "div";
  inputElementContentText6: "div";
  signedByBaseInputElementContentTextXSmallWebOff2: "div";
  text35: "div";
  trailingLabelEnhancer6: "div";
  trailingLabel6: "div";
  signedByBaseTypographyLabelXSmall4: "div";
  text36: "div";
  spacer26: "div";
  trailingArtworkContainer6: "div";
  trailingArtwork6: "div";
  selectIndicatorContainer3: "div";
  chevronIcon3: "div";
  inputElementHint3: "div";
  heart11: "div";
  hint3: "div";
  signedByBaseTypographyParagraphSmall3: "div";
  text37: "div";
  spacer30: "div";
  inputElementSelect2: "div";
  signedByBaseInputElementSelectMediumSingleDefaultActive2: "div";
  selectFrame2: "div";
  leadingArtworkContainer7: "div";
  leadingArtwork4: "div";
  leadingLabelContainer7: "div";
  leadingLabel7: "div";
  signedByBaseTypographyLabelMedium7: "div";
  text38: "div";
  spacer27: "div";
  inputElementContentText7: "div";
  signedByBaseInputElementContentTextMediumOff3: "div";
  text39: "div";
  trailingLabelEnhancer7: "div";
  trailingLabel7: "div";
  signedByBaseTypographyLabelMedium8: "div";
  text40: "div";
  spacer31: "div";
  trailingArtworkContainer7: "div";
  trailingArtwork7: "div";
  selectIndicatorContainer4: "div";
  chevronIcon4: "div";
  menu2: "div";
  signedByBaseMenuListMedium2: "div";
  menuItem6: "div";
  signedByBaseMenuItemSearchMediumNoneEnabled2: "div";
  searchField2: "div";
  signedByBaseSearchFieldMediumEnabled2: "div";
  inputElementLabel2: "div";
  signedByBaseInputElementLabelMedium2: "div";
  typography15: "div";
  signedByBaseTypographyLabelMedium9: "div";
  text41: "div";
  spacer32: "div";
  characterCountFrame2: "div";
  heart12: "div";
  typography16: "div";
  signedByBaseTypographyLabelMedium10: "div";
  text42: "div";
  spacer33: "div";
  inputElementTextField4: "div";
  signedByBaseInputElementTextFieldMediumEnabled2: "div";
  leadingArtworkContainer8: "div";
  search2: "div";
  leadingLabelContainer8: "div";
  leadingLabel8: "div";
  signedByBaseTypographyLabelMedium11: "div";
  text43: "div";
  spacer34: "div";
  inputElementContentText8: "div";
  signedByBaseInputElementContentTextMediumOff4: "div";
  text44: "div";
  trailingLabelEnhancer8: "div";
  trailingLabel8: "div";
  signedByBaseTypographyLabelMedium12: "div";
  text45: "div";
  spacer35: "div";
  trailingArtworkContainer8: "div";
  trailingArtwork8: "div";
  inputElementHint4: "div";
  heart13: "div";
  hint4: "div";
  signedByBaseTypographyParagraphSmall4: "div";
  text46: "div";
  spacer36: "div";
  menuItem7: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled5: "div";
  menuItemControlMediumCheckboxUnchecked5: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked5: "div";
  icon5: "div";
  leadingEnhancer5: "div";
  heart14: "div";
  textFrame5: "div";
  leadingText5: "div";
  typography17: "div";
  signedByBaseTypographyParagraphMedium13: "div";
  text47: "div";
  spacer37: "div";
  typography18: "div";
  signedByBaseTypographyParagraphMedium14: "div";
  text48: "div";
  spacer38: "div";
  typography19: "div";
  signedByBaseTypographyParagraphMedium15: "div";
  spacer39: "div";
  trailingEnhancer5: "div";
  heart15: "div";
  menuItem8: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled6: "div";
  menuItemControlMediumCheckboxUnchecked6: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked6: "div";
  icon6: "div";
  leadingEnhancer6: "div";
  heart16: "div";
  textFrame6: "div";
  leadingText6: "div";
  typography20: "div";
  signedByBaseTypographyParagraphMedium16: "div";
  text49: "div";
  spacer40: "div";
  typography21: "div";
  signedByBaseTypographyParagraphMedium17: "div";
  text50: "div";
  spacer41: "div";
  typography22: "div";
  signedByBaseTypographyParagraphMedium18: "div";
  spacer42: "div";
  trailingEnhancer6: "div";
  checkmarkSmall2: "div";
  menuItem9: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled7: "div";
  menuItemControlMediumCheckboxUnchecked7: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked7: "div";
  icon7: "div";
  leadingEnhancer7: "div";
  heart17: "div";
  textFrame7: "div";
  leadingText7: "div";
  typography23: "div";
  signedByBaseTypographyParagraphMedium19: "div";
  text51: "div";
  spacer43: "div";
  typography24: "div";
  signedByBaseTypographyParagraphMedium20: "div";
  text52: "div";
  spacer44: "div";
  typography25: "div";
  signedByBaseTypographyParagraphMedium21: "div";
  spacer45: "div";
  trailingEnhancer7: "div";
  heart18: "div";
  menuItem10: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled8: "div";
  menuItemControlMediumCheckboxUnchecked8: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked8: "div";
  icon8: "div";
  leadingEnhancer8: "div";
  heart19: "div";
  textFrame8: "div";
  leadingText8: "div";
  typography26: "div";
  signedByBaseTypographyParagraphMedium22: "div";
  text53: "div";
  spacer46: "div";
  typography27: "div";
  signedByBaseTypographyParagraphMedium23: "div";
  text54: "div";
  spacer47: "div";
  typography28: "div";
  signedByBaseTypographyParagraphMedium24: "div";
  spacer48: "div";
  trailingEnhancer8: "div";
  heart20: "div";
  scrollBar2: "div";
  model2: typeof DropDown;
  buttons2: "div";
  button5: typeof Button;
  frame1073713925: "div";
  frame1073713931: "div";
  button6: typeof Button;
  button7: "div";
  button8: "div";
  newRetex2: typeof Modal;
  frame1437254016: "div";
  name: "div";
  frame1437254019: "div";
  form: typeof FormWrapper;
  textArea: typeof AntdTextArea;
  select2: typeof AntdSelect;
  content: "div";
  titre: typeof TextInput;
  texinput2: typeof SitexTextInput;
  date: "div";
  label6: "div";
  timePicker: typeof AntdDatePicker;
  type: typeof DropDown;
  budget: typeof TextInput;
  comments: typeof TextInput;
  input5: "div";
  name2: "div";
  datePickerWeb: "div";
  inputSelect: "div";
  signedByBaseFieldGroupSmall: "div";
  endDateCalendar: "div";
  inputElementTextField: "div";
  signedByBaseInputElementTextFieldSmallEnabled: "div";
  leadingArtworkContainer: "div";
  leadingArtwork: "div";
  leadingLabelContainer: "div";
  leadingLabel: "div";
  signedByBaseTypographyLabelSmall: "div";
  text5: "div";
  spacer: "div";
  inputElementContentText: "div";
  signedByBaseInputElementContentTextSmallOff: "div";
  text6: "div";
  trailingLabelEnhancer: "div";
  trailingLabel: "div";
  signedByBaseTypographyLabelSmall2: "div";
  text7: "div";
  spacer2: "div";
  trailingArtworkContainer: "div";
  trailingArtwork: "div";
  calendar: "div";
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled: "div";
  leadingArtworkContainer2: "div";
  text8: "div";
  leadingLabelContainer2: "div";
  leadingLabel2: "div";
  signedByBaseTypographyLabelXSmall: "div";
  text9: "div";
  spacer3: "div";
  inputElementContentText2: "div";
  signedByBaseInputElementContentTextXSmallWebOff: "div";
  text10: "div";
  trailingLabelEnhancer2: "div";
  trailingLabel2: "div";
  signedByBaseTypographyLabelXSmall2: "div";
  text11: "div";
  spacer4: "div";
  trailingArtworkContainer2: "div";
  trailingArtwork2: "div";
  selectIndicatorContainer: "div";
  chevronIcon: "div";
  inputElementHint: "div";
  heart: "div";
  hint: "div";
  signedByBaseTypographyParagraphSmall: "div";
  text12: "div";
  spacer28: "div";
  inputElementSelect: "div";
  signedByBaseInputElementSelectMediumSingleDefaultActive: "div";
  selectFrame: "div";
  leadingArtworkContainer3: "div";
  leadingArtwork2: "div";
  leadingLabelContainer3: "div";
  leadingLabel3: "div";
  signedByBaseTypographyLabelMedium: "div";
  text13: "div";
  spacer5: "div";
  inputElementContentText3: "div";
  signedByBaseInputElementContentTextMediumOff: "div";
  text14: "div";
  trailingLabelEnhancer3: "div";
  trailingLabel3: "div";
  signedByBaseTypographyLabelMedium2: "div";
  text15: "div";
  spacer6: "div";
  trailingArtworkContainer3: "div";
  trailingArtwork3: "div";
  selectIndicatorContainer2: "div";
  chevronIcon2: "div";
  menu: "div";
  signedByBaseMenuListMedium: "div";
  menuItem: "div";
  signedByBaseMenuItemSearchMediumNoneEnabled: "div";
  searchField: "div";
  signedByBaseSearchFieldMediumEnabled: "div";
  inputElementLabel: "div";
  signedByBaseInputElementLabelMedium: "div";
  typography: "div";
  signedByBaseTypographyLabelMedium3: "div";
  text16: "div";
  spacer7: "div";
  characterCountFrame: "div";
  heart2: "div";
  typography2: "div";
  signedByBaseTypographyLabelMedium4: "div";
  text17: "div";
  spacer8: "div";
  inputElementTextField2: "div";
  signedByBaseInputElementTextFieldMediumEnabled: "div";
  leadingArtworkContainer4: "div";
  search: "div";
  leadingLabelContainer4: "div";
  leadingLabel4: "div";
  signedByBaseTypographyLabelMedium5: "div";
  text18: "div";
  spacer9: "div";
  inputElementContentText4: "div";
  signedByBaseInputElementContentTextMediumOff2: "div";
  text19: "div";
  trailingLabelEnhancer4: "div";
  trailingLabel4: "div";
  signedByBaseTypographyLabelMedium6: "div";
  text20: "div";
  spacer10: "div";
  trailingArtworkContainer4: "div";
  trailingArtwork4: "div";
  inputElementHint2: "div";
  heart3: "div";
  hint2: "div";
  signedByBaseTypographyParagraphSmall2: "div";
  text21: "div";
  spacer29: "div";
  menuItem2: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled: "div";
  menuItemControlMediumCheckboxUnchecked: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked: "div";
  icon: "div";
  leadingEnhancer: "div";
  heart4: "div";
  textFrame: "div";
  leadingText: "div";
  typography3: "div";
  signedByBaseTypographyParagraphMedium: "div";
  text22: "div";
  spacer11: "div";
  typography4: "div";
  signedByBaseTypographyParagraphMedium2: "div";
  text23: "div";
  spacer12: "div";
  typography5: "div";
  signedByBaseTypographyParagraphMedium3: "div";
  spacer13: "div";
  trailingEnhancer: "div";
  heart5: "div";
  menuItem3: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled2: "div";
  menuItemControlMediumCheckboxUnchecked2: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked2: "div";
  icon2: "div";
  leadingEnhancer2: "div";
  heart6: "div";
  textFrame2: "div";
  leadingText2: "div";
  typography6: "div";
  signedByBaseTypographyParagraphMedium4: "div";
  text24: "div";
  spacer14: "div";
  typography7: "div";
  signedByBaseTypographyParagraphMedium5: "div";
  text25: "div";
  spacer15: "div";
  typography8: "div";
  signedByBaseTypographyParagraphMedium6: "div";
  spacer16: "div";
  trailingEnhancer2: "div";
  checkmarkSmall: "div";
  menuItem4: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled3: "div";
  menuItemControlMediumCheckboxUnchecked3: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked3: "div";
  icon3: "div";
  leadingEnhancer3: "div";
  heart7: "div";
  textFrame3: "div";
  leadingText3: "div";
  typography9: "div";
  signedByBaseTypographyParagraphMedium7: "div";
  text26: "div";
  spacer17: "div";
  typography10: "div";
  signedByBaseTypographyParagraphMedium8: "div";
  text27: "div";
  spacer18: "div";
  typography11: "div";
  signedByBaseTypographyParagraphMedium9: "div";
  spacer19: "div";
  trailingEnhancer3: "div";
  heart8: "div";
  menuItem5: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled4: "div";
  menuItemControlMediumCheckboxUnchecked4: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked4: "div";
  icon4: "div";
  leadingEnhancer4: "div";
  heart9: "div";
  textFrame4: "div";
  leadingText4: "div";
  typography12: "div";
  signedByBaseTypographyParagraphMedium10: "div";
  text28: "div";
  spacer20: "div";
  typography13: "div";
  signedByBaseTypographyParagraphMedium11: "div";
  text29: "div";
  spacer21: "div";
  typography14: "div";
  signedByBaseTypographyParagraphMedium12: "div";
  spacer22: "div";
  trailingEnhancer4: "div";
  heart10: "div";
  scrollBar: "div";
  model: typeof DropDown;
  buttons: "div";
  button: typeof Button;
  frame1073713924: "div";
  frame1073713930: "div";
  button2: typeof Button;
  button3: "div";
  button4: "div";
  accueilDashboard: "div";
  leftMenu: typeof LeftMenu;
  main: "div";
  header: typeof Header;
  frame1437253918: "div";
  filters2: "div";
  buttonFilter2: typeof Button;
  buttonAdd2: typeof Button;
  retexMenu: typeof RetexMenu;
  buttonBase: "div";
  text: "div";
  subTabs: "div";
  metricItem: "div";
  headingAndDropdown: "div";
  heading: "div";
  numberAndChart: "div";
  numberAndBadge: "div";
  number: "div";
  frame1437254335: "div";
  number2: "div";
  number3: "div";
  subgroups: "div";
  service: "div";
  metricItem4: "div";
  headingAndDropdown4: "div";
  heading4: "div";
  numberAndChart4: "div";
  numberAndBadge4: "div";
  number4: "div";
  service2: "div";
  faitsMarquant: typeof TabContent;
  subgroups2: "div";
  service3: "div";
  kanban: typeof Kanban;
  bottomMenu: typeof BottomMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBilanAnalytics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBilanAnalytics__VariantsArgs;
    args?: PlasmicBilanAnalytics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBilanAnalytics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBilanAnalytics__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBilanAnalytics__ArgProps,
          internalVariantPropNames: PlasmicBilanAnalytics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBilanAnalytics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBilanAnalytics";
  } else {
    func.displayName = `PlasmicBilanAnalytics.${nodeName}`;
  }
  return func;
}

export const PlasmicBilanAnalytics = Object.assign(
  // Top-level PlasmicBilanAnalytics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    deleteRetex: makeNodeComponent("deleteRetex"),
    frame1437254018: makeNodeComponent("frame1437254018"),
    name7: makeNodeComponent("name7"),
    frame1437254021: makeNodeComponent("frame1437254021"),
    form3: makeNodeComponent("form3"),
    content3: makeNodeComponent("content3"),
    titre3: makeNodeComponent("titre3"),
    texinput23: makeNodeComponent("texinput23"),
    date3: makeNodeComponent("date3"),
    label8: makeNodeComponent("label8"),
    timePicker9: makeNodeComponent("timePicker9"),
    type3: makeNodeComponent("type3"),
    budget3: makeNodeComponent("budget3"),
    comments3: makeNodeComponent("comments3"),
    input9: makeNodeComponent("input9"),
    name6: makeNodeComponent("name6"),
    datePickerWeb3: makeNodeComponent("datePickerWeb3"),
    inputSelect3: makeNodeComponent("inputSelect3"),
    signedByBaseFieldGroupSmall3: makeNodeComponent(
      "signedByBaseFieldGroupSmall3"
    ),
    endDateCalendar3: makeNodeComponent("endDateCalendar3"),
    inputElementTextField5: makeNodeComponent("inputElementTextField5"),
    signedByBaseInputElementTextFieldSmallEnabled3: makeNodeComponent(
      "signedByBaseInputElementTextFieldSmallEnabled3"
    ),
    leadingArtworkContainer9: makeNodeComponent("leadingArtworkContainer9"),
    leadingArtwork5: makeNodeComponent("leadingArtwork5"),
    leadingLabelContainer9: makeNodeComponent("leadingLabelContainer9"),
    leadingLabel9: makeNodeComponent("leadingLabel9"),
    signedByBaseTypographyLabelSmall5: makeNodeComponent(
      "signedByBaseTypographyLabelSmall5"
    ),
    text55: makeNodeComponent("text55"),
    spacer49: makeNodeComponent("spacer49"),
    inputElementContentText9: makeNodeComponent("inputElementContentText9"),
    signedByBaseInputElementContentTextSmallOff3: makeNodeComponent(
      "signedByBaseInputElementContentTextSmallOff3"
    ),
    text56: makeNodeComponent("text56"),
    trailingLabelEnhancer9: makeNodeComponent("trailingLabelEnhancer9"),
    trailingLabel9: makeNodeComponent("trailingLabel9"),
    signedByBaseTypographyLabelSmall6: makeNodeComponent(
      "signedByBaseTypographyLabelSmall6"
    ),
    text57: makeNodeComponent("text57"),
    spacer50: makeNodeComponent("spacer50"),
    trailingArtworkContainer9: makeNodeComponent("trailingArtworkContainer9"),
    trailingArtwork9: makeNodeComponent("trailingArtwork9"),
    calendar3: makeNodeComponent("calendar3"),
    signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3:
      makeNodeComponent(
        "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled3"
      ),
    leadingArtworkContainer10: makeNodeComponent("leadingArtworkContainer10"),
    text58: makeNodeComponent("text58"),
    leadingLabelContainer10: makeNodeComponent("leadingLabelContainer10"),
    leadingLabel10: makeNodeComponent("leadingLabel10"),
    signedByBaseTypographyLabelXSmall5: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall5"
    ),
    text59: makeNodeComponent("text59"),
    spacer51: makeNodeComponent("spacer51"),
    inputElementContentText10: makeNodeComponent("inputElementContentText10"),
    signedByBaseInputElementContentTextXSmallWebOff3: makeNodeComponent(
      "signedByBaseInputElementContentTextXSmallWebOff3"
    ),
    text60: makeNodeComponent("text60"),
    trailingLabelEnhancer10: makeNodeComponent("trailingLabelEnhancer10"),
    trailingLabel10: makeNodeComponent("trailingLabel10"),
    signedByBaseTypographyLabelXSmall6: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall6"
    ),
    text61: makeNodeComponent("text61"),
    spacer52: makeNodeComponent("spacer52"),
    trailingArtworkContainer10: makeNodeComponent("trailingArtworkContainer10"),
    trailingArtwork10: makeNodeComponent("trailingArtwork10"),
    selectIndicatorContainer5: makeNodeComponent("selectIndicatorContainer5"),
    chevronIcon5: makeNodeComponent("chevronIcon5"),
    inputElementHint5: makeNodeComponent("inputElementHint5"),
    heart21: makeNodeComponent("heart21"),
    hint5: makeNodeComponent("hint5"),
    signedByBaseTypographyParagraphSmall5: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall5"
    ),
    text62: makeNodeComponent("text62"),
    spacer53: makeNodeComponent("spacer53"),
    inputElementSelect3: makeNodeComponent("inputElementSelect3"),
    signedByBaseInputElementSelectMediumSingleDefaultActive3: makeNodeComponent(
      "signedByBaseInputElementSelectMediumSingleDefaultActive3"
    ),
    selectFrame3: makeNodeComponent("selectFrame3"),
    leadingArtworkContainer11: makeNodeComponent("leadingArtworkContainer11"),
    leadingArtwork6: makeNodeComponent("leadingArtwork6"),
    leadingLabelContainer11: makeNodeComponent("leadingLabelContainer11"),
    leadingLabel11: makeNodeComponent("leadingLabel11"),
    signedByBaseTypographyLabelMedium13: makeNodeComponent(
      "signedByBaseTypographyLabelMedium13"
    ),
    text63: makeNodeComponent("text63"),
    spacer54: makeNodeComponent("spacer54"),
    inputElementContentText11: makeNodeComponent("inputElementContentText11"),
    signedByBaseInputElementContentTextMediumOff5: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff5"
    ),
    text64: makeNodeComponent("text64"),
    trailingLabelEnhancer11: makeNodeComponent("trailingLabelEnhancer11"),
    trailingLabel11: makeNodeComponent("trailingLabel11"),
    signedByBaseTypographyLabelMedium14: makeNodeComponent(
      "signedByBaseTypographyLabelMedium14"
    ),
    text65: makeNodeComponent("text65"),
    spacer55: makeNodeComponent("spacer55"),
    trailingArtworkContainer11: makeNodeComponent("trailingArtworkContainer11"),
    trailingArtwork11: makeNodeComponent("trailingArtwork11"),
    selectIndicatorContainer6: makeNodeComponent("selectIndicatorContainer6"),
    chevronIcon6: makeNodeComponent("chevronIcon6"),
    menu3: makeNodeComponent("menu3"),
    signedByBaseMenuListMedium3: makeNodeComponent(
      "signedByBaseMenuListMedium3"
    ),
    menuItem11: makeNodeComponent("menuItem11"),
    signedByBaseMenuItemSearchMediumNoneEnabled3: makeNodeComponent(
      "signedByBaseMenuItemSearchMediumNoneEnabled3"
    ),
    searchField3: makeNodeComponent("searchField3"),
    signedByBaseSearchFieldMediumEnabled3: makeNodeComponent(
      "signedByBaseSearchFieldMediumEnabled3"
    ),
    inputElementLabel3: makeNodeComponent("inputElementLabel3"),
    signedByBaseInputElementLabelMedium3: makeNodeComponent(
      "signedByBaseInputElementLabelMedium3"
    ),
    typography29: makeNodeComponent("typography29"),
    signedByBaseTypographyLabelMedium15: makeNodeComponent(
      "signedByBaseTypographyLabelMedium15"
    ),
    text66: makeNodeComponent("text66"),
    spacer56: makeNodeComponent("spacer56"),
    characterCountFrame3: makeNodeComponent("characterCountFrame3"),
    heart22: makeNodeComponent("heart22"),
    typography30: makeNodeComponent("typography30"),
    signedByBaseTypographyLabelMedium16: makeNodeComponent(
      "signedByBaseTypographyLabelMedium16"
    ),
    text67: makeNodeComponent("text67"),
    spacer57: makeNodeComponent("spacer57"),
    inputElementTextField6: makeNodeComponent("inputElementTextField6"),
    signedByBaseInputElementTextFieldMediumEnabled3: makeNodeComponent(
      "signedByBaseInputElementTextFieldMediumEnabled3"
    ),
    leadingArtworkContainer12: makeNodeComponent("leadingArtworkContainer12"),
    search3: makeNodeComponent("search3"),
    leadingLabelContainer12: makeNodeComponent("leadingLabelContainer12"),
    leadingLabel12: makeNodeComponent("leadingLabel12"),
    signedByBaseTypographyLabelMedium17: makeNodeComponent(
      "signedByBaseTypographyLabelMedium17"
    ),
    text68: makeNodeComponent("text68"),
    spacer58: makeNodeComponent("spacer58"),
    inputElementContentText12: makeNodeComponent("inputElementContentText12"),
    signedByBaseInputElementContentTextMediumOff6: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff6"
    ),
    text69: makeNodeComponent("text69"),
    trailingLabelEnhancer12: makeNodeComponent("trailingLabelEnhancer12"),
    trailingLabel12: makeNodeComponent("trailingLabel12"),
    signedByBaseTypographyLabelMedium18: makeNodeComponent(
      "signedByBaseTypographyLabelMedium18"
    ),
    text70: makeNodeComponent("text70"),
    spacer59: makeNodeComponent("spacer59"),
    trailingArtworkContainer12: makeNodeComponent("trailingArtworkContainer12"),
    trailingArtwork12: makeNodeComponent("trailingArtwork12"),
    inputElementHint6: makeNodeComponent("inputElementHint6"),
    heart23: makeNodeComponent("heart23"),
    hint6: makeNodeComponent("hint6"),
    signedByBaseTypographyParagraphSmall6: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall6"
    ),
    text71: makeNodeComponent("text71"),
    spacer60: makeNodeComponent("spacer60"),
    menuItem12: makeNodeComponent("menuItem12"),
    signedByBaseMenuItemOptionMediumStandardEnabled9: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled9"
    ),
    menuItemControlMediumCheckboxUnchecked9: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked9"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked9: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked9"
    ),
    icon9: makeNodeComponent("icon9"),
    leadingEnhancer9: makeNodeComponent("leadingEnhancer9"),
    heart24: makeNodeComponent("heart24"),
    textFrame9: makeNodeComponent("textFrame9"),
    leadingText9: makeNodeComponent("leadingText9"),
    typography31: makeNodeComponent("typography31"),
    signedByBaseTypographyParagraphMedium25: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium25"
    ),
    text72: makeNodeComponent("text72"),
    spacer61: makeNodeComponent("spacer61"),
    typography32: makeNodeComponent("typography32"),
    signedByBaseTypographyParagraphMedium26: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium26"
    ),
    text73: makeNodeComponent("text73"),
    spacer62: makeNodeComponent("spacer62"),
    typography33: makeNodeComponent("typography33"),
    signedByBaseTypographyParagraphMedium27: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium27"
    ),
    spacer63: makeNodeComponent("spacer63"),
    trailingEnhancer9: makeNodeComponent("trailingEnhancer9"),
    heart25: makeNodeComponent("heart25"),
    menuItem13: makeNodeComponent("menuItem13"),
    signedByBaseMenuItemOptionMediumStandardEnabled10: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled10"
    ),
    menuItemControlMediumCheckboxUnchecked10: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked10"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked10: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked10"
    ),
    icon10: makeNodeComponent("icon10"),
    leadingEnhancer10: makeNodeComponent("leadingEnhancer10"),
    heart26: makeNodeComponent("heart26"),
    textFrame10: makeNodeComponent("textFrame10"),
    leadingText10: makeNodeComponent("leadingText10"),
    typography34: makeNodeComponent("typography34"),
    signedByBaseTypographyParagraphMedium28: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium28"
    ),
    text74: makeNodeComponent("text74"),
    spacer64: makeNodeComponent("spacer64"),
    typography35: makeNodeComponent("typography35"),
    signedByBaseTypographyParagraphMedium29: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium29"
    ),
    text75: makeNodeComponent("text75"),
    spacer65: makeNodeComponent("spacer65"),
    typography36: makeNodeComponent("typography36"),
    signedByBaseTypographyParagraphMedium30: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium30"
    ),
    spacer66: makeNodeComponent("spacer66"),
    trailingEnhancer10: makeNodeComponent("trailingEnhancer10"),
    checkmarkSmall3: makeNodeComponent("checkmarkSmall3"),
    menuItem14: makeNodeComponent("menuItem14"),
    signedByBaseMenuItemOptionMediumStandardEnabled11: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled11"
    ),
    menuItemControlMediumCheckboxUnchecked11: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked11"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked11: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked11"
    ),
    icon11: makeNodeComponent("icon11"),
    leadingEnhancer11: makeNodeComponent("leadingEnhancer11"),
    heart27: makeNodeComponent("heart27"),
    textFrame11: makeNodeComponent("textFrame11"),
    leadingText11: makeNodeComponent("leadingText11"),
    typography37: makeNodeComponent("typography37"),
    signedByBaseTypographyParagraphMedium31: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium31"
    ),
    text76: makeNodeComponent("text76"),
    spacer67: makeNodeComponent("spacer67"),
    typography38: makeNodeComponent("typography38"),
    signedByBaseTypographyParagraphMedium32: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium32"
    ),
    text77: makeNodeComponent("text77"),
    spacer68: makeNodeComponent("spacer68"),
    typography39: makeNodeComponent("typography39"),
    signedByBaseTypographyParagraphMedium33: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium33"
    ),
    spacer69: makeNodeComponent("spacer69"),
    trailingEnhancer11: makeNodeComponent("trailingEnhancer11"),
    heart28: makeNodeComponent("heart28"),
    menuItem15: makeNodeComponent("menuItem15"),
    signedByBaseMenuItemOptionMediumStandardEnabled12: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled12"
    ),
    menuItemControlMediumCheckboxUnchecked12: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked12"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked12: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked12"
    ),
    icon12: makeNodeComponent("icon12"),
    leadingEnhancer12: makeNodeComponent("leadingEnhancer12"),
    heart29: makeNodeComponent("heart29"),
    textFrame12: makeNodeComponent("textFrame12"),
    leadingText12: makeNodeComponent("leadingText12"),
    typography40: makeNodeComponent("typography40"),
    signedByBaseTypographyParagraphMedium34: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium34"
    ),
    text78: makeNodeComponent("text78"),
    spacer70: makeNodeComponent("spacer70"),
    typography41: makeNodeComponent("typography41"),
    signedByBaseTypographyParagraphMedium35: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium35"
    ),
    text79: makeNodeComponent("text79"),
    spacer71: makeNodeComponent("spacer71"),
    typography42: makeNodeComponent("typography42"),
    signedByBaseTypographyParagraphMedium36: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium36"
    ),
    spacer72: makeNodeComponent("spacer72"),
    trailingEnhancer12: makeNodeComponent("trailingEnhancer12"),
    heart30: makeNodeComponent("heart30"),
    scrollBar3: makeNodeComponent("scrollBar3"),
    model3: makeNodeComponent("model3"),
    buttons3: makeNodeComponent("buttons3"),
    button9: makeNodeComponent("button9"),
    frame1073713926: makeNodeComponent("frame1073713926"),
    frame1073713932: makeNodeComponent("frame1073713932"),
    button10: makeNodeComponent("button10"),
    button11: makeNodeComponent("button11"),
    button12: makeNodeComponent("button12"),
    editRetex2: makeNodeComponent("editRetex2"),
    frame1437254017: makeNodeComponent("frame1437254017"),
    name3: makeNodeComponent("name3"),
    frame1437254020: makeNodeComponent("frame1437254020"),
    form2: makeNodeComponent("form2"),
    textArea2: makeNodeComponent("textArea2"),
    select3: makeNodeComponent("select3"),
    content2: makeNodeComponent("content2"),
    titre2: makeNodeComponent("titre2"),
    texinput22: makeNodeComponent("texinput22"),
    date2: makeNodeComponent("date2"),
    label7: makeNodeComponent("label7"),
    timePicker2: makeNodeComponent("timePicker2"),
    type2: makeNodeComponent("type2"),
    budget2: makeNodeComponent("budget2"),
    comments2: makeNodeComponent("comments2"),
    input6: makeNodeComponent("input6"),
    name4: makeNodeComponent("name4"),
    datePickerWeb2: makeNodeComponent("datePickerWeb2"),
    inputSelect2: makeNodeComponent("inputSelect2"),
    signedByBaseFieldGroupSmall2: makeNodeComponent(
      "signedByBaseFieldGroupSmall2"
    ),
    endDateCalendar2: makeNodeComponent("endDateCalendar2"),
    inputElementTextField3: makeNodeComponent("inputElementTextField3"),
    signedByBaseInputElementTextFieldSmallEnabled2: makeNodeComponent(
      "signedByBaseInputElementTextFieldSmallEnabled2"
    ),
    leadingArtworkContainer5: makeNodeComponent("leadingArtworkContainer5"),
    leadingArtwork3: makeNodeComponent("leadingArtwork3"),
    leadingLabelContainer5: makeNodeComponent("leadingLabelContainer5"),
    leadingLabel5: makeNodeComponent("leadingLabel5"),
    signedByBaseTypographyLabelSmall3: makeNodeComponent(
      "signedByBaseTypographyLabelSmall3"
    ),
    text30: makeNodeComponent("text30"),
    spacer23: makeNodeComponent("spacer23"),
    inputElementContentText5: makeNodeComponent("inputElementContentText5"),
    signedByBaseInputElementContentTextSmallOff2: makeNodeComponent(
      "signedByBaseInputElementContentTextSmallOff2"
    ),
    text31: makeNodeComponent("text31"),
    trailingLabelEnhancer5: makeNodeComponent("trailingLabelEnhancer5"),
    trailingLabel5: makeNodeComponent("trailingLabel5"),
    signedByBaseTypographyLabelSmall4: makeNodeComponent(
      "signedByBaseTypographyLabelSmall4"
    ),
    text32: makeNodeComponent("text32"),
    spacer24: makeNodeComponent("spacer24"),
    trailingArtworkContainer5: makeNodeComponent("trailingArtworkContainer5"),
    trailingArtwork5: makeNodeComponent("trailingArtwork5"),
    calendar2: makeNodeComponent("calendar2"),
    signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2:
      makeNodeComponent(
        "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled2"
      ),
    leadingArtworkContainer6: makeNodeComponent("leadingArtworkContainer6"),
    text33: makeNodeComponent("text33"),
    leadingLabelContainer6: makeNodeComponent("leadingLabelContainer6"),
    leadingLabel6: makeNodeComponent("leadingLabel6"),
    signedByBaseTypographyLabelXSmall3: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall3"
    ),
    text34: makeNodeComponent("text34"),
    spacer25: makeNodeComponent("spacer25"),
    inputElementContentText6: makeNodeComponent("inputElementContentText6"),
    signedByBaseInputElementContentTextXSmallWebOff2: makeNodeComponent(
      "signedByBaseInputElementContentTextXSmallWebOff2"
    ),
    text35: makeNodeComponent("text35"),
    trailingLabelEnhancer6: makeNodeComponent("trailingLabelEnhancer6"),
    trailingLabel6: makeNodeComponent("trailingLabel6"),
    signedByBaseTypographyLabelXSmall4: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall4"
    ),
    text36: makeNodeComponent("text36"),
    spacer26: makeNodeComponent("spacer26"),
    trailingArtworkContainer6: makeNodeComponent("trailingArtworkContainer6"),
    trailingArtwork6: makeNodeComponent("trailingArtwork6"),
    selectIndicatorContainer3: makeNodeComponent("selectIndicatorContainer3"),
    chevronIcon3: makeNodeComponent("chevronIcon3"),
    inputElementHint3: makeNodeComponent("inputElementHint3"),
    heart11: makeNodeComponent("heart11"),
    hint3: makeNodeComponent("hint3"),
    signedByBaseTypographyParagraphSmall3: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall3"
    ),
    text37: makeNodeComponent("text37"),
    spacer30: makeNodeComponent("spacer30"),
    inputElementSelect2: makeNodeComponent("inputElementSelect2"),
    signedByBaseInputElementSelectMediumSingleDefaultActive2: makeNodeComponent(
      "signedByBaseInputElementSelectMediumSingleDefaultActive2"
    ),
    selectFrame2: makeNodeComponent("selectFrame2"),
    leadingArtworkContainer7: makeNodeComponent("leadingArtworkContainer7"),
    leadingArtwork4: makeNodeComponent("leadingArtwork4"),
    leadingLabelContainer7: makeNodeComponent("leadingLabelContainer7"),
    leadingLabel7: makeNodeComponent("leadingLabel7"),
    signedByBaseTypographyLabelMedium7: makeNodeComponent(
      "signedByBaseTypographyLabelMedium7"
    ),
    text38: makeNodeComponent("text38"),
    spacer27: makeNodeComponent("spacer27"),
    inputElementContentText7: makeNodeComponent("inputElementContentText7"),
    signedByBaseInputElementContentTextMediumOff3: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff3"
    ),
    text39: makeNodeComponent("text39"),
    trailingLabelEnhancer7: makeNodeComponent("trailingLabelEnhancer7"),
    trailingLabel7: makeNodeComponent("trailingLabel7"),
    signedByBaseTypographyLabelMedium8: makeNodeComponent(
      "signedByBaseTypographyLabelMedium8"
    ),
    text40: makeNodeComponent("text40"),
    spacer31: makeNodeComponent("spacer31"),
    trailingArtworkContainer7: makeNodeComponent("trailingArtworkContainer7"),
    trailingArtwork7: makeNodeComponent("trailingArtwork7"),
    selectIndicatorContainer4: makeNodeComponent("selectIndicatorContainer4"),
    chevronIcon4: makeNodeComponent("chevronIcon4"),
    menu2: makeNodeComponent("menu2"),
    signedByBaseMenuListMedium2: makeNodeComponent(
      "signedByBaseMenuListMedium2"
    ),
    menuItem6: makeNodeComponent("menuItem6"),
    signedByBaseMenuItemSearchMediumNoneEnabled2: makeNodeComponent(
      "signedByBaseMenuItemSearchMediumNoneEnabled2"
    ),
    searchField2: makeNodeComponent("searchField2"),
    signedByBaseSearchFieldMediumEnabled2: makeNodeComponent(
      "signedByBaseSearchFieldMediumEnabled2"
    ),
    inputElementLabel2: makeNodeComponent("inputElementLabel2"),
    signedByBaseInputElementLabelMedium2: makeNodeComponent(
      "signedByBaseInputElementLabelMedium2"
    ),
    typography15: makeNodeComponent("typography15"),
    signedByBaseTypographyLabelMedium9: makeNodeComponent(
      "signedByBaseTypographyLabelMedium9"
    ),
    text41: makeNodeComponent("text41"),
    spacer32: makeNodeComponent("spacer32"),
    characterCountFrame2: makeNodeComponent("characterCountFrame2"),
    heart12: makeNodeComponent("heart12"),
    typography16: makeNodeComponent("typography16"),
    signedByBaseTypographyLabelMedium10: makeNodeComponent(
      "signedByBaseTypographyLabelMedium10"
    ),
    text42: makeNodeComponent("text42"),
    spacer33: makeNodeComponent("spacer33"),
    inputElementTextField4: makeNodeComponent("inputElementTextField4"),
    signedByBaseInputElementTextFieldMediumEnabled2: makeNodeComponent(
      "signedByBaseInputElementTextFieldMediumEnabled2"
    ),
    leadingArtworkContainer8: makeNodeComponent("leadingArtworkContainer8"),
    search2: makeNodeComponent("search2"),
    leadingLabelContainer8: makeNodeComponent("leadingLabelContainer8"),
    leadingLabel8: makeNodeComponent("leadingLabel8"),
    signedByBaseTypographyLabelMedium11: makeNodeComponent(
      "signedByBaseTypographyLabelMedium11"
    ),
    text43: makeNodeComponent("text43"),
    spacer34: makeNodeComponent("spacer34"),
    inputElementContentText8: makeNodeComponent("inputElementContentText8"),
    signedByBaseInputElementContentTextMediumOff4: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff4"
    ),
    text44: makeNodeComponent("text44"),
    trailingLabelEnhancer8: makeNodeComponent("trailingLabelEnhancer8"),
    trailingLabel8: makeNodeComponent("trailingLabel8"),
    signedByBaseTypographyLabelMedium12: makeNodeComponent(
      "signedByBaseTypographyLabelMedium12"
    ),
    text45: makeNodeComponent("text45"),
    spacer35: makeNodeComponent("spacer35"),
    trailingArtworkContainer8: makeNodeComponent("trailingArtworkContainer8"),
    trailingArtwork8: makeNodeComponent("trailingArtwork8"),
    inputElementHint4: makeNodeComponent("inputElementHint4"),
    heart13: makeNodeComponent("heart13"),
    hint4: makeNodeComponent("hint4"),
    signedByBaseTypographyParagraphSmall4: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall4"
    ),
    text46: makeNodeComponent("text46"),
    spacer36: makeNodeComponent("spacer36"),
    menuItem7: makeNodeComponent("menuItem7"),
    signedByBaseMenuItemOptionMediumStandardEnabled5: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled5"
    ),
    menuItemControlMediumCheckboxUnchecked5: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked5"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked5: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked5"
    ),
    icon5: makeNodeComponent("icon5"),
    leadingEnhancer5: makeNodeComponent("leadingEnhancer5"),
    heart14: makeNodeComponent("heart14"),
    textFrame5: makeNodeComponent("textFrame5"),
    leadingText5: makeNodeComponent("leadingText5"),
    typography17: makeNodeComponent("typography17"),
    signedByBaseTypographyParagraphMedium13: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium13"
    ),
    text47: makeNodeComponent("text47"),
    spacer37: makeNodeComponent("spacer37"),
    typography18: makeNodeComponent("typography18"),
    signedByBaseTypographyParagraphMedium14: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium14"
    ),
    text48: makeNodeComponent("text48"),
    spacer38: makeNodeComponent("spacer38"),
    typography19: makeNodeComponent("typography19"),
    signedByBaseTypographyParagraphMedium15: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium15"
    ),
    spacer39: makeNodeComponent("spacer39"),
    trailingEnhancer5: makeNodeComponent("trailingEnhancer5"),
    heart15: makeNodeComponent("heart15"),
    menuItem8: makeNodeComponent("menuItem8"),
    signedByBaseMenuItemOptionMediumStandardEnabled6: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled6"
    ),
    menuItemControlMediumCheckboxUnchecked6: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked6"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked6: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked6"
    ),
    icon6: makeNodeComponent("icon6"),
    leadingEnhancer6: makeNodeComponent("leadingEnhancer6"),
    heart16: makeNodeComponent("heart16"),
    textFrame6: makeNodeComponent("textFrame6"),
    leadingText6: makeNodeComponent("leadingText6"),
    typography20: makeNodeComponent("typography20"),
    signedByBaseTypographyParagraphMedium16: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium16"
    ),
    text49: makeNodeComponent("text49"),
    spacer40: makeNodeComponent("spacer40"),
    typography21: makeNodeComponent("typography21"),
    signedByBaseTypographyParagraphMedium17: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium17"
    ),
    text50: makeNodeComponent("text50"),
    spacer41: makeNodeComponent("spacer41"),
    typography22: makeNodeComponent("typography22"),
    signedByBaseTypographyParagraphMedium18: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium18"
    ),
    spacer42: makeNodeComponent("spacer42"),
    trailingEnhancer6: makeNodeComponent("trailingEnhancer6"),
    checkmarkSmall2: makeNodeComponent("checkmarkSmall2"),
    menuItem9: makeNodeComponent("menuItem9"),
    signedByBaseMenuItemOptionMediumStandardEnabled7: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled7"
    ),
    menuItemControlMediumCheckboxUnchecked7: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked7"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked7: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked7"
    ),
    icon7: makeNodeComponent("icon7"),
    leadingEnhancer7: makeNodeComponent("leadingEnhancer7"),
    heart17: makeNodeComponent("heart17"),
    textFrame7: makeNodeComponent("textFrame7"),
    leadingText7: makeNodeComponent("leadingText7"),
    typography23: makeNodeComponent("typography23"),
    signedByBaseTypographyParagraphMedium19: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium19"
    ),
    text51: makeNodeComponent("text51"),
    spacer43: makeNodeComponent("spacer43"),
    typography24: makeNodeComponent("typography24"),
    signedByBaseTypographyParagraphMedium20: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium20"
    ),
    text52: makeNodeComponent("text52"),
    spacer44: makeNodeComponent("spacer44"),
    typography25: makeNodeComponent("typography25"),
    signedByBaseTypographyParagraphMedium21: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium21"
    ),
    spacer45: makeNodeComponent("spacer45"),
    trailingEnhancer7: makeNodeComponent("trailingEnhancer7"),
    heart18: makeNodeComponent("heart18"),
    menuItem10: makeNodeComponent("menuItem10"),
    signedByBaseMenuItemOptionMediumStandardEnabled8: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled8"
    ),
    menuItemControlMediumCheckboxUnchecked8: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked8"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked8: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked8"
    ),
    icon8: makeNodeComponent("icon8"),
    leadingEnhancer8: makeNodeComponent("leadingEnhancer8"),
    heart19: makeNodeComponent("heart19"),
    textFrame8: makeNodeComponent("textFrame8"),
    leadingText8: makeNodeComponent("leadingText8"),
    typography26: makeNodeComponent("typography26"),
    signedByBaseTypographyParagraphMedium22: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium22"
    ),
    text53: makeNodeComponent("text53"),
    spacer46: makeNodeComponent("spacer46"),
    typography27: makeNodeComponent("typography27"),
    signedByBaseTypographyParagraphMedium23: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium23"
    ),
    text54: makeNodeComponent("text54"),
    spacer47: makeNodeComponent("spacer47"),
    typography28: makeNodeComponent("typography28"),
    signedByBaseTypographyParagraphMedium24: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium24"
    ),
    spacer48: makeNodeComponent("spacer48"),
    trailingEnhancer8: makeNodeComponent("trailingEnhancer8"),
    heart20: makeNodeComponent("heart20"),
    scrollBar2: makeNodeComponent("scrollBar2"),
    model2: makeNodeComponent("model2"),
    buttons2: makeNodeComponent("buttons2"),
    button5: makeNodeComponent("button5"),
    frame1073713925: makeNodeComponent("frame1073713925"),
    frame1073713931: makeNodeComponent("frame1073713931"),
    button6: makeNodeComponent("button6"),
    button7: makeNodeComponent("button7"),
    button8: makeNodeComponent("button8"),
    newRetex2: makeNodeComponent("newRetex2"),
    frame1437254016: makeNodeComponent("frame1437254016"),
    _name: makeNodeComponent("name"),
    frame1437254019: makeNodeComponent("frame1437254019"),
    form: makeNodeComponent("form"),
    textArea: makeNodeComponent("textArea"),
    select2: makeNodeComponent("select2"),
    content: makeNodeComponent("content"),
    titre: makeNodeComponent("titre"),
    texinput2: makeNodeComponent("texinput2"),
    date: makeNodeComponent("date"),
    label6: makeNodeComponent("label6"),
    timePicker: makeNodeComponent("timePicker"),
    type: makeNodeComponent("type"),
    budget: makeNodeComponent("budget"),
    comments: makeNodeComponent("comments"),
    input5: makeNodeComponent("input5"),
    name2: makeNodeComponent("name2"),
    datePickerWeb: makeNodeComponent("datePickerWeb"),
    inputSelect: makeNodeComponent("inputSelect"),
    signedByBaseFieldGroupSmall: makeNodeComponent(
      "signedByBaseFieldGroupSmall"
    ),
    endDateCalendar: makeNodeComponent("endDateCalendar"),
    inputElementTextField: makeNodeComponent("inputElementTextField"),
    signedByBaseInputElementTextFieldSmallEnabled: makeNodeComponent(
      "signedByBaseInputElementTextFieldSmallEnabled"
    ),
    leadingArtworkContainer: makeNodeComponent("leadingArtworkContainer"),
    leadingArtwork: makeNodeComponent("leadingArtwork"),
    leadingLabelContainer: makeNodeComponent("leadingLabelContainer"),
    leadingLabel: makeNodeComponent("leadingLabel"),
    signedByBaseTypographyLabelSmall: makeNodeComponent(
      "signedByBaseTypographyLabelSmall"
    ),
    text5: makeNodeComponent("text5"),
    spacer: makeNodeComponent("spacer"),
    inputElementContentText: makeNodeComponent("inputElementContentText"),
    signedByBaseInputElementContentTextSmallOff: makeNodeComponent(
      "signedByBaseInputElementContentTextSmallOff"
    ),
    text6: makeNodeComponent("text6"),
    trailingLabelEnhancer: makeNodeComponent("trailingLabelEnhancer"),
    trailingLabel: makeNodeComponent("trailingLabel"),
    signedByBaseTypographyLabelSmall2: makeNodeComponent(
      "signedByBaseTypographyLabelSmall2"
    ),
    text7: makeNodeComponent("text7"),
    spacer2: makeNodeComponent("spacer2"),
    trailingArtworkContainer: makeNodeComponent("trailingArtworkContainer"),
    trailingArtwork: makeNodeComponent("trailingArtwork"),
    calendar: makeNodeComponent("calendar"),
    signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled:
      makeNodeComponent(
        "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled"
      ),
    leadingArtworkContainer2: makeNodeComponent("leadingArtworkContainer2"),
    text8: makeNodeComponent("text8"),
    leadingLabelContainer2: makeNodeComponent("leadingLabelContainer2"),
    leadingLabel2: makeNodeComponent("leadingLabel2"),
    signedByBaseTypographyLabelXSmall: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall"
    ),
    text9: makeNodeComponent("text9"),
    spacer3: makeNodeComponent("spacer3"),
    inputElementContentText2: makeNodeComponent("inputElementContentText2"),
    signedByBaseInputElementContentTextXSmallWebOff: makeNodeComponent(
      "signedByBaseInputElementContentTextXSmallWebOff"
    ),
    text10: makeNodeComponent("text10"),
    trailingLabelEnhancer2: makeNodeComponent("trailingLabelEnhancer2"),
    trailingLabel2: makeNodeComponent("trailingLabel2"),
    signedByBaseTypographyLabelXSmall2: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall2"
    ),
    text11: makeNodeComponent("text11"),
    spacer4: makeNodeComponent("spacer4"),
    trailingArtworkContainer2: makeNodeComponent("trailingArtworkContainer2"),
    trailingArtwork2: makeNodeComponent("trailingArtwork2"),
    selectIndicatorContainer: makeNodeComponent("selectIndicatorContainer"),
    chevronIcon: makeNodeComponent("chevronIcon"),
    inputElementHint: makeNodeComponent("inputElementHint"),
    heart: makeNodeComponent("heart"),
    hint: makeNodeComponent("hint"),
    signedByBaseTypographyParagraphSmall: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall"
    ),
    text12: makeNodeComponent("text12"),
    spacer28: makeNodeComponent("spacer28"),
    inputElementSelect: makeNodeComponent("inputElementSelect"),
    signedByBaseInputElementSelectMediumSingleDefaultActive: makeNodeComponent(
      "signedByBaseInputElementSelectMediumSingleDefaultActive"
    ),
    selectFrame: makeNodeComponent("selectFrame"),
    leadingArtworkContainer3: makeNodeComponent("leadingArtworkContainer3"),
    leadingArtwork2: makeNodeComponent("leadingArtwork2"),
    leadingLabelContainer3: makeNodeComponent("leadingLabelContainer3"),
    leadingLabel3: makeNodeComponent("leadingLabel3"),
    signedByBaseTypographyLabelMedium: makeNodeComponent(
      "signedByBaseTypographyLabelMedium"
    ),
    text13: makeNodeComponent("text13"),
    spacer5: makeNodeComponent("spacer5"),
    inputElementContentText3: makeNodeComponent("inputElementContentText3"),
    signedByBaseInputElementContentTextMediumOff: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff"
    ),
    text14: makeNodeComponent("text14"),
    trailingLabelEnhancer3: makeNodeComponent("trailingLabelEnhancer3"),
    trailingLabel3: makeNodeComponent("trailingLabel3"),
    signedByBaseTypographyLabelMedium2: makeNodeComponent(
      "signedByBaseTypographyLabelMedium2"
    ),
    text15: makeNodeComponent("text15"),
    spacer6: makeNodeComponent("spacer6"),
    trailingArtworkContainer3: makeNodeComponent("trailingArtworkContainer3"),
    trailingArtwork3: makeNodeComponent("trailingArtwork3"),
    selectIndicatorContainer2: makeNodeComponent("selectIndicatorContainer2"),
    chevronIcon2: makeNodeComponent("chevronIcon2"),
    menu: makeNodeComponent("menu"),
    signedByBaseMenuListMedium: makeNodeComponent("signedByBaseMenuListMedium"),
    menuItem: makeNodeComponent("menuItem"),
    signedByBaseMenuItemSearchMediumNoneEnabled: makeNodeComponent(
      "signedByBaseMenuItemSearchMediumNoneEnabled"
    ),
    searchField: makeNodeComponent("searchField"),
    signedByBaseSearchFieldMediumEnabled: makeNodeComponent(
      "signedByBaseSearchFieldMediumEnabled"
    ),
    inputElementLabel: makeNodeComponent("inputElementLabel"),
    signedByBaseInputElementLabelMedium: makeNodeComponent(
      "signedByBaseInputElementLabelMedium"
    ),
    typography: makeNodeComponent("typography"),
    signedByBaseTypographyLabelMedium3: makeNodeComponent(
      "signedByBaseTypographyLabelMedium3"
    ),
    text16: makeNodeComponent("text16"),
    spacer7: makeNodeComponent("spacer7"),
    characterCountFrame: makeNodeComponent("characterCountFrame"),
    heart2: makeNodeComponent("heart2"),
    typography2: makeNodeComponent("typography2"),
    signedByBaseTypographyLabelMedium4: makeNodeComponent(
      "signedByBaseTypographyLabelMedium4"
    ),
    text17: makeNodeComponent("text17"),
    spacer8: makeNodeComponent("spacer8"),
    inputElementTextField2: makeNodeComponent("inputElementTextField2"),
    signedByBaseInputElementTextFieldMediumEnabled: makeNodeComponent(
      "signedByBaseInputElementTextFieldMediumEnabled"
    ),
    leadingArtworkContainer4: makeNodeComponent("leadingArtworkContainer4"),
    search: makeNodeComponent("search"),
    leadingLabelContainer4: makeNodeComponent("leadingLabelContainer4"),
    leadingLabel4: makeNodeComponent("leadingLabel4"),
    signedByBaseTypographyLabelMedium5: makeNodeComponent(
      "signedByBaseTypographyLabelMedium5"
    ),
    text18: makeNodeComponent("text18"),
    spacer9: makeNodeComponent("spacer9"),
    inputElementContentText4: makeNodeComponent("inputElementContentText4"),
    signedByBaseInputElementContentTextMediumOff2: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff2"
    ),
    text19: makeNodeComponent("text19"),
    trailingLabelEnhancer4: makeNodeComponent("trailingLabelEnhancer4"),
    trailingLabel4: makeNodeComponent("trailingLabel4"),
    signedByBaseTypographyLabelMedium6: makeNodeComponent(
      "signedByBaseTypographyLabelMedium6"
    ),
    text20: makeNodeComponent("text20"),
    spacer10: makeNodeComponent("spacer10"),
    trailingArtworkContainer4: makeNodeComponent("trailingArtworkContainer4"),
    trailingArtwork4: makeNodeComponent("trailingArtwork4"),
    inputElementHint2: makeNodeComponent("inputElementHint2"),
    heart3: makeNodeComponent("heart3"),
    hint2: makeNodeComponent("hint2"),
    signedByBaseTypographyParagraphSmall2: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall2"
    ),
    text21: makeNodeComponent("text21"),
    spacer29: makeNodeComponent("spacer29"),
    menuItem2: makeNodeComponent("menuItem2"),
    signedByBaseMenuItemOptionMediumStandardEnabled: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled"
    ),
    menuItemControlMediumCheckboxUnchecked: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked"
    ),
    icon: makeNodeComponent("icon"),
    leadingEnhancer: makeNodeComponent("leadingEnhancer"),
    heart4: makeNodeComponent("heart4"),
    textFrame: makeNodeComponent("textFrame"),
    leadingText: makeNodeComponent("leadingText"),
    typography3: makeNodeComponent("typography3"),
    signedByBaseTypographyParagraphMedium: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium"
    ),
    text22: makeNodeComponent("text22"),
    spacer11: makeNodeComponent("spacer11"),
    typography4: makeNodeComponent("typography4"),
    signedByBaseTypographyParagraphMedium2: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium2"
    ),
    text23: makeNodeComponent("text23"),
    spacer12: makeNodeComponent("spacer12"),
    typography5: makeNodeComponent("typography5"),
    signedByBaseTypographyParagraphMedium3: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium3"
    ),
    spacer13: makeNodeComponent("spacer13"),
    trailingEnhancer: makeNodeComponent("trailingEnhancer"),
    heart5: makeNodeComponent("heart5"),
    menuItem3: makeNodeComponent("menuItem3"),
    signedByBaseMenuItemOptionMediumStandardEnabled2: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled2"
    ),
    menuItemControlMediumCheckboxUnchecked2: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked2"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked2: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked2"
    ),
    icon2: makeNodeComponent("icon2"),
    leadingEnhancer2: makeNodeComponent("leadingEnhancer2"),
    heart6: makeNodeComponent("heart6"),
    textFrame2: makeNodeComponent("textFrame2"),
    leadingText2: makeNodeComponent("leadingText2"),
    typography6: makeNodeComponent("typography6"),
    signedByBaseTypographyParagraphMedium4: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium4"
    ),
    text24: makeNodeComponent("text24"),
    spacer14: makeNodeComponent("spacer14"),
    typography7: makeNodeComponent("typography7"),
    signedByBaseTypographyParagraphMedium5: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium5"
    ),
    text25: makeNodeComponent("text25"),
    spacer15: makeNodeComponent("spacer15"),
    typography8: makeNodeComponent("typography8"),
    signedByBaseTypographyParagraphMedium6: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium6"
    ),
    spacer16: makeNodeComponent("spacer16"),
    trailingEnhancer2: makeNodeComponent("trailingEnhancer2"),
    checkmarkSmall: makeNodeComponent("checkmarkSmall"),
    menuItem4: makeNodeComponent("menuItem4"),
    signedByBaseMenuItemOptionMediumStandardEnabled3: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled3"
    ),
    menuItemControlMediumCheckboxUnchecked3: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked3"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked3: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked3"
    ),
    icon3: makeNodeComponent("icon3"),
    leadingEnhancer3: makeNodeComponent("leadingEnhancer3"),
    heart7: makeNodeComponent("heart7"),
    textFrame3: makeNodeComponent("textFrame3"),
    leadingText3: makeNodeComponent("leadingText3"),
    typography9: makeNodeComponent("typography9"),
    signedByBaseTypographyParagraphMedium7: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium7"
    ),
    text26: makeNodeComponent("text26"),
    spacer17: makeNodeComponent("spacer17"),
    typography10: makeNodeComponent("typography10"),
    signedByBaseTypographyParagraphMedium8: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium8"
    ),
    text27: makeNodeComponent("text27"),
    spacer18: makeNodeComponent("spacer18"),
    typography11: makeNodeComponent("typography11"),
    signedByBaseTypographyParagraphMedium9: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium9"
    ),
    spacer19: makeNodeComponent("spacer19"),
    trailingEnhancer3: makeNodeComponent("trailingEnhancer3"),
    heart8: makeNodeComponent("heart8"),
    menuItem5: makeNodeComponent("menuItem5"),
    signedByBaseMenuItemOptionMediumStandardEnabled4: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled4"
    ),
    menuItemControlMediumCheckboxUnchecked4: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked4"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked4: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked4"
    ),
    icon4: makeNodeComponent("icon4"),
    leadingEnhancer4: makeNodeComponent("leadingEnhancer4"),
    heart9: makeNodeComponent("heart9"),
    textFrame4: makeNodeComponent("textFrame4"),
    leadingText4: makeNodeComponent("leadingText4"),
    typography12: makeNodeComponent("typography12"),
    signedByBaseTypographyParagraphMedium10: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium10"
    ),
    text28: makeNodeComponent("text28"),
    spacer20: makeNodeComponent("spacer20"),
    typography13: makeNodeComponent("typography13"),
    signedByBaseTypographyParagraphMedium11: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium11"
    ),
    text29: makeNodeComponent("text29"),
    spacer21: makeNodeComponent("spacer21"),
    typography14: makeNodeComponent("typography14"),
    signedByBaseTypographyParagraphMedium12: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium12"
    ),
    spacer22: makeNodeComponent("spacer22"),
    trailingEnhancer4: makeNodeComponent("trailingEnhancer4"),
    heart10: makeNodeComponent("heart10"),
    scrollBar: makeNodeComponent("scrollBar"),
    model: makeNodeComponent("model"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    frame1073713924: makeNodeComponent("frame1073713924"),
    frame1073713930: makeNodeComponent("frame1073713930"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    button4: makeNodeComponent("button4"),
    accueilDashboard: makeNodeComponent("accueilDashboard"),
    leftMenu: makeNodeComponent("leftMenu"),
    main: makeNodeComponent("main"),
    header: makeNodeComponent("header"),
    frame1437253918: makeNodeComponent("frame1437253918"),
    filters2: makeNodeComponent("filters2"),
    buttonFilter2: makeNodeComponent("buttonFilter2"),
    buttonAdd2: makeNodeComponent("buttonAdd2"),
    retexMenu: makeNodeComponent("retexMenu"),
    buttonBase: makeNodeComponent("buttonBase"),
    text: makeNodeComponent("text"),
    subTabs: makeNodeComponent("subTabs"),
    metricItem: makeNodeComponent("metricItem"),
    headingAndDropdown: makeNodeComponent("headingAndDropdown"),
    heading: makeNodeComponent("heading"),
    numberAndChart: makeNodeComponent("numberAndChart"),
    numberAndBadge: makeNodeComponent("numberAndBadge"),
    number: makeNodeComponent("number"),
    frame1437254335: makeNodeComponent("frame1437254335"),
    number2: makeNodeComponent("number2"),
    number3: makeNodeComponent("number3"),
    subgroups: makeNodeComponent("subgroups"),
    service: makeNodeComponent("service"),
    metricItem4: makeNodeComponent("metricItem4"),
    headingAndDropdown4: makeNodeComponent("headingAndDropdown4"),
    heading4: makeNodeComponent("heading4"),
    numberAndChart4: makeNodeComponent("numberAndChart4"),
    numberAndBadge4: makeNodeComponent("numberAndBadge4"),
    number4: makeNodeComponent("number4"),
    service2: makeNodeComponent("service2"),
    faitsMarquant: makeNodeComponent("faitsMarquant"),
    subgroups2: makeNodeComponent("subgroups2"),
    service3: makeNodeComponent("service3"),
    kanban: makeNodeComponent("kanban"),
    bottomMenu: makeNodeComponent("bottomMenu"),

    // Metadata about props expected for PlasmicBilanAnalytics
    internalVariantProps: PlasmicBilanAnalytics__VariantProps,
    internalArgProps: PlasmicBilanAnalytics__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Bilan Opérations",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBilanAnalytics;
/* prettier-ignore-end */
