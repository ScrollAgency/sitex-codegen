/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: PS6da-nNVzzU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Login } from "../../../plasmic-library/authentication/Login"; // plasmic-import: TpxA4X6Jm8HW/codeComponent

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: PS6da-nNVzzU/css

import Ellipse187Icon from "./icons/PlasmicIcon__Ellipse187"; // plasmic-import: HCPsunS-fmP6/icon
import Ellipse192Icon from "./icons/PlasmicIcon__Ellipse192"; // plasmic-import: RdQSueESMBau/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  global?: Flex__<"div">;
  logo?: Flex__<"div">;
  imageLogo?: Flex__<"div">;
  frame64?: Flex__<"div">;
  rectangle134?: Flex__<"div">;
  frame66?: Flex__<"div">;
  rectangle135?: Flex__<"div">;
  text?: Flex__<"div">;
  loginForm?: Flex__<typeof Login>;
};

export interface DefaultLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginForm.email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loginForm.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"global"}
            data-plasmic-override={overrides.global}
            className={classNames(projectcss.all, sty.global)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qv84)}>
              <div
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(projectcss.all, sty.logo)}
              >
                <div
                  data-plasmic-name={"imageLogo"}
                  data-plasmic-override={overrides.imageLogo}
                  className={classNames(projectcss.all, sty.imageLogo)}
                >
                  <div
                    data-plasmic-name={"frame64"}
                    data-plasmic-override={overrides.frame64}
                    className={classNames(projectcss.all, sty.frame64)}
                  >
                    <div
                      data-plasmic-name={"rectangle134"}
                      data-plasmic-override={overrides.rectangle134}
                      className={classNames(projectcss.all, sty.rectangle134)}
                    />
                  </div>
                  <div
                    data-plasmic-name={"frame66"}
                    data-plasmic-override={overrides.frame66}
                    className={classNames(projectcss.all, sty.frame66)}
                  >
                    <div
                      data-plasmic-name={"rectangle135"}
                      data-plasmic-override={overrides.rectangle135}
                      className={classNames(projectcss.all, sty.rectangle135)}
                    />

                    <Ellipse187Icon
                      className={classNames(projectcss.all, sty.svg__rdVg5)}
                      role={"img"}
                    />

                    <Ellipse192Icon
                      className={classNames(projectcss.all, sty.svg__kT1Ca)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Sitex"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xp9Kj)}>
              <Login
                data-plasmic-name={"loginForm"}
                data-plasmic-override={overrides.loginForm}
                buttonStyle={"primary"}
                className={classNames("__wab_instance", sty.loginForm)}
                createAccountText={"Créer un compte"}
                email={generateStateValueProp($state, ["loginForm", "email"])}
                emailLabel={"Email"}
                forgotPasswordPosition={"left"}
                forgotPasswordText={"Mot de passe oublié ?"}
                inputStyle={"simple"}
                onEmailChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "loginForm",
                    "email"
                  ]).apply(null, eventArgs);
                }}
                onError={async error => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            '"Aucun compte trouv\u00e9 pour cette email/mot de passe"',
                            undefined,
                            10
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                onPasswordChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "loginForm",
                    "password"
                  ]).apply(null, eventArgs);
                }}
                onSubmit={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $state.loginForm.email;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.loginForm.password;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            "/main_courante"
                          ]
                        };
                        return $globalActions[
                          "SupabaseUserGlobalContext.login"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                password={generateStateValueProp($state, [
                  "loginForm",
                  "password"
                ])}
                passwordLabel={"Mot de passe"}
                placeholderEmail={"Entrez votre email"}
                placeholderPassword={"Entrez votre mot de passe"}
                showBottomSignupLink={false}
                showCreateAccount={false}
                showOAuthButtons={false}
                showPasswordToggle={true}
                signUpLinkText={"Pas encore de compte ? INSCRIPTION"}
                submitButtonText={"Connexion"}
                title={"Connexion"}
                titleHeading={"h1"}
                wrapperStyle={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "card"
                    : "card"
                }
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "global",
    "logo",
    "imageLogo",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135",
    "text",
    "loginForm"
  ],
  global: [
    "global",
    "logo",
    "imageLogo",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135",
    "text",
    "loginForm"
  ],
  logo: [
    "logo",
    "imageLogo",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135",
    "text"
  ],
  imageLogo: [
    "imageLogo",
    "frame64",
    "rectangle134",
    "frame66",
    "rectangle135"
  ],
  frame64: ["frame64", "rectangle134"],
  rectangle134: ["rectangle134"],
  frame66: ["frame66", "rectangle135"],
  rectangle135: ["rectangle135"],
  text: ["text"],
  loginForm: ["loginForm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  global: "div";
  logo: "div";
  imageLogo: "div";
  frame64: "div";
  rectangle134: "div";
  frame66: "div";
  rectangle135: "div";
  text: "div";
  loginForm: typeof Login;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    global: makeNodeComponent("global"),
    logo: makeNodeComponent("logo"),
    imageLogo: makeNodeComponent("imageLogo"),
    frame64: makeNodeComponent("frame64"),
    rectangle134: makeNodeComponent("rectangle134"),
    frame66: makeNodeComponent("frame66"),
    rectangle135: makeNodeComponent("rectangle135"),
    text: makeNodeComponent("text"),
    loginForm: makeNodeComponent("loginForm"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
