/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: rT0qJviA0c4n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Switch from "../../Switch"; // plasmic-import: UaftfvqN7siX/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicCreateUpdateContact.module.css"; // plasmic-import: rT0qJviA0c4n/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicCreateUpdateContact__VariantMembers = {};
export type PlasmicCreateUpdateContact__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateUpdateContact__VariantsArgs;
export const PlasmicCreateUpdateContact__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCreateUpdateContact__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: string) => void;
  contactId?: any;
  onContactIdChange?: (val: string) => void;
  mode?: string;
  onModeChange2?: (val: string) => void;
  companies?: any;
  clientId?: number;
};
type ArgPropType = keyof PlasmicCreateUpdateContact__ArgsType;
export const PlasmicCreateUpdateContact__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "contactId",
  "onContactIdChange",
  "mode",
  "onModeChange2",
  "companies",
  "clientId"
);

export type PlasmicCreateUpdateContact__OverridesType = {
  crateStaff?: Flex__<typeof Modal>;
  frame1437254016?: Flex__<"div">;
  name?: Flex__<"div">;
  frame1437254019?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  select2?: Flex__<typeof AntdSelect>;
  input2?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  _switch?: Flex__<typeof Switch>;
  select?: Flex__<typeof AntdSelect>;
  upload?: Flex__<typeof UploadWrapper>;
  freeBox?: Flex__<"div">;
};

export interface DefaultCreateUpdateContactProps {
  open?: boolean;
  onOpenChange?: (val: string) => void;
  contactId?: any;
  onContactIdChange?: (val: string) => void;
  mode?: string;
  onModeChange2?: (val: string) => void;
  companies?: any;
  clientId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateUpdateContact__RenderFunc(props: {
  variants: PlasmicCreateUpdateContact__VariantsArgs;
  args: PlasmicCreateUpdateContact__ArgsType;
  overrides: PlasmicCreateUpdateContact__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "crateStaff.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "contactId",
        type: "writable",
        variableType: "object",

        valueProp: "contactId",
        onChangeProp: "onContactIdChange"
      },
      {
        path: "mode",
        type: "writable",
        variableType: "text",

        valueProp: "mode",
        onChangeProp: "onModeChange2"
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "file",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mode === "update"
                ? [
                    {
                      name: $state.contactId.attached_file,
                      download_url:
                        "https://wrtucmaotoeqjhalofcv.supabase.co/storage/v1/object/public/tasks/" +
                        $state.contactId.attached_file
                    }
                  ]
                : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.form.value.status;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <Modal
      data-plasmic-name={"crateStaff"}
      data-plasmic-override={overrides.crateStaff}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.crateStaff)}
      closeOnBackdropClick={false}
      content={(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["form", "value"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          initialValues: (() => {
            try {
              return $state.mode === "update" ? $state.contactId : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["supabaseUploadFile"] =
              $state.form.value.attached_file2 !== null &&
              $state.form.value.attached_file2.length > 0 &&
              $state.form.value.attached_file2[0].uid !== undefined
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                        opId: "f4d35638-55ec-4fc9-bbe4-24d0854b46f7",
                        userArgs: {
                          path: [$state.form.value.attached_file2[0].name],
                          content: [
                            $state.form.value.attached_file2[0].contents
                          ],
                          contentType: [
                            $state.form.value.attached_file2[0].type
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["supabaseUploadFile"] != null &&
              typeof $steps["supabaseUploadFile"] === "object" &&
              typeof $steps["supabaseUploadFile"].then === "function"
            ) {
              $steps["supabaseUploadFile"] = await $steps["supabaseUploadFile"];
            }

            $steps["create"] =
              $state.mode === "create"
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "4446763e-44d2-46f0-96ab-c186bad3b8cf",
                        userArgs: {
                          variables: [
                            $steps.supabaseUploadFile?.path,
                            $state.form.value.company_name,
                            $state.form.value.email,
                            $state.form.value.first_name,
                            $state.form.value.last_name,
                            $state.form.value.list,
                            $state.form.value.notes,
                            $state.form.value.phone,
                            $state.form.value.role_name,
                            $state.form.value.status,
                            $ctx.SupabaseUser.user == null
                              ? null
                              : $ctx.SupabaseUser.user.id,
                            $state.form.value.company_id,
                            $props.clientId
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [
                          "eed05c21-7f7f-4297-9c21-7c09331a4f7c"
                        ],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["create"] != null &&
              typeof $steps["create"] === "object" &&
              typeof $steps["create"].then === "function"
            ) {
              $steps["create"] = await $steps["create"];
            }

            $steps["update"] =
              $state.mode === "update"
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "237037d5-7dc2-4d38-8d68-48af84fe80d3",
                        userArgs: {
                          variables: [
                            $steps.supabaseUploadFile?.path ||
                              $state.form.value.attached_file,
                            $state.form.value.company_name,
                            $state.form.value.email,
                            $state.form.value.first_name,
                            $state.form.value.last_name,
                            $state.form.value.list,
                            $state.form.value.notes,
                            $state.form.value.phone,
                            $state.form.value.role_name,
                            $state.form.value.status,
                            $ctx.SupabaseUser.user == null
                              ? null
                              : $ctx.SupabaseUser.user.id,
                            $state.form.value.company_id
                          ],
                          keys: [$state.contactId.id]
                        },
                        cacheKey: null,
                        invalidatedKeys: [
                          "eed05c21-7f7f-4297-9c21-7c09331a4f7c"
                        ],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["update"] != null &&
              typeof $steps["update"] === "object" &&
              typeof $steps["update"].then === "function"
            ) {
              $steps["update"] = await $steps["update"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "success",
                      (() => {
                        try {
                          return $state.mode === "update"
                            ? "Contact mis à jour"
                            : "Contact créé";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      undefined,
                      undefined,
                      "bottom"
                    ]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["updateNewOperation"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: false,
                    variable: {
                      objRoot: $state,
                      variablePath: ["open"]
                    }
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateNewOperation"] != null &&
              typeof $steps["updateNewOperation"] === "object" &&
              typeof $steps["updateNewOperation"].then === "function"
            ) {
              $steps["updateNewOperation"] = await $steps["updateNewOperation"];
            }
          },
          onFinishFailed: async data => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: ["error", "Erreur", ``, undefined, "bottom"]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          },
          onIsSubmittingChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "isSubmitting",
              ["form", "isSubmitting"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          ref: ref => {
            $refs["form"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__yo8Ux)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cQvBh
                  )}
                >
                  {"Email"}
                </div>
              }
              name={"email"}
              rules={[{ ruleType: "required", message: "Entreprise requise" }]}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: "Email",
                  size: "large",
                  type: "email",
                  value: generateStateValueProp($state, ["input", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__fgVwe)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r5O2U
                  )}
                >
                  {"Entreprise"}
                </div>
              }
              name={"company_id"}
              rules={[{ ruleType: "required", message: "Requis" }]}
            >
              <AntdSelect
                data-plasmic-name={"select2"}
                data-plasmic-override={overrides.select2}
                bordered={true}
                className={classNames("__wab_instance", sty.select2)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select2", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                optionClassName={classNames({
                  [sty["pcls_jeYlpd0c0U9a"]]: true
                })}
                options={(() => {
                  try {
                    return $props.companies.map(c => ({
                      value: c.id,
                      label: c.name
                    }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [
                        { value: "option1", label: "Option 1", type: "option" },
                        { value: "option2", label: "Option 2", type: "option" }
                      ];
                    }
                    throw e;
                  }
                })()}
                placeholder={"S\u00e9lectionner"}
                popupClassName={classNames({
                  [sty["pcls_skhrd5aBIEap"]]: true
                })}
                popupScopeClassName={sty["select2__popup"]}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_efxRFfUTZUAm"]]: true
                })}
                value={generateStateValueProp($state, ["select2", "value"])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__wVuBs)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fAyFw
                  )}
                >
                  {"Pr\u00e9nom"}
                </div>
              }
              name={"first_name"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input2),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input2", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: ``,
                  size: "large",
                  value: generateStateValueProp($state, ["input2", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input2.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input2"}
                    data-plasmic-override={overrides.input2}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__u21Wy)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uoMoq
                  )}
                >
                  {"Nom"}
                </div>
              }
              name={"last_name"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input4),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input4", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: ``,
                  size: "large",
                  value: generateStateValueProp($state, ["input4", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input4.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input4"}
                    data-plasmic-override={overrides.input4}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__eRpEh)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lz26R
                  )}
                >
                  {"Fonction"}
                </div>
              }
              name={"role_name"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input7),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input7", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: ``,
                  size: "large",
                  value: generateStateValueProp($state, ["input7", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input7.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input7"}
                    data-plasmic-override={overrides.input7}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__xTysh)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lg7Ct
                  )}
                >
                  {"T\u00e9l\u00e9phone"}
                </div>
              }
              name={"phone"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input8),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input8", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: ``,
                  size: "large",
                  type: "tel",
                  value: generateStateValueProp($state, ["input8", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input8.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input8"}
                    data-plasmic-override={overrides.input8}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField___4Nz3)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o2Nli
                  )}
                >
                  {"Notes"}
                </div>
              }
              name={"notes"}
            >
              {(() => {
                const child$Props = {
                  autoSize: true,
                  className: classNames("__wab_instance", sty.textArea),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["textArea", "value"],
                      AntdTextArea_Helpers
                    ).apply(null, eventArgs);
                  },
                  value: generateStateValueProp($state, ["textArea", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "textArea.value"
                    }
                  ],
                  [],
                  AntdTextArea_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdTextArea
                    data-plasmic-name={"textArea"}
                    data-plasmic-override={overrides.textArea}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__bu8Xb)}
              initialValue={
                $state.mode === "create" ? true : $state.contactId.status
              }
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__saOLo
                  )}
                >
                  {"Actif"}
                </div>
              }
              name={"status"}
            >
              <Switch
                data-plasmic-name={"_switch"}
                data-plasmic-override={overrides._switch}
                className={classNames("__wab_instance", sty._switch)}
                isSelected={generateStateValueProp($state, [
                  "_switch",
                  "isSelected"
                ])}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "_switch",
                    "isSelected"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                showLabel={false}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField___1DWcw)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bd5ZW
                  )}
                >
                  {"Liste de diffusion"}
                </div>
              }
              name={"list"}
            >
              <AntdSelect
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                bordered={true}
                className={classNames("__wab_instance", sty.select)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                optionClassName={classNames({
                  [sty["pcls_iTrPnaGHlBq0"]]: true
                })}
                options={(() => {
                  const __composite = [
                    { type: "option", label: null, value: null },
                    { type: "option", label: null, value: null },
                    { type: "option", value: null, label: null }
                  ];
                  __composite["0"]["label"] = "S\u00e9curit\u00e9";
                  __composite["0"]["value"] = "S\u00e9curit\u00e9";
                  __composite["1"]["label"] = "Billetterie";
                  __composite["1"]["value"] = "Billetterie";
                  __composite["2"]["value"] = "Autre";
                  __composite["2"]["label"] = "Autre";
                  return __composite;
                })()}
                placeholder={"S\u00e9lectionner"}
                placeholderClassName={classNames({
                  [sty["pcls_dEDIiHiAGchz"]]: true
                })}
                popupClassName={classNames({
                  [sty["pcls_aactKHp4Adhl"]]: true
                })}
                popupScopeClassName={sty["select__popup"]}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_igq9DBS_J4fH"]]: true
                })}
                value={generateStateValueProp($state, ["select", "value"])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__tuNau)}
              initialValue={
                $state.mode === "create" ? null : $state.file
                // null
              }
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2DOhw
                  )}
                >
                  {"Fichier attach\u00e9"}
                </div>
              }
              name={"attached_file2"}
            >
              <UploadWrapper
                data-plasmic-name={"upload"}
                data-plasmic-override={overrides.upload}
                accept={""}
                className={classNames("__wab_instance", sty.upload)}
                dragAndDropFiles={true}
                files={generateStateValueProp($state, ["upload", "files"])}
                maxCount={1}
                onFilesChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["upload", "files"]).apply(
                    null,
                    eventArgs
                  );
                }}
                showUploadList={true}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__mgi0)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g1Ehr
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Importer ou d\u00e9poser un fichier"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cTif0
                    )}
                  >
                    {"10 Mo max"}
                  </div>
                </AntdButton>
              </UploadWrapper>
            </FormItemWrapper>
            <Button
              className={classNames("__wab_instance", sty.button__wv2ZM)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rpTu
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.mode === "update"
                          ? "Mettre à jour"
                          : "Créer";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Cr\u00e9er";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              submitsForm={true}
            />
          </FormWrapper>
        );
      })()}
      footer={
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        />
      }
      heading={
        <div
          data-plasmic-name={"frame1437254016"}
          data-plasmic-override={overrides.frame1437254016}
          className={classNames(projectcss.all, sty.frame1437254016)}
        >
          <div
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.mode === "update"
                    ? "Mettre à jour contact"
                    : "Nouveau contact";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Nouvelle prestation";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254019"}
            data-plasmic-override={overrides.frame1437254019}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254019)}
          >
            <LinkSimpleIcon
              className={classNames(projectcss.all, sty.svg__echtv)}
              role={"img"}
            />

            <XIcon
              className={classNames(projectcss.all, sty.svg__gsLyg)}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      }
      isOpen={generateStateValueProp($state, ["crateStaff", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["crateStaff", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  crateStaff: [
    "crateStaff",
    "frame1437254016",
    "name",
    "frame1437254019",
    "form",
    "input",
    "select2",
    "input2",
    "input4",
    "input7",
    "input8",
    "textArea",
    "_switch",
    "select",
    "upload",
    "freeBox"
  ],
  frame1437254016: ["frame1437254016", "name", "frame1437254019"],
  name: ["name"],
  frame1437254019: ["frame1437254019"],
  form: [
    "form",
    "input",
    "select2",
    "input2",
    "input4",
    "input7",
    "input8",
    "textArea",
    "_switch",
    "select",
    "upload"
  ],
  input: ["input"],
  select2: ["select2"],
  input2: ["input2"],
  input4: ["input4"],
  input7: ["input7"],
  input8: ["input8"],
  textArea: ["textArea"],
  _switch: ["_switch"],
  select: ["select"],
  upload: ["upload"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  crateStaff: typeof Modal;
  frame1437254016: "div";
  name: "div";
  frame1437254019: "div";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  select2: typeof AntdSelect;
  input2: typeof AntdInput;
  input4: typeof AntdInput;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  textArea: typeof AntdTextArea;
  _switch: typeof Switch;
  select: typeof AntdSelect;
  upload: typeof UploadWrapper;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateUpdateContact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateUpdateContact__VariantsArgs;
    args?: PlasmicCreateUpdateContact__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateUpdateContact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCreateUpdateContact__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateUpdateContact__ArgProps,
          internalVariantPropNames: PlasmicCreateUpdateContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateUpdateContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "crateStaff") {
    func.displayName = "PlasmicCreateUpdateContact";
  } else {
    func.displayName = `PlasmicCreateUpdateContact.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateUpdateContact = Object.assign(
  // Top-level PlasmicCreateUpdateContact renders the root element
  makeNodeComponent("crateStaff"),
  {
    // Helper components rendering sub-elements
    frame1437254016: makeNodeComponent("frame1437254016"),
    _name: makeNodeComponent("name"),
    frame1437254019: makeNodeComponent("frame1437254019"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    select2: makeNodeComponent("select2"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    textArea: makeNodeComponent("textArea"),
    _switch: makeNodeComponent("_switch"),
    select: makeNodeComponent("select"),
    upload: makeNodeComponent("upload"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicCreateUpdateContact
    internalVariantProps: PlasmicCreateUpdateContact__VariantProps,
    internalArgProps: PlasmicCreateUpdateContact__ArgProps
  }
);

export default PlasmicCreateUpdateContact;
/* prettier-ignore-end */
