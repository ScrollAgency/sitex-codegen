/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: dNZpqitvFdjI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { Checkbox } from "../../../plasmic-library/forms/Checkbox"; // plasmic-import: 4jYUg63Ip8fJ/codeComponent
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: lhUOZcKCH_AK/component
import Switch from "../../Switch"; // plasmic-import: UaftfvqN7siX/component
import { DataGrid } from "../../../plasmic-library/ui/data_grid"; // plasmic-import: UgPv5Wh-TKEv/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicUpdateTask.module.css"; // plasmic-import: dNZpqitvFdjI/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicUpdateTask__VariantMembers = {};
export type PlasmicUpdateTask__VariantsArgs = {};
type VariantPropType = keyof PlasmicUpdateTask__VariantsArgs;
export const PlasmicUpdateTask__VariantProps = new Array<VariantPropType>();

export type PlasmicUpdateTask__ArgsType = {
  files?: any;
  positions?: any;
  dispositif?: any;
  operation?: any;
  tasks?: any;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  taskIdUpdate?: number;
  onTaskIdUpdateChange?: (val: string) => void;
  type?: string;
  stateTaskDispo?: any;
  onStateTaskDispoChange2?: (val: string) => void;
  taskDispo?: any;
  modelId2?: number;
  dispoDataGrid?: any;
  onDispoDataGridChange?: (val: string) => void;
  clientId?: number;
};
type ArgPropType = keyof PlasmicUpdateTask__ArgsType;
export const PlasmicUpdateTask__ArgProps = new Array<ArgPropType>(
  "files",
  "positions",
  "dispositif",
  "operation",
  "tasks",
  "open",
  "onOpenChange",
  "taskIdUpdate",
  "onTaskIdUpdateChange",
  "type",
  "stateTaskDispo",
  "onStateTaskDispoChange2",
  "taskDispo",
  "modelId2",
  "dispoDataGrid",
  "onDispoDataGridChange",
  "clientId"
);

export type PlasmicUpdateTask__OverridesType = {
  modalUpdateRunsheet?: Flex__<typeof Modal>;
  frame1437254017?: Flex__<"div">;
  name3?: Flex__<"div">;
  frame1437254020?: Flex__<"div">;
  formUpdateRunsheet?: Flex__<typeof FormWrapper>;
  event2?: Flex__<typeof FormItemWrapper>;
  select3?: Flex__<typeof AntdSelect>;
  title3?: Flex__<typeof FormItemWrapper>;
  input3?: Flex__<typeof AntdInput>;
  status2?: Flex__<typeof FormItemWrapper>;
  selectStatus?: Flex__<typeof AntdSelect>;
  dateStart3?: Flex__<typeof FormItemWrapper>;
  timePicker7?: Flex__<typeof AntdDatePicker>;
  dateEnd3?: Flex__<typeof FormItemWrapper>;
  timePicker8?: Flex__<typeof AntdDatePicker>;
  startingTask2?: Flex__<typeof FormItemWrapper>;
  checkbox?: Flex__<typeof Checkbox>;
  impactPrio?: Flex__<typeof FormItemWrapper>;
  select4?: Flex__<typeof AntdSelect>;
  generalDescription2?: Flex__<typeof FormItemWrapper>;
  richTextEditor?: Flex__<typeof Quill>;
  textAreaInput2?: Flex__<typeof TextAreaInput>;
  radioBut?: Flex__<"div">;
  particular?: Flex__<typeof FormItemWrapper>;
  _switch?: Flex__<typeof Switch>;
  share?: Flex__<typeof FormItemWrapper>;
  switch2?: Flex__<typeof Switch>;
  precisions2?: Flex__<typeof FormItemWrapper>;
  select9?: Flex__<typeof AntdSelect>;
  thematic2?: Flex__<typeof FormItemWrapper>;
  select10?: Flex__<typeof AntdSelect>;
  impliques?: Flex__<typeof FormItemWrapper>;
  select8?: Flex__<typeof AntdSelect>;
  impact?: Flex__<typeof FormItemWrapper>;
  input4?: Flex__<typeof AntdInput>;
  impactComment?: Flex__<typeof FormItemWrapper>;
  textAreaInput3?: Flex__<typeof TextAreaInput>;
  dispo2?: Flex__<typeof FormItemWrapper>;
  ddDispo2?: Flex__<typeof AntdSelect>;
  dataGrid?: Flex__<typeof DataGrid>;
  formTaskDispo4?: Flex__<typeof FormWrapper>;
  dispositifs2?: Flex__<"div">;
  position4?: Flex__<typeof FormItemWrapper>;
  positionSite2?: Flex__<typeof AntdSelect>;
  taskDispositifId?: Flex__<typeof FormItemWrapper>;
  select31?: Flex__<typeof AntdSelect>;
  dispositifId?: Flex__<typeof FormItemWrapper>;
  select36?: Flex__<typeof AntdSelect>;
  minBefore5?: Flex__<typeof FormItemWrapper>;
  minBefore6?: Flex__<typeof AntdSelect>;
  generalDescription11?: Flex__<typeof FormItemWrapper>;
  textAreaInput4?: Flex__<typeof TextAreaInput>;
  upload2?: Flex__<typeof UploadWrapper>;
};

export interface DefaultUpdateTaskProps {
  files?: any;
  positions?: any;
  dispositif?: any;
  operation?: any;
  tasks?: any;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  taskIdUpdate?: number;
  onTaskIdUpdateChange?: (val: string) => void;
  type?: string;
  stateTaskDispo?: any;
  onStateTaskDispoChange2?: (val: string) => void;
  taskDispo?: any;
  modelId2?: number;
  dispoDataGrid?: any;
  onDispoDataGridChange?: (val: string) => void;
  clientId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUpdateTask__RenderFunc(props: {
  variants: PlasmicUpdateTask__VariantsArgs;
  args: PlasmicUpdateTask__ArgsType;
  overrides: PlasmicUpdateTask__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modalUpdateRunsheet.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "formUpdateRunsheet.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formUpdateRunsheet",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formUpdateRunsheet.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formUpdateRunsheet",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "selectStatus.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formUpdateRunsheet.value.attached_file ==
                undefined ||
                $state.formUpdateRunsheet.value.attached_file == null
                ? null
                : [
                    {
                      name: $props.files.data.find(
                        f =>
                          Number(f.id) ==
                          Number($state.formUpdateRunsheet.value.attached_file)
                      ).attached_file,
                      download_url:
                        "https://wrtucmaotoeqjhalofcv.supabase.co/storage/v1/object/public/tasks/" +
                        $props.files.data.find(
                          f =>
                            Number(f.id) ==
                            Number(
                              $state.formUpdateRunsheet.value.attached_file
                            )
                        ).attached_file
                    }
                  ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "timePicker7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "ddDispo2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select31[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "formTaskDispo4[].value",
        type: "private",
        variableType: "object",

        refName: "formTaskDispo4",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formTaskDispo4[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "formTaskDispo4",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "positionSite2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "minBefore6[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select36[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "taskIdUpdate",
        type: "writable",
        variableType: "number",

        valueProp: "taskIdUpdate",
        onChangeProp: "onTaskIdUpdateChange"
      },
      {
        path: "stateTaskDispo",
        type: "writable",
        variableType: "array",

        valueProp: "stateTaskDispo",
        onChangeProp: "onStateTaskDispoChange2"
      },
      {
        path: "modelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formUpdateRunsheet.value.particular;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "switch2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formUpdateRunsheet.value.share;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textAreaInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "dispoDataGrid",
        type: "writable",
        variableType: "array",

        valueProp: "dispoDataGrid",
        onChangeProp: "onDispoDataGridChange"
      },
      {
        path: "typeTheme",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            category: "Suivi dispositif (runsheet) [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "CODE 51 - Etat suppos\u00e9e d'ivresse [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE 49 - Altercation - Rixe - Violences [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE NRRI - R\u00e8glement int\u00e9rieur [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE CAPITOLE - Intrusion [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE OS : r\u00e9ception VIP [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "V\u00e9hicule interdit et stationnement [SU]",
            macro_category: "SURETE [SU]"
          },
          { category: "Vol [SU]", macro_category: "SURETE [SU]" },
          { category: "Colis suspect [SU]", macro_category: "SURETE [SU]" },
          {
            category: "Comportement suspect [SU]",
            macro_category: "SURETE [SU]"
          },
          { category: "D\u00e9gradation [SU]", macro_category: "SURETE [SU]" },
          { category: "Objets interdits [SU]", macro_category: "SURETE [SU]" },
          {
            category: "VHSS, injures raciales [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "Vente ill\u00e9gale [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "Accr\u00e9ditations, listings, acc\u00e8s travail [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "Execution difficile et \u00e9carts [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "CODE Papa Alpha [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "Modification dispositif et prolongements [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "CODE 112 Malaise/blessure UR [S]",
            macro_category: "SANTE-SECOURS [S]"
          },
          {
            category: "CODE 15 Malaise/blessure UA [S]",
            macro_category: "SANTE-SECOURS [S]"
          },
          { category: "BI Litiges", macro_category: "BI Litiges" },
          {
            category: "Hermeticit\u00e9 et p\u00e9rim\u00e8tre [MA]",
            macro_category: "MANIFESTATION [MA]"
          },
          {
            category: "Personne perdue [MA]",
            macro_category: "MANIFESTATION [MA]"
          },
          { category: null, macro_category: "SUIVI" },
          { category: null, macro_category: "MODELE" }
        ]
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formUpdateRunsheet.value.general_description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    variables: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "69c3bb51-f664-410c-8b2d-803bab8d1966",
        userArgs: {
          filters: [$props.clientId]
        },
        cacheKey: `plasmic.$.69c3bb51-f664-410c-8b2d-803bab8d1966.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getProfil: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "3a6df28f-4493-4b48-954b-c4494e361914",
        userArgs: {
          keys: [
            $props.tasks.find(x => x.id == $state.taskIdUpdate).last_updated_by
          ]
        },
        cacheKey: `plasmic.$.3a6df28f-4493-4b48-954b-c4494e361914.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <Modal
      data-plasmic-name={"modalUpdateRunsheet"}
      data-plasmic-override={overrides.modalUpdateRunsheet}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modalUpdateRunsheet)}
      closeOnBackdropClick={false}
      content={(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.formUpdateRunsheet),
          extendedOnValuesChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["formUpdateRunsheet", "value"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);

            (async (changedValues, allValues) => {
              const $steps = {};

              $steps["runCode"] =
                $state.formUpdateRunsheet.value.status === "CLASSÉE" ||
                $state.formUpdateRunsheet.value.status === "NON FAIT" ||
                $state.formUpdateRunsheet.value.status === "EN COURS"
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const status =
                              $state.formUpdateRunsheet.value.status;
                            if (status === "CLASSÉE" || status === "NON FAIT") {
                              $state.formUpdateRunsheet.value.date_end =
                                new Date().toISOString();
                              return ($state.formUpdateRunsheet.value.date_start =
                                $props.tasks.find(
                                  task =>
                                    Number(task.id) ==
                                    Number($state.taskIdUpdate)
                                ).date_start);
                            } else if (status === "EN COURS") {
                              $state.formUpdateRunsheet.value.date_start =
                                new Date().toISOString();
                              return ($state.formUpdateRunsheet.value.date_end =
                                $props.tasks.find(
                                  task =>
                                    Number(task.id) ==
                                    Number($state.taskIdUpdate)
                                ).date_end);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = (
                $state.formUpdateRunsheet.value.precisions ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return setTimeout(() => {
                          const macro = $queries.variables.data.find(
                            x =>
                              x.id == $state.formUpdateRunsheet.value.precisions
                          ).name_macro;
                          $state.formUpdateRunsheet.value.thematic =
                            $queries.variables.data.find(
                              x => x.name === macro
                            ).id;
                        }, 500);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }).apply(null, eventArgs);
          },
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          initialValues: (() => {
            try {
              return $props.tasks.find(
                task => Number(task.id) == Number($state.taskIdUpdate)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["supabaseUploadFile"] =
              $state.upload2.files !== null &&
              $state.upload2.files.length > 0 &&
              $state.upload2.files[0].uid !== undefined
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                        opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                        userArgs: {
                          path: [$state.upload2.files[0].name],
                          content: [$state.upload2.files[0].contents],
                          contentType: [$state.upload2.files[0].type]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["supabaseUploadFile"] != null &&
              typeof $steps["supabaseUploadFile"] === "object" &&
              typeof $steps["supabaseUploadFile"].then === "function"
            ) {
              $steps["supabaseUploadFile"] = await $steps["supabaseUploadFile"];
            }

            $steps["updateFile"] =
              $state.upload2.files !== null &&
              $state.upload2.files.length > 0 &&
              $state.upload2.files[0].uid !== undefined
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "aadf0b1a-92dc-4cd2-be42-716ea59f56ef",
                        userArgs: {
                          keys: [$state.formUpdateRunsheet.value.attached_file],
                          variables: [$steps.supabaseUploadFile?.path]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateFile"] != null &&
              typeof $steps["updateFile"] === "object" &&
              typeof $steps["updateFile"].then === "function"
            ) {
              $steps["updateFile"] = await $steps["updateFile"];
            }

            $steps["update"] =
              $state.formTaskDispo4
                .map(item => item.value)
                .filter(item => item.id != null).length > 0
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "d1zf2RtPRa3si4ocCd79Kx",
                        opId: "dca5d192-47b0-44bd-b3be-cc044c5d8e85",
                        userArgs: {
                          body: [
                            $state.formTaskDispo4
                              .map(item => item.value)
                              .filter(item => item.id != null)
                              .map(item => ({
                                id: item.id,
                                task_id: item.task_id,
                                dispositif_id: item.dispositif_id,
                                position_id: item.position_id,
                                min_before: item.min_before,
                                description: item.description,
                                date_start:
                                  $state.formUpdateRunsheet.value.date_start,
                                date_end:
                                  $state.formUpdateRunsheet.value.date_end,
                                position_name: item.position_name,
                                position_sector: item.position_sector
                              }))
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["update"] != null &&
              typeof $steps["update"] === "object" &&
              typeof $steps["update"].then === "function"
            ) {
              $steps["update"] = await $steps["update"];
            }

            $steps["create"] =
              $state.formTaskDispo4
                .map(item => item.value)
                .filter(item => item.id == null).length > 0
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "6a7ac4af-ecf4-4bf7-9ac7-bd31959fc65e",
                        userArgs: {
                          variables: [
                            $state.formTaskDispo4
                              .map(item => item.value)
                              .filter(item => item.id == null)
                              .map(item => ({
                                task_id: Number($state.taskIdUpdate),
                                position_id: Number(item.position_id),
                                date_start:
                                  $state.formUpdateRunsheet.value.date_start,
                                date_end:
                                  $state.formUpdateRunsheet.value.date_end,
                                dispositif_id: Number(item.dispositif_id),
                                min_before: item.min_before,
                                description: item.description,
                                associated_model: $props.modelId2 || null
                              }))
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["create"] != null &&
              typeof $steps["create"] === "object" &&
              typeof $steps["create"].then === "function"
            ) {
              $steps["create"] = await $steps["create"];
            }

            $steps["_delete"] =
              $state.stateTaskDispo
                .map(item => item.dispositif_id)
                .filter(
                  dispositif_id =>
                    !$state.formUpdateRunsheet.value.dispositif_id
                      .map(di => di.value)
                      .includes(Number(dispositif_id))
                ).length > 0
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "156b3310-2d9f-4a6f-8dee-a904141db795",
                        userArgs: {
                          query: [
                            $state.stateTaskDispo
                              .filter(
                                item =>
                                  !$state.formUpdateRunsheet.value.dispositif_id
                                    .map(di => di.value)
                                    .includes(Number(item.dispositif_id))
                              )
                              .map(item => item.id)
                              .join(",")
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["_delete"] != null &&
              typeof $steps["_delete"] === "object" &&
              typeof $steps["_delete"].then === "function"
            ) {
              $steps["_delete"] = await $steps["_delete"];
            }

            $steps["updateAction"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "v6umJuHyep6kPNyCAJjouT",
                      opId: "8f6ef920-4471-47ef-96a1-60320d984d4a",
                      userArgs: {
                        keys: [$state.taskIdUpdate],
                        variables: [
                          $props.type === "model"
                            ? null
                            : $state.formUpdateRunsheet.value
                                .associated_operation,
                          $state.formUpdateRunsheet.value.date_end,
                          $state.formUpdateRunsheet.value.date_start,
                          $state.formUpdateRunsheet.value.general_description,
                          $ctx.SupabaseUser.user == null
                            ? null
                            : $ctx.SupabaseUser.user.id,
                          $state.formUpdateRunsheet.value.particular,
                          $state.formUpdateRunsheet.value.precisions,
                          $state.formUpdateRunsheet.value.priority,
                          $state.formUpdateRunsheet.value.share,
                          $state.formUpdateRunsheet.value.status,
                          $state.formUpdateRunsheet.value.thematic,
                          $state.formUpdateRunsheet.value.title,
                          $state.formUpdateRunsheet.value.type,
                          new Date().toISOString(),
                          $props.modelId2 || null,
                          $state.formUpdateRunsheet.value.starting_task,
                          $state.formUpdateRunsheet.value.implied,
                          $state.formUpdateRunsheet.value.impact_comment,
                          $state.formUpdateRunsheet.value.impact_value
                        ]
                      },
                      cacheKey: null,
                      invalidatedKeys: [
                        "2c71e561-9ccf-412c-9737-2509ec61ee99",
                        "330d5325-6e12-4b25-97e4-15853a7883d0",
                        "fa5c4dfe-59a9-43d6-8bce-9d467217a75e",
                        "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                        "cec3d7bf-5ee9-47a3-ab41-392259ef4090",
                        "ae8f6af7-e283-4770-a3e5-c810ebc5351d",
                        "8a2f0ee3-a6bf-421f-bcf3-5e61735476c7",
                        "231e308b-653f-44ec-b971-c9e99c82c230",
                        "38496a2c-2970-40cf-bfd9-47a20de7a9d0"
                      ],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateAction"] != null &&
              typeof $steps["updateAction"] === "object" &&
              typeof $steps["updateAction"].then === "function"
            ) {
              $steps["updateAction"] = await $steps["updateAction"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "success",
                      "T\u00e2che mise \u00e0 jour",
                      undefined,
                      undefined,
                      "bottom"
                    ]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["updateOpen"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: false,
                    variable: {
                      objRoot: $state,
                      variablePath: ["open"]
                    }
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpen"] != null &&
              typeof $steps["updateOpen"] === "object" &&
              typeof $steps["updateOpen"].then === "function"
            ) {
              $steps["updateOpen"] = await $steps["updateOpen"];
            }
          },
          onFinishFailed: async data => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "Erreur, merci de v\u00e9rifier les champs.",
                      ``,
                      undefined,
                      "bottom"
                    ]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          },
          onIsSubmittingChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "isSubmitting",
              ["formUpdateRunsheet", "isSubmitting"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          ref: ref => {
            $refs["formUpdateRunsheet"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "formUpdateRunsheet.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "formUpdateRunsheet.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"formUpdateRunsheet"}
            data-plasmic-override={overrides.formUpdateRunsheet}
            {...child$Props}
          >
            {(() => {
              try {
                return $props.type !== "model";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"event2"}
                data-plasmic-override={overrides.event2}
                className={classNames("__wab_instance", sty.event2)}
                initialValue={(() => {
                  try {
                    return $props.operation.data.length == 1 &&
                      $props.type !== "model"
                      ? Number(
                          $props.tasks.find(x => x.id == $state.taskIdUpdate)
                            .associated_operation
                        )
                      : null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3WSk0
                    )}
                  >
                    {"Op\u00e9ration associ\u00e9e"}
                  </div>
                }
                name={"associated_operation"}
                rules={[{ ruleType: "required", message: "Requis" }]}
              >
                <AntdSelect
                  data-plasmic-name={"select3"}
                  data-plasmic-override={overrides.select3}
                  className={classNames("__wab_instance", sty.select3)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select3",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionClassName={classNames({
                    [sty["pcls_HxMFqNJqjM7l"]]: true
                  })}
                  options={(() => {
                    try {
                      return $props.operation.data.map(item => ({
                        value: Number(item.id),
                        label: item.title
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8HJq
                      )}
                    >
                      {"Select..."}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls_CMWNkUNfMzCm"]]: true
                  })}
                  popupClassName={classNames({
                    [sty["pcls_QPeMjX6_l4hq"]]: true
                  })}
                  popupScopeClassName={sty["select3__popup"]}
                  size={"middle"}
                  triggerClassName={classNames({
                    [sty["pcls_EwmoAVnFxStU"]]: true
                  })}
                  value={generateStateValueProp($state, ["select3", "value"])}
                />
              </FormItemWrapper>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"title3"}
              data-plasmic-override={overrides.title3}
              className={classNames("__wab_instance", sty.title3)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f8Yki
                  )}
                >
                  {"Titre"}
                </div>
              }
              name={"title"}
              rules={[{ ruleType: "required", message: "Titre requis" }]}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input3),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input3", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: "Titre",
                  size: "large",
                  value: generateStateValueProp($state, ["input3", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input3.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"status2"}
                data-plasmic-override={overrides.status2}
                className={classNames("__wab_instance", sty.status2)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3VJAr
                    )}
                  >
                    {"Statut"}
                  </div>
                }
                name={"status"}
                rules={[{ ruleType: "required", message: "Statut requis" }]}
              >
                <AntdSelect
                  data-plasmic-name={"selectStatus"}
                  data-plasmic-override={overrides.selectStatus}
                  allowClear={true}
                  bordered={true}
                  className={classNames("__wab_instance", sty.selectStatus)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "selectStatus",
                      "value"
                    ]).apply(null, eventArgs);

                    (async (value, option) => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  optionClassName={classNames({
                    [sty["pcls_GP91BrMebsmJ"]]: true
                  })}
                  options={(() => {
                    try {
                      return [
                        "À PLANIFIER",
                        "PLANIFIÉE",
                        "À ENGAGER",
                        "EN COURS",
                        "CLASSÉE",
                        "NON CATEGORISÉ",
                        "NON FAIT"
                      ].map((text, index) => ({
                        value: text,
                        label: text
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hTFfU
                      )}
                    >
                      {"Select..."}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls_C7dkt8KqhyYi"]]: true
                  })}
                  popupClassName={classNames({
                    [sty["pcls_ZvHt_SMRGvl2"]]: true
                  })}
                  popupScopeClassName={sty["selectStatus__popup"]}
                  showSearch={true}
                  size={"middle"}
                  triggerClassName={classNames({
                    [sty["pcls_dqhWFiEiZMHb"]]: true
                  })}
                  value={generateStateValueProp($state, [
                    "selectStatus",
                    "value"
                  ])}
                />
              </FormItemWrapper>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__unjTb)}>
              <FormItemWrapper
                data-plasmic-name={"dateStart3"}
                data-plasmic-override={overrides.dateStart3}
                className={classNames("__wab_instance", sty.dateStart3)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r9Ko1
                    )}
                  >
                    {"Date et heure de d\u00e9but"}
                  </div>
                }
                name={"date_start"}
                rules={[
                  {
                    ruleType: "required",
                    message: "Date de d\u00e9but requise"
                  }
                ]}
                shouldUpdate={false}
              >
                {(() => {
                  const child$Props = {
                    allowClear: true,
                    className: classNames("__wab_instance", sty.timePicker7),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["timePicker7", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupBodyClassName: classNames({
                      [sty["pcls_hnp9DKH5w5tt"]]: true
                    }),
                    popupClassName: classNames({
                      [sty["pcls_49j0OBP3A_ci"]]: true
                    }),
                    popupFooterClassName: classNames({
                      [sty["pcls_Nxsawe7I6Wrz"]]: true
                    }),
                    popupHeaderClassName: classNames({
                      [sty["pcls_2mEVwRkrBuno"]]: true
                    }),
                    popupScopeClassName: sty["timePicker7__datePickerPopup"],
                    showNow: false,
                    showTime: true,
                    value: generateStateValueProp($state, [
                      "timePicker7",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "timePicker7.value"
                      }
                    ],
                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdDatePicker
                      data-plasmic-name={"timePicker7"}
                      data-plasmic-override={overrides.timePicker7}
                      {...child$Props}
                    />
                  );
                })()}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c7SjP
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Début de l'opération : " +
                          new Date(
                            $props.operation.data.find(
                              x =>
                                Number(x.id) ==
                                Number(
                                  $state.formUpdateRunsheet.value
                                    .associated_operation
                                )
                            ).date_start
                          ).toLocaleString("fr-FR", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric",
                            hour: "2-digit",
                            minute: "2-digit"
                          })
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"dateEnd3"}
                data-plasmic-override={overrides.dateEnd3}
                className={classNames("__wab_instance", sty.dateEnd3)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xefqd
                    )}
                  >
                    {"Date et heure de fin estim\u00e9es"}
                  </div>
                }
                name={"date_end"}
                rules={[
                  {
                    ruleType: "advanced",
                    custom: (rule, value) => {
                      return (
                        $state.formUpdateRunsheet.value.date_end == undefined ||
                        $state.formUpdateRunsheet.value.date_end >
                          $state.formUpdateRunsheet.value.date_start ||
                        $state.formUpdateRunsheet.value.date_end == null
                      );
                    },
                    message: "Erreur"
                  }
                ]}
                shouldUpdate={false}
              >
                {(() => {
                  const child$Props = {
                    allowClear: true,
                    className: classNames("__wab_instance", sty.timePicker8),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["timePicker8", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupBodyClassName: classNames({
                      [sty["pcls_ebaxa-vTviyC"]]: true
                    }),
                    popupClassName: classNames({
                      [sty["pcls_b24MTQe67dS9"]]: true
                    }),
                    popupFooterClassName: classNames({
                      [sty["pcls_nt37IHc19xCV"]]: true
                    }),
                    popupHeaderClassName: classNames({
                      [sty["pcls_rtjOqHnqiFuz"]]: true
                    }),
                    popupScopeClassName: sty["timePicker8__datePickerPopup"],
                    showNow: false,
                    showTime: true,
                    value: generateStateValueProp($state, [
                      "timePicker8",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "timePicker8.value"
                      }
                    ],
                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdDatePicker
                      data-plasmic-name={"timePicker8"}
                      data-plasmic-override={overrides.timePicker8}
                      {...child$Props}
                    />
                  );
                })()}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cEpcf
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Fin de l'opération : " +
                          new Date(
                            $props.operation.data.find(
                              x =>
                                Number(x.id) ==
                                Number(
                                  $state.formUpdateRunsheet.value
                                    .associated_operation
                                )
                            ).date_end
                          ).toLocaleString("fr-FR", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric",
                            hour: "2-digit",
                            minute: "2-digit"
                          })
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </FormItemWrapper>
            </div>
            {(() => {
              try {
                return $props.type === "runsheet";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"startingTask2"}
                data-plasmic-override={overrides.startingTask2}
                className={classNames("__wab_instance", sty.startingTask2)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7JsGn
                    )}
                  >
                    {
                      "D\u00e9finir l\u2019action comme Marqueur de d\u00e9but de l\u2019op\u00e9ration"
                    }
                  </div>
                }
                name={"starting_task"}
              >
                <Checkbox
                  data-plasmic-name={"checkbox"}
                  data-plasmic-override={overrides.checkbox}
                  checked={(() => {
                    try {
                      return $state.formUpdateRunsheet.value.starting_task;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.checkbox)}
                  disabled={false}
                  state={"default"}
                />
              </FormItemWrapper>
            ) : null}
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"impactPrio"}
                data-plasmic-override={overrides.impactPrio}
                className={classNames("__wab_instance", sty.impactPrio)}
                initialValue={undefined}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x4Rpq
                    )}
                  >
                    {"Impact/Priorit\u00e9"}
                  </div>
                }
                name={"priority"}
              >
                <AntdSelect
                  data-plasmic-name={"select4"}
                  data-plasmic-override={overrides.select4}
                  bordered={true}
                  className={classNames("__wab_instance", sty.select4)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select4",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return [
                        "5: Crise",
                        "4: Fort",
                        "3: Moyen",
                        "2: Faible",
                        "1: Nul",
                        "SUIVI"
                      ].map((text, index) => ({
                        value: text,
                        label: text
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__svUo1
                      )}
                    >
                      {"S\u00e9lectionner"}
                    </div>
                  }
                  popupScopeClassName={sty["select4__popup"]}
                  size={"middle"}
                  value={generateStateValueProp($state, ["select4", "value"])}
                />
              </FormItemWrapper>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"generalDescription2"}
              data-plasmic-override={overrides.generalDescription2}
              className={classNames("__wab_instance", sty.generalDescription2)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__teopx
                  )}
                >
                  {"Description g\u00e9n\u00e9rale"}
                </div>
              }
              name={"general_description"}
            >
              {(() => {
                const child$Props = {
                  containerClassName: classNames(
                    "__wab_instance",
                    sty.richTextEditor
                  ),
                  defaultValue: (() => {
                    try {
                      return $state.formUpdateRunsheet.value
                        .general_description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["richTextEditor", "value"],
                      Quill_Helpers
                    ).apply(null, eventArgs);
                  },
                  preserveWhitespace: true,
                  readOnly: false,
                  toolbar: (() => {
                    const __composite = {
                      textStyle: [
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough"
                      ],
                      colors: null,
                      script: null,
                      fontFamily: null,
                      heading: null,
                      fontSizes: null,
                      formatting: null,
                      inputTypes: null
                    };
                    __composite["colors"] = ["text color"];
                    __composite["script"] = false;
                    __composite["fontFamily"] = false;
                    __composite["heading"] = [];
                    __composite["fontSizes"] = [];
                    __composite["formatting"] = ["alignment", "list"];
                    __composite["inputTypes"] = ["link"];
                    return __composite;
                  })(),

                  value: generateStateValueProp($state, [
                    "richTextEditor",
                    "value"
                  ])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "richTextEditor.value"
                    }
                  ],
                  [],
                  Quill_Helpers ?? {},
                  child$Props
                );

                return (
                  <Quill
                    data-plasmic-name={"richTextEditor"}
                    data-plasmic-override={overrides.richTextEditor}
                    {...child$Props}
                  />
                );
              })()}
              <TextAreaInput
                data-plasmic-name={"textAreaInput2"}
                data-plasmic-override={overrides.textAreaInput2}
                className={classNames("__wab_instance", sty.textAreaInput2)}
                inputMode={"text"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textAreaInput2",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "Si une situation est en cours d\u2019\u00e9volution, Heure, commentaire"
                }
              />
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"radioBut"}
                data-plasmic-override={overrides.radioBut}
                className={classNames(projectcss.all, sty.radioBut)}
              >
                <FormItemWrapper
                  data-plasmic-name={"particular"}
                  data-plasmic-override={overrides.particular}
                  className={classNames("__wab_instance", sty.particular)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xk4ER
                      )}
                    >
                      {"Regard particulier"}
                    </div>
                  }
                  name={"particular"}
                >
                  <Switch
                    data-plasmic-name={"_switch"}
                    data-plasmic-override={overrides._switch}
                    className={classNames("__wab_instance", sty._switch)}
                    isSelected={generateStateValueProp($state, [
                      "_switch",
                      "isSelected"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "_switch",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"share"}
                  data-plasmic-override={overrides.share}
                  className={classNames("__wab_instance", sty.share)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n6OxC
                      )}
                    >
                      {"Partager"}
                    </div>
                  }
                  name={"share"}
                >
                  <Switch
                    data-plasmic-name={"switch2"}
                    data-plasmic-override={overrides.switch2}
                    className={classNames("__wab_instance", sty.switch2)}
                    isSelected={generateStateValueProp($state, [
                      "switch2",
                      "isSelected"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "switch2",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </FormItemWrapper>
              </div>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"precisions2"}
              data-plasmic-override={overrides.precisions2}
              className={classNames("__wab_instance", sty.precisions2)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zLab9
                  )}
                >
                  {"Pr\u00e9cisions (Type)"}
                </div>
              }
              name={"precisions"}
            >
              <AntdSelect
                data-plasmic-name={"select9"}
                data-plasmic-override={overrides.select9}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.select9)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                mode={"single"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select9", "value"]).apply(
                    null,
                    eventArgs
                  );

                  (async (value, option) => {
                    const $steps = {};

                    $steps["runInteractionProp"] = true
                      ? (() => {
                          const actionArgs = {};
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runInteractionProp"] != null &&
                      typeof $steps["runInteractionProp"] === "object" &&
                      typeof $steps["runInteractionProp"].then === "function"
                    ) {
                      $steps["runInteractionProp"] = await $steps[
                        "runInteractionProp"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                optionClassName={classNames({
                  [sty["pcls_OYbTBUQVExcM"]]: true
                })}
                options={(() => {
                  try {
                    return $queries.variables.data
                      .filter(x => x.category === "precisions")
                      .map(x => ({
                        value: x.id,
                        label: x.name
                      }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__flrL8
                    )}
                  >
                    {"Select..."}
                  </div>
                }
                placeholderClassName={classNames({
                  [sty["pcls_m_o8XW_D2WfR"]]: true
                })}
                popupClassName={classNames({
                  [sty["pcls_avH4pa_w8Q-r"]]: true
                })}
                popupScopeClassName={sty["select9__popup"]}
                showSearch={true}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_T2hhVYiDeS1Q"]]: true
                })}
                value={generateStateValueProp($state, ["select9", "value"])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              data-plasmic-name={"thematic2"}
              data-plasmic-override={overrides.thematic2}
              className={classNames("__wab_instance", sty.thematic2)}
              initialValue={(() => {
                try {
                  return $state.formUpdateRunsheet.value.precisions == null
                    ? null
                    : $queries.variables.data.find(
                        x => x.id === $state.formUpdateRunsheet.value.precisions
                      ).name_macro;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hh1Fk
                  )}
                >
                  {"Dominante (Th\u00e9matique)"}
                </div>
              }
              name={"thematic"}
              shouldUpdate={true}
            >
              <AntdSelect
                data-plasmic-name={"select10"}
                data-plasmic-override={overrides.select10}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.select10)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "select10",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                optionClassName={classNames({
                  [sty["pcls_oiINoBecScyS"]]: true
                })}
                options={(() => {
                  try {
                    return $queries.variables.data
                      .filter(x => x.category === "thematic")
                      .map(x => ({
                        value: x.id,
                        label: x.name
                      }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__omhHo
                    )}
                  >
                    {"Select..."}
                  </div>
                }
                placeholderClassName={classNames({
                  [sty["pcls_IV5Afq0P6SPV"]]: true
                })}
                popupClassName={classNames({
                  [sty["pcls_RCe3iIdUqBBM"]]: true
                })}
                popupScopeClassName={sty["select10__popup"]}
                showSearch={true}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_B4eS3Z_4QM4g"]]: true
                })}
                value={generateStateValueProp($state, ["select10", "value"])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              data-plasmic-name={"impliques"}
              data-plasmic-override={overrides.impliques}
              className={classNames("__wab_instance", sty.impliques)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__va4P2
                  )}
                >
                  {"Impliqu\u00e9s"}
                </div>
              }
              name={"implied"}
            >
              <AntdSelect
                data-plasmic-name={"select8"}
                data-plasmic-override={overrides.select8}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.select8)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                mode={"multiple"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select8", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                options={(() => {
                  try {
                    return $queries.variables.data
                      .filter(x => x.category === "implied")
                      .map(x => ({
                        value: x.id,
                        label: x.name
                      }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zEqn
                    )}
                  >
                    {"S\u00e9lectionner"}
                  </div>
                }
                popupScopeClassName={sty["select8__popup"]}
                showSearch={true}
                size={"middle"}
                value={generateStateValueProp($state, ["select8", "value"])}
              />
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"impact"}
                data-plasmic-override={overrides.impact}
                className={classNames("__wab_instance", sty.impact)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__psPii
                    )}
                  >
                    {"Impact sur la jauge "}
                  </div>
                }
                name={"impact_value"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input4),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input4", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    size: "large",
                    type: "number",
                    value: generateStateValueProp($state, ["input4", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input4.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"input4"}
                      data-plasmic-override={overrides.input4}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            ) : null}
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"impactComment"}
                data-plasmic-override={overrides.impactComment}
                className={classNames("__wab_instance", sty.impactComment)}
                label={null}
                name={"impact_comment"}
              >
                <TextAreaInput
                  data-plasmic-name={"textAreaInput3"}
                  data-plasmic-override={overrides.textAreaInput3}
                  className={classNames("__wab_instance", sty.textAreaInput3)}
                  inputMode={"text"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "textAreaInput3",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"Commentaire impact"}
                />
              </FormItemWrapper>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"dispo2"}
              data-plasmic-override={overrides.dispo2}
              className={classNames("__wab_instance", sty.dispo2)}
              initialValue={(() => {
                try {
                  return $state.stateTaskDispo.map(item => ({
                    value: Number(item.dispositif_id),
                    label: $props.dispositif.data.find(
                      dispo => dispo.id == Number(item.dispositif_id)
                    ).main_mission
                  }));
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vXhA5
                  )}
                >
                  {"Dispositifs/Services"}
                </div>
              }
              name={"dispositif_id"}
            >
              {(() => {
                try {
                  return $props.type === "runsheet";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <AntdSelect
                  data-plasmic-name={"ddDispo2"}
                  data-plasmic-override={overrides.ddDispo2}
                  allowClear={true}
                  bordered={true}
                  className={classNames("__wab_instance", sty.ddDispo2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  disabled={(() => {
                    try {
                      return $props.type === "main_courante";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  mode={"multiple"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "ddDispo2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionClassName={classNames({
                    [sty["pcls_GZN7hkNLoS6U"]]: true
                  })}
                  options={(() => {
                    try {
                      return $props.dispositif.data.map(item => ({
                        value: Number(item.id),
                        label: item.main_mission
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4JIyj
                      )}
                    >
                      {"S\u00e9lectionner"}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls_de9YNUrBK50d"]]: true
                  })}
                  popupClassName={classNames({
                    [sty["pcls_OpdCLUwOj2Gx"]]: true
                  })}
                  popupScopeClassName={sty["ddDispo2__popup"]}
                  showSearch={true}
                  size={"middle"}
                  triggerClassName={classNames({
                    [sty["pcls_kInmsarI35-z"]]: true
                  })}
                  useChildren={false}
                  value={generateStateValueProp($state, ["ddDispo2", "value"])}
                />
              ) : null}
              {(() => {
                try {
                  return $props.type === "main_courante";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__mHod0)}>
                  <DataGrid
                    data-plasmic-name={"dataGrid"}
                    data-plasmic-override={overrides.dataGrid}
                    className={classNames("__wab_instance", sty.dataGrid)}
                    columnLabels={{}}
                    currentPage={1}
                    emptyStateMessage={"Aucune donnée disponible"}
                    enableColumnReordering={false}
                    enableExport={false}
                    enablePrint={false}
                    exportFormats={"csv"}
                    monetaryColumns={["budget"]}
                    numericColumns={["budget"]}
                    pageSize={10}
                    pdfTitle={"Sitex - Commande"}
                    responsive={{
                      minWidth: "100%",
                      horizontalOverflow: "auto",
                      verticalOverflow: "auto",
                      stickyHeader: true,
                      compactOnMobile: true,
                      breakpoint: 768
                    }}
                    showActions={false}
                    tasks={(() => {
                      try {
                        return $state.stateTaskDispo.map(x => ({
                          Position: $props.positions.data.find(
                            p => p.id == x.position_id
                          ).specific_name,
                          Société: $props.dispositif.data.find(
                            d => d.id == x.dispositif_id
                          ).company_name,
                          "Code tarif": $props.dispositif.data.find(
                            d => d.id == x.dispositif_id
                          ).code_price
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    theme={{
                      headerBgColor: "#ECE6DF",
                      rowBgColor: "#ffffff",
                      hoverBgColor: "#f9f5ff",
                      borderColor: "#d9cdbf",
                      textColor: "#333333",
                      fontSize: "14px",
                      dragHandleColor: "#6B21A8"
                    }}
                  />
                </div>
              ) : null}
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "runsheet";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.formUpdateRunsheet.value.dispositif_id.map(
                        item => item.value
                      )[0] == undefined
                        ? $state.formUpdateRunsheet.value.dispositif_id
                        : $state.formUpdateRunsheet.value.dispositif_id.map(
                            item => item.value
                          );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.formTaskDispo4
                      ),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["formTaskDispo4", __plasmic_idx_0, "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      initialValues: (() => {
                        try {
                          return $state.stateTaskDispo.find(
                            item => item.dispositif_id == currentItem
                          ) == undefined
                            ? null
                            : $state.stateTaskDispo.find(
                                item => item.dispositif_id == currentItem
                              );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      key: currentIndex,
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["formTaskDispo4", __plasmic_idx_0, "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["formTaskDispo4"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "formTaskDispo4[].value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "formTaskDispo4[].isSubmitting"
                        }
                      ],
                      [__plasmic_idx_0],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"formTaskDispo4"}
                        data-plasmic-override={overrides.formTaskDispo4}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"dispositifs2"}
                          data-plasmic-override={overrides.dispositifs2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.dispositifs2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eMdDz
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.dispositif.data.find(
                                    dispo => dispo.id == currentItem
                                  ).main_mission;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Text";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <FormItemWrapper
                            data-plasmic-name={"position4"}
                            data-plasmic-override={overrides.position4}
                            className={classNames(
                              "__wab_instance",
                              sty.position4
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__p8TUy
                                )}
                              >
                                {"Positions site"}
                              </div>
                            }
                            name={"position_id"}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: true,
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.positionSite2
                                ),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "positionSite2",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                },
                                options: (() => {
                                  try {
                                    return $props.positions.data.map(
                                      position => ({
                                        value: position.id,
                                        label: position.specific_name
                                      })
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ];
                                    }
                                    throw e;
                                  }
                                })(),
                                placeholder: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yuDip
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                ),
                                popupScopeClassName:
                                  sty["positionSite2__popup"],
                                showSearch: true,
                                size: "middle",
                                value: generateStateValueProp($state, [
                                  "positionSite2",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "positionSite2[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "positionSite2[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSelect
                                  data-plasmic-name={"positionSite2"}
                                  data-plasmic-override={
                                    overrides.positionSite2
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"taskDispositifId"}
                            data-plasmic-override={overrides.taskDispositifId}
                            className={classNames(
                              "__wab_instance",
                              sty.taskDispositifId
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___36Ppm
                                )}
                              >
                                {"task_dispositif id"}
                              </div>
                            }
                            name={"id"}
                          >
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.select31
                                ),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                ),
                                disabled: true,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select31",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                },
                                optionClassName: classNames({
                                  [sty["pcls_7bdeXAfyxeQ_"]]: true
                                }),
                                options: (() => {
                                  try {
                                    return [
                                      {
                                        value: currentItem.id,
                                        label: currentItem.role_name
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })(),
                                placeholder: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lbi2I
                                    )}
                                  >
                                    {"Select..."}
                                  </div>
                                ),
                                placeholderClassName: classNames({
                                  [sty["pcls_o_3iXJ2XS5fp"]]: true
                                }),
                                popupClassName: classNames({
                                  [sty["pcls_oVQakgWGeosR"]]: true
                                }),
                                popupScopeClassName: sty["select31__popup"],
                                size: "middle",
                                suffixIcon: null,
                                triggerClassName: classNames({
                                  [sty["pcls_d4kYEpSsKGfZ"]]: true
                                }),
                                value: generateStateValueProp($state, [
                                  "select31",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "select31[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "select31[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSelect
                                  data-plasmic-name={"select31"}
                                  data-plasmic-override={overrides.select31}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"dispositifId"}
                            data-plasmic-override={overrides.dispositifId}
                            className={classNames(
                              "__wab_instance",
                              sty.dispositifId
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qTrr
                                )}
                              >
                                {"Dispositif"}
                              </div>
                            }
                            name={"dispositif_id"}
                          >
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.select36
                                ),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                ),
                                disabled: true,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select36",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                },
                                optionClassName: classNames({
                                  [sty["pcls_T5mA0h8JzCw0"]]: true
                                }),
                                options: (() => {
                                  try {
                                    return [
                                      {
                                        value: currentItem.id,
                                        label: currentItem.role_name
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })(),
                                placeholder: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wpFuP
                                    )}
                                  >
                                    {"Select..."}
                                  </div>
                                ),
                                placeholderClassName: classNames({
                                  [sty["pcls_GTdCeVMZkvJZ"]]: true
                                }),
                                popupClassName: classNames({
                                  [sty["pcls_OWcQpsTwiYUd"]]: true
                                }),
                                popupScopeClassName: sty["select36__popup"],
                                size: "middle",
                                suffixIcon: null,
                                triggerClassName: classNames({
                                  [sty["pcls_x-aLqP8scYHr"]]: true
                                }),
                                value: generateStateValueProp($state, [
                                  "select36",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "select36[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "select36[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSelect
                                  data-plasmic-name={"select36"}
                                  data-plasmic-override={overrides.select36}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          {(() => {
                            try {
                              return $props.type === "runsheet";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <FormItemWrapper
                              data-plasmic-name={"minBefore5"}
                              data-plasmic-override={overrides.minBefore5}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore5
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__abHiO
                                  )}
                                >
                                  {
                                    "Convier le dispositif avant le d\u00e9but de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_before"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.minBefore6
                                  ),
                                  defaultStylesClassName: classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "minBefore6",
                                      __plasmic_idx_0,
                                      "value"
                                    ]).apply(null, eventArgs);
                                  },
                                  options: (() => {
                                    try {
                                      return [
                                        {
                                          value: 15,
                                          label: "15 min avant"
                                        },
                                        {
                                          value: 30,
                                          label: "30 min avant"
                                        },
                                        {
                                          value: 60,
                                          label: "1 h avant"
                                        }
                                      ];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  placeholder: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cdi52
                                      )}
                                    >
                                      {"S\u00e9lectionner"}
                                    </div>
                                  ),
                                  popupScopeClassName: sty["minBefore6__popup"],
                                  showSearch: true,
                                  size: "middle",
                                  value: generateStateValueProp($state, [
                                    "minBefore6",
                                    __plasmic_idx_0,
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "minBefore6[].value"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  undefined ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "minBefore6[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSelect
                                    data-plasmic-name={"minBefore6"}
                                    data-plasmic-override={overrides.minBefore6}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          ) : null}
                          <FormItemWrapper
                            data-plasmic-name={"generalDescription11"}
                            data-plasmic-override={
                              overrides.generalDescription11
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.generalDescription11
                            )}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wewC
                                )}
                              >
                                {"Description sp\u00e9cifique"}
                              </div>
                            }
                            name={"description"}
                          >
                            <TextAreaInput
                              data-plasmic-name={"textAreaInput4"}
                              data-plasmic-override={overrides.textAreaInput4}
                              className={classNames(
                                "__wab_instance",
                                sty.textAreaInput4
                              )}
                              inputMode={"text"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textAreaInput4",
                                  __plasmic_idx_0,
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            />
                          </FormItemWrapper>
                        </Stack__>
                      </FormWrapper>
                    );
                  })();
                })
              : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e2DKf)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2OQgA
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Fichier attach\u00e9"}
                  </span>
                </React.Fragment>
              </div>
              <UploadWrapper
                data-plasmic-name={"upload2"}
                data-plasmic-override={overrides.upload2}
                accept={""}
                className={classNames("__wab_instance", sty.upload2)}
                dragAndDropFiles={true}
                files={generateStateValueProp($state, ["upload2", "files"])}
                maxCount={1}
                onFilesChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["upload2", "files"]).apply(
                    null,
                    eventArgs
                  );
                }}
                showUploadList={true}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__wynpC)}
                  size={"large"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vcR2
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Importer ou d\u00e9poser un fichier"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2Hgep
                    )}
                  >
                    {"10 Mo max"}
                  </div>
                </AntdButton>
              </UploadWrapper>
            </Stack__>
            <Button
              className={classNames("__wab_instance", sty.button__zRdLr)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wsxB
                  )}
                >
                  {"Mettre \u00e0 jour"}
                </div>
              }
              submitsForm={true}
            />
          </FormWrapper>
        );
      })()}
      footer={
        <div className={classNames(projectcss.all, sty.freeBox__xOwbp)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uSjc
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Dernière modification à : " +
                    new Date(
                      $props.tasks.find(
                        d => Number(d.id) == Number($state.taskIdUpdate)
                      ).updated_at
                    )
                      .toISOString()
                      .replace("T", " ")
                      .replace(/\.\d{3}Z/, "")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__d1LKr
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Dernière modification par : " +
                    $queries.getProfil.data[0].email
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      }
      heading={
        <div
          data-plasmic-name={"frame1437254017"}
          data-plasmic-override={overrides.frame1437254017}
          className={classNames(projectcss.all, sty.frame1437254017)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qDhb)}
          >
            <div
              data-plasmic-name={"name3"}
              data-plasmic-override={overrides.name3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.name3
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      "Modifier carte n\xB0" +
                      $state.formUpdateRunsheet.value.id
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Modifier carte";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254020"}
            data-plasmic-override={overrides.frame1437254020}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254020)}
          >
            <LinkSimpleIcon
              className={classNames(projectcss.all, sty.svg__ynIpQ)}
              role={"img"}
            />

            <XIcon
              className={classNames(projectcss.all, sty.svg__zFux1)}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      }
      isOpen={generateStateValueProp($state, ["modalUpdateRunsheet", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, [
          "modalUpdateRunsheet",
          "isOpen"
        ]).apply(null, eventArgs);

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modalUpdateRunsheet: [
    "modalUpdateRunsheet",
    "frame1437254017",
    "name3",
    "frame1437254020",
    "formUpdateRunsheet",
    "event2",
    "select3",
    "title3",
    "input3",
    "status2",
    "selectStatus",
    "dateStart3",
    "timePicker7",
    "dateEnd3",
    "timePicker8",
    "startingTask2",
    "checkbox",
    "impactPrio",
    "select4",
    "generalDescription2",
    "richTextEditor",
    "textAreaInput2",
    "radioBut",
    "particular",
    "_switch",
    "share",
    "switch2",
    "precisions2",
    "select9",
    "thematic2",
    "select10",
    "impliques",
    "select8",
    "impact",
    "input4",
    "impactComment",
    "textAreaInput3",
    "dispo2",
    "ddDispo2",
    "dataGrid",
    "formTaskDispo4",
    "dispositifs2",
    "position4",
    "positionSite2",
    "taskDispositifId",
    "select31",
    "dispositifId",
    "select36",
    "minBefore5",
    "minBefore6",
    "generalDescription11",
    "textAreaInput4",
    "upload2"
  ],
  frame1437254017: ["frame1437254017", "name3", "frame1437254020"],
  name3: ["name3"],
  frame1437254020: ["frame1437254020"],
  formUpdateRunsheet: [
    "formUpdateRunsheet",
    "event2",
    "select3",
    "title3",
    "input3",
    "status2",
    "selectStatus",
    "dateStart3",
    "timePicker7",
    "dateEnd3",
    "timePicker8",
    "startingTask2",
    "checkbox",
    "impactPrio",
    "select4",
    "generalDescription2",
    "richTextEditor",
    "textAreaInput2",
    "radioBut",
    "particular",
    "_switch",
    "share",
    "switch2",
    "precisions2",
    "select9",
    "thematic2",
    "select10",
    "impliques",
    "select8",
    "impact",
    "input4",
    "impactComment",
    "textAreaInput3",
    "dispo2",
    "ddDispo2",
    "dataGrid",
    "formTaskDispo4",
    "dispositifs2",
    "position4",
    "positionSite2",
    "taskDispositifId",
    "select31",
    "dispositifId",
    "select36",
    "minBefore5",
    "minBefore6",
    "generalDescription11",
    "textAreaInput4",
    "upload2"
  ],
  event2: ["event2", "select3"],
  select3: ["select3"],
  title3: ["title3", "input3"],
  input3: ["input3"],
  status2: ["status2", "selectStatus"],
  selectStatus: ["selectStatus"],
  dateStart3: ["dateStart3", "timePicker7"],
  timePicker7: ["timePicker7"],
  dateEnd3: ["dateEnd3", "timePicker8"],
  timePicker8: ["timePicker8"],
  startingTask2: ["startingTask2", "checkbox"],
  checkbox: ["checkbox"],
  impactPrio: ["impactPrio", "select4"],
  select4: ["select4"],
  generalDescription2: [
    "generalDescription2",
    "richTextEditor",
    "textAreaInput2"
  ],
  richTextEditor: ["richTextEditor"],
  textAreaInput2: ["textAreaInput2"],
  radioBut: ["radioBut", "particular", "_switch", "share", "switch2"],
  particular: ["particular", "_switch"],
  _switch: ["_switch"],
  share: ["share", "switch2"],
  switch2: ["switch2"],
  precisions2: ["precisions2", "select9"],
  select9: ["select9"],
  thematic2: ["thematic2", "select10"],
  select10: ["select10"],
  impliques: ["impliques", "select8"],
  select8: ["select8"],
  impact: ["impact", "input4"],
  input4: ["input4"],
  impactComment: ["impactComment", "textAreaInput3"],
  textAreaInput3: ["textAreaInput3"],
  dispo2: ["dispo2", "ddDispo2", "dataGrid"],
  ddDispo2: ["ddDispo2"],
  dataGrid: ["dataGrid"],
  formTaskDispo4: [
    "formTaskDispo4",
    "dispositifs2",
    "position4",
    "positionSite2",
    "taskDispositifId",
    "select31",
    "dispositifId",
    "select36",
    "minBefore5",
    "minBefore6",
    "generalDescription11",
    "textAreaInput4"
  ],
  dispositifs2: [
    "dispositifs2",
    "position4",
    "positionSite2",
    "taskDispositifId",
    "select31",
    "dispositifId",
    "select36",
    "minBefore5",
    "minBefore6",
    "generalDescription11",
    "textAreaInput4"
  ],
  position4: ["position4", "positionSite2"],
  positionSite2: ["positionSite2"],
  taskDispositifId: ["taskDispositifId", "select31"],
  select31: ["select31"],
  dispositifId: ["dispositifId", "select36"],
  select36: ["select36"],
  minBefore5: ["minBefore5", "minBefore6"],
  minBefore6: ["minBefore6"],
  generalDescription11: ["generalDescription11", "textAreaInput4"],
  textAreaInput4: ["textAreaInput4"],
  upload2: ["upload2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modalUpdateRunsheet: typeof Modal;
  frame1437254017: "div";
  name3: "div";
  frame1437254020: "div";
  formUpdateRunsheet: typeof FormWrapper;
  event2: typeof FormItemWrapper;
  select3: typeof AntdSelect;
  title3: typeof FormItemWrapper;
  input3: typeof AntdInput;
  status2: typeof FormItemWrapper;
  selectStatus: typeof AntdSelect;
  dateStart3: typeof FormItemWrapper;
  timePicker7: typeof AntdDatePicker;
  dateEnd3: typeof FormItemWrapper;
  timePicker8: typeof AntdDatePicker;
  startingTask2: typeof FormItemWrapper;
  checkbox: typeof Checkbox;
  impactPrio: typeof FormItemWrapper;
  select4: typeof AntdSelect;
  generalDescription2: typeof FormItemWrapper;
  richTextEditor: typeof Quill;
  textAreaInput2: typeof TextAreaInput;
  radioBut: "div";
  particular: typeof FormItemWrapper;
  _switch: typeof Switch;
  share: typeof FormItemWrapper;
  switch2: typeof Switch;
  precisions2: typeof FormItemWrapper;
  select9: typeof AntdSelect;
  thematic2: typeof FormItemWrapper;
  select10: typeof AntdSelect;
  impliques: typeof FormItemWrapper;
  select8: typeof AntdSelect;
  impact: typeof FormItemWrapper;
  input4: typeof AntdInput;
  impactComment: typeof FormItemWrapper;
  textAreaInput3: typeof TextAreaInput;
  dispo2: typeof FormItemWrapper;
  ddDispo2: typeof AntdSelect;
  dataGrid: typeof DataGrid;
  formTaskDispo4: typeof FormWrapper;
  dispositifs2: "div";
  position4: typeof FormItemWrapper;
  positionSite2: typeof AntdSelect;
  taskDispositifId: typeof FormItemWrapper;
  select31: typeof AntdSelect;
  dispositifId: typeof FormItemWrapper;
  select36: typeof AntdSelect;
  minBefore5: typeof FormItemWrapper;
  minBefore6: typeof AntdSelect;
  generalDescription11: typeof FormItemWrapper;
  textAreaInput4: typeof TextAreaInput;
  upload2: typeof UploadWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpdateTask__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUpdateTask__VariantsArgs;
    args?: PlasmicUpdateTask__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUpdateTask__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUpdateTask__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUpdateTask__ArgProps,
          internalVariantPropNames: PlasmicUpdateTask__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUpdateTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modalUpdateRunsheet") {
    func.displayName = "PlasmicUpdateTask";
  } else {
    func.displayName = `PlasmicUpdateTask.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdateTask = Object.assign(
  // Top-level PlasmicUpdateTask renders the root element
  makeNodeComponent("modalUpdateRunsheet"),
  {
    // Helper components rendering sub-elements
    frame1437254017: makeNodeComponent("frame1437254017"),
    name3: makeNodeComponent("name3"),
    frame1437254020: makeNodeComponent("frame1437254020"),
    formUpdateRunsheet: makeNodeComponent("formUpdateRunsheet"),
    event2: makeNodeComponent("event2"),
    select3: makeNodeComponent("select3"),
    title3: makeNodeComponent("title3"),
    input3: makeNodeComponent("input3"),
    status2: makeNodeComponent("status2"),
    selectStatus: makeNodeComponent("selectStatus"),
    dateStart3: makeNodeComponent("dateStart3"),
    timePicker7: makeNodeComponent("timePicker7"),
    dateEnd3: makeNodeComponent("dateEnd3"),
    timePicker8: makeNodeComponent("timePicker8"),
    startingTask2: makeNodeComponent("startingTask2"),
    checkbox: makeNodeComponent("checkbox"),
    impactPrio: makeNodeComponent("impactPrio"),
    select4: makeNodeComponent("select4"),
    generalDescription2: makeNodeComponent("generalDescription2"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    radioBut: makeNodeComponent("radioBut"),
    particular: makeNodeComponent("particular"),
    _switch: makeNodeComponent("_switch"),
    share: makeNodeComponent("share"),
    switch2: makeNodeComponent("switch2"),
    precisions2: makeNodeComponent("precisions2"),
    select9: makeNodeComponent("select9"),
    thematic2: makeNodeComponent("thematic2"),
    select10: makeNodeComponent("select10"),
    impliques: makeNodeComponent("impliques"),
    select8: makeNodeComponent("select8"),
    impact: makeNodeComponent("impact"),
    input4: makeNodeComponent("input4"),
    impactComment: makeNodeComponent("impactComment"),
    textAreaInput3: makeNodeComponent("textAreaInput3"),
    dispo2: makeNodeComponent("dispo2"),
    ddDispo2: makeNodeComponent("ddDispo2"),
    dataGrid: makeNodeComponent("dataGrid"),
    formTaskDispo4: makeNodeComponent("formTaskDispo4"),
    dispositifs2: makeNodeComponent("dispositifs2"),
    position4: makeNodeComponent("position4"),
    positionSite2: makeNodeComponent("positionSite2"),
    taskDispositifId: makeNodeComponent("taskDispositifId"),
    select31: makeNodeComponent("select31"),
    dispositifId: makeNodeComponent("dispositifId"),
    select36: makeNodeComponent("select36"),
    minBefore5: makeNodeComponent("minBefore5"),
    minBefore6: makeNodeComponent("minBefore6"),
    generalDescription11: makeNodeComponent("generalDescription11"),
    textAreaInput4: makeNodeComponent("textAreaInput4"),
    upload2: makeNodeComponent("upload2"),

    // Metadata about props expected for PlasmicUpdateTask
    internalVariantProps: PlasmicUpdateTask__VariantProps,
    internalArgProps: PlasmicUpdateTask__ArgProps
  }
);

export default PlasmicUpdateTask;
/* prettier-ignore-end */
