/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: 2sust96-3y0R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicModaltest.module.css"; // plasmic-import: 2sust96-3y0R/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicModaltest__VariantMembers = {};
export type PlasmicModaltest__VariantsArgs = {};
type VariantPropType = keyof PlasmicModaltest__VariantsArgs;
export const PlasmicModaltest__VariantProps = new Array<VariantPropType>();

export type PlasmicModaltest__ArgsType = {};
type ArgPropType = keyof PlasmicModaltest__ArgsType;
export const PlasmicModaltest__ArgProps = new Array<ArgPropType>();

export type PlasmicModaltest__OverridesType = {
  modal?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  freeBox?: Flex__<"div">;
};

export interface DefaultModaltestProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicModaltest__RenderFunc(props: {
  variants: PlasmicModaltest__VariantsArgs;
  args: PlasmicModaltest__ArgsType;
  overrides: PlasmicModaltest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <Modal
      data-plasmic-name={"modal"}
      data-plasmic-override={overrides.modal}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modal)}
      content={(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["form", "value"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["postgresCreate"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "v6umJuHyep6kPNyCAJjouT",
                      opId: "52065019-402d-41d1-b735-666a07a1abeb",
                      userArgs: {
                        variables: [
                          $state.form.value.name,
                          $state.form.value.message,
                          $ctx.SupabaseUser.user.id
                        ]
                      },
                      cacheKey: null,
                      invalidatedKeys: ["plasmic_refresh_all"],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["postgresCreate"] != null &&
              typeof $steps["postgresCreate"] === "object" &&
              typeof $steps["postgresCreate"].then === "function"
            ) {
              $steps["postgresCreate"] = await $steps["postgresCreate"];
            }
          },
          onIsSubmittingChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "isSubmitting",
              ["form", "isSubmitting"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          ref: ref => {
            $refs["form"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__knbri)}
              label={"Name"}
              name={"name"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  value: generateStateValueProp($state, ["input", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__e2PLk)}
              label={"Message"}
              name={"message"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.textArea),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["textArea", "value"],
                      AntdTextArea_Helpers
                    ).apply(null, eventArgs);
                  },
                  value: generateStateValueProp($state, ["textArea", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "textArea.value"
                    }
                  ],
                  [],
                  AntdTextArea_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdTextArea
                    data-plasmic-name={"textArea"}
                    data-plasmic-override={overrides.textArea}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <AntdButton
              className={classNames("__wab_instance", sty.button__yuwkl)}
              submitsForm={true}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Dzkz
                )}
              >
                {"Submit"}
              </div>
            </AntdButton>
          </FormWrapper>
        );
      })()}
      footer={
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <Button
            color={"muted"}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ktbsH
                )}
              >
                {"Close"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["updateAriaDialogTriggerIsOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["ariaDialogTrigger", "isOpen"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAriaDialogTriggerIsOpen"] != null &&
                typeof $steps["updateAriaDialogTriggerIsOpen"] === "object" &&
                typeof $steps["updateAriaDialogTriggerIsOpen"].then ===
                  "function"
              ) {
                $steps["updateAriaDialogTriggerIsOpen"] = await $steps[
                  "updateAriaDialogTriggerIsOpen"
                ];
              }
            }}
            type={"soft"}
          />
        </div>
      }
      heading={
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3
          )}
        >
          {"Heading"}
        </h3>
      }
      isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modal", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      showHeader={false}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modal: ["modal", "h3", "form", "input", "textArea", "freeBox"],
  h3: ["h3"],
  form: ["form", "input", "textArea"],
  input: ["input"],
  textArea: ["textArea"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modal: typeof Modal;
  h3: "h3";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModaltest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModaltest__VariantsArgs;
    args?: PlasmicModaltest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModaltest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModaltest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicModaltest__ArgProps,
          internalVariantPropNames: PlasmicModaltest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModaltest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modal") {
    func.displayName = "PlasmicModaltest";
  } else {
    func.displayName = `PlasmicModaltest.${nodeName}`;
  }
  return func;
}

export const PlasmicModaltest = Object.assign(
  // Top-level PlasmicModaltest renders the root element
  makeNodeComponent("modal"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicModaltest
    internalVariantProps: PlasmicModaltest__VariantProps,
    internalArgProps: PlasmicModaltest__ArgProps
  }
);

export default PlasmicModaltest;
/* prettier-ignore-end */
