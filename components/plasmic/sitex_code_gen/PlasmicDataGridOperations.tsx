/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: fD0WHTPLkGL9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import StatutOperation from "../../StatutOperation"; // plasmic-import: t3UNk4cyoFOJ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicDataGridOperations.module.css"; // plasmic-import: fD0WHTPLkGL9/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: OJTnKg-tc1Dy/icon
import PencilSimple2Icon from "./icons/PlasmicIcon__PencilSimple2"; // plasmic-import: fOfs7eSixjDp/icon
import Copy2Icon from "./icons/PlasmicIcon__Copy2"; // plasmic-import: 8Sz6eUIwlz4y/icon
import Trash2Icon from "./icons/PlasmicIcon__Trash2"; // plasmic-import: YzkRektosh9D/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicDataGridOperations__VariantMembers = {};
export type PlasmicDataGridOperations__VariantsArgs = {};
type VariantPropType = keyof PlasmicDataGridOperations__VariantsArgs;
export const PlasmicDataGridOperations__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDataGridOperations__ArgsType = {
  pageNumber?: number;
  onPageNumberChange?: (val: string) => void;
  headerItems?: any;
  onHeaderItemsChange2?: (val: string) => void;
  clientId?: number;
};
type ArgPropType = keyof PlasmicDataGridOperations__ArgsType;
export const PlasmicDataGridOperations__ArgProps = new Array<ArgPropType>(
  "pageNumber",
  "onPageNumberChange",
  "headerItems",
  "onHeaderItemsChange2",
  "clientId"
);

export type PlasmicDataGridOperations__OverridesType = {
  dataGridOperations?: Flex__<"div">;
  container?: Flex__<"div">;
  grid?: Flex__<"div">;
  header?: Flex__<"div">;
  checkbox2?: Flex__<typeof AntdCheckbox>;
  list?: Flex__<"div">;
  checkbox?: Flex__<typeof AntdCheckbox>;
  statutOperation?: Flex__<typeof StatutOperation>;
  tableCell?: Flex__<"div">;
  edit?: Flex__<"button">;
  copy?: Flex__<"button">;
  _delete?: Flex__<"button">;
  pagination?: Flex__<"div">;
  emptyDataMsg?: Flex__<"div">;
};

export interface DefaultDataGridOperationsProps {
  pageNumber?: number;
  onPageNumberChange?: (val: string) => void;
  headerItems?: any;
  onHeaderItemsChange2?: (val: string) => void;
  clientId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDataGridOperations__RenderFunc(props: {
  variants: PlasmicDataGridOperations__VariantsArgs;
  args: PlasmicDataGridOperations__ArgsType;
  overrides: PlasmicDataGridOperations__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          clientId: 1
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageNumber",
        type: "writable",
        variableType: "number",

        valueProp: "pageNumber",
        onChangeProp: "onPageNumberChange"
      },
      {
        path: "checkbox[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "headerItems",
        type: "writable",
        variableType: "object",

        valueProp: "headerItems",
        onChangeProp: "onHeaderItemsChange2"
      },
      {
        path: "dataObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.rtxOperations.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    rtxOperations: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f",
        userArgs: {
          filters: [$props.clientId]
        },
        cacheKey: `plasmic.$.1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"dataGridOperations"}
      data-plasmic-override={overrides.dataGridOperations}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.dataGridOperations
      )}
    >
      {(() => {
        try {
          return $queries.rtxOperations?.data?.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          className={classNames(projectcss.all, sty.container)}
        >
          <div
            data-plasmic-name={"grid"}
            data-plasmic-override={overrides.grid}
            className={classNames(projectcss.all, sty.grid)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jHKt)}>
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__p7Fvl)}
                >
                  <AntdCheckbox
                    data-plasmic-name={"checkbox2"}
                    data-plasmic-override={overrides.checkbox2}
                    autoFocus={false}
                    checked={generateStateValueProp($state, [
                      "checkbox2",
                      "checked"
                    ])}
                    className={classNames("__wab_instance", sty.checkbox2)}
                    defaultChecked={false}
                    indeterminate={false}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "checkbox2",
                        "checked"
                      ]).apply(null, eventArgs);
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jpDfG
                      )}
                    >
                      {"Checkbox"}
                    </div>
                  </AntdCheckbox>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sN8Eb
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[0].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Nom";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__noa42)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDataObject"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dataObject"]
                              },
                              operation: 0,
                              value: $queries.rtxOperations.data.sort((a, b) =>
                                a.title.localeCompare(b.title)
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDataObject"] != null &&
                        typeof $steps["updateDataObject"] === "object" &&
                        typeof $steps["updateDataObject"].then === "function"
                      ) {
                        $steps["updateDataObject"] = await $steps[
                          "updateDataObject"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dfktz)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a5Zs
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[1].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Statut";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg___9MVnC)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDataObject"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dataObject"]
                              },
                              operation: 0,
                              value: $queries.rtxOperations.data.sort((a, b) =>
                                a.status.localeCompare(b.status)
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDataObject"] != null &&
                        typeof $steps["updateDataObject"] === "object" &&
                        typeof $steps["updateDataObject"].then === "function"
                      ) {
                        $steps["updateDataObject"] = await $steps[
                          "updateDataObject"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yLYza)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___077Zb
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[2].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Type";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__nETzN)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDataObject"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dataObject"]
                              },
                              operation: 0,
                              value: $queries.rtxOperations.data.sort((a, b) =>
                                a.type.localeCompare(b.type)
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDataObject"] != null &&
                        typeof $steps["updateDataObject"] === "object" &&
                        typeof $steps["updateDataObject"].then === "function"
                      ) {
                        $steps["updateDataObject"] = await $steps[
                          "updateDataObject"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o6VWd)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6KHh1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[3].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Date de d\u00e9but";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__fNm8A)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDataObject"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dataObject"]
                              },
                              operation: 0,
                              value: $queries.rtxOperations.data.sort(
                                (a, b) => new Date(b.date) - new Date(a.date)
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDataObject"] != null &&
                        typeof $steps["updateDataObject"] === "object" &&
                        typeof $steps["updateDataObject"].then === "function"
                      ) {
                        $steps["updateDataObject"] = await $steps[
                          "updateDataObject"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pxE2O)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ng6Iv
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[4].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Heures Dispositif";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__ttM31)}
                    role={"img"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fEeo)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__alJUp
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[5].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Budget (k\u20ac)";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__v7Ng0)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDataObject"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dataObject"]
                              },
                              operation: 0,
                              value: $queries.rtxOperations.data.sort(
                                (a, b) => a.budget - b.budget
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDataObject"] != null &&
                        typeof $steps["updateDataObject"] === "object" &&
                        typeof $steps["updateDataObject"].then === "function"
                      ) {
                        $steps["updateDataObject"] = await $steps[
                          "updateDataObject"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__qKaw5)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nI01A
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.headerItems[6].name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Actions";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const data = $state.dataObject;
                      const currentPage = $state.pageNumber;
                      const pageSize = 8;
                      const paginatedData = data.slice(
                        (currentPage - 1) * pageSize,
                        currentPage * pageSize
                      );
                      return paginatedData;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"list"}
                    data-plasmic-override={overrides.list}
                    className={classNames(projectcss.all, sty.list)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__t6HTu)}
                    >
                      {(() => {
                        const child$Props = {
                          autoFocus: false,
                          checked: generateStateValueProp($state, [
                            "checkbox",
                            __plasmic_idx_0,
                            "checked"
                          ]),
                          className: classNames("__wab_instance", sty.checkbox),
                          defaultChecked: (() => {
                            try {
                              return $state.checkbox2.checked;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })(),
                          indeterminate: false,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "checkbox",
                              __plasmic_idx_0,
                              "checked"
                            ]).apply(null, eventArgs);
                          }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "checked",
                              plasmicStateName: "checkbox[].checked"
                            }
                          ],
                          [__plasmic_idx_0],
                          undefined ?? {},
                          child$Props
                        );
                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "checkbox[].checked",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return $state.checkbox2.checked;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <AntdCheckbox
                            data-plasmic-name={"checkbox"}
                            data-plasmic-override={overrides.checkbox}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ddkLu
                              )}
                            >
                              {"Checkbox"}
                            </div>
                          </AntdCheckbox>
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m6BKv
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7I9Ux
                      )}
                    >
                      <StatutOperation
                        data-plasmic-name={"statutOperation"}
                        data-plasmic-override={overrides.statutOperation}
                        aEngager={(() => {
                          try {
                            return currentItem.status == "À engager";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        aPlanifier={(() => {
                          try {
                            return currentItem.status == "À planifier";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.statutOperation
                        )}
                        classe={(() => {
                          try {
                            return currentItem.status == "Classé";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        enCours={(() => {
                          try {
                            return currentItem.status == "En cours";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nwq59)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ctzt
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.type;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Tyt0
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bcbQt
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const date = new Date(currentItem.date_start);
                                const formattedDate = date
                                  .toISOString()
                                  .split("T")[0];
                                return formattedDate;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6SrR1
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3BZyk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined ?? "Non spécifié";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__w7V6C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fWtO
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.budget;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"tableCell"}
                      data-plasmic-override={overrides.tableCell}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.tableCell)}
                    >
                      <Stack__
                        as={"button"}
                        data-plasmic-name={"edit"}
                        data-plasmic-override={overrides.edit}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.edit
                        )}
                        ref={ref => {
                          $refs["edit"] = ref;
                        }}
                      >
                        <PencilSimple2Icon
                          className={classNames(projectcss.all, sty.svg__rQ668)}
                          role={"img"}
                        />
                      </Stack__>
                      <Stack__
                        as={"button"}
                        data-plasmic-name={"copy"}
                        data-plasmic-override={overrides.copy}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.copy
                        )}
                        ref={ref => {
                          $refs["copy"] = ref;
                        }}
                      >
                        <Copy2Icon
                          className={classNames(projectcss.all, sty.svg__ndt45)}
                          role={"img"}
                        />
                      </Stack__>
                      <Stack__
                        as={"button"}
                        data-plasmic-name={"_delete"}
                        data-plasmic-override={overrides._delete}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty._delete
                        )}
                        ref={ref => {
                          $refs["_delete"] = ref;
                        }}
                      >
                        <Trash2Icon
                          className={classNames(projectcss.all, sty.svg__hjs01)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                  </div>
                );
              })}
            </div>
          </div>
          {(() => {
            try {
              return $state.dataObject.length > 8;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"pagination"}
              data-plasmic-override={overrides.pagination}
              hasGap={true}
              className={classNames(projectcss.all, sty.pagination)}
            >
              {(() => {
                try {
                  return $state.pageNumber > 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__tohIo)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePageNumber"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageNumber"]
                            },
                            operation: 3
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue - 1);
                            return oldValue - 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageNumber"] != null &&
                      typeof $steps["updatePageNumber"] === "object" &&
                      typeof $steps["updatePageNumber"].then === "function"
                    ) {
                      $steps["updatePageNumber"] = await $steps[
                        "updatePageNumber"
                      ];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const itemsPerPage = 8;
                      const data = $queries.rtxOperations.data;
                      const pageCount = Math.ceil(data.length / itemsPerPage);
                      const paginationArray = Array.from(
                        { length: pageCount },
                        (_, i) => i + 1
                      );
                      return paginationArray;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xjDwr)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePageNumber"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageNumber"]
                              },
                              operation: 0,
                              value: currentItem
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageNumber"] != null &&
                        typeof $steps["updatePageNumber"] === "object" &&
                        typeof $steps["updatePageNumber"].then === "function"
                      ) {
                        $steps["updatePageNumber"] = await $steps[
                          "updatePageNumber"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ut6MP
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                );
              })}
              {(() => {
                try {
                  return $queries.rtxOperations?.data?.length > 8;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__bdsEu)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePageNumber"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageNumber"]
                            },
                            operation: 2
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue + 1);
                            return oldValue + 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageNumber"] != null &&
                      typeof $steps["updatePageNumber"] === "object" &&
                      typeof $steps["updatePageNumber"].then === "function"
                    ) {
                      $steps["updatePageNumber"] = await $steps[
                        "updatePageNumber"
                      ];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </Stack__>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return $queries.rtxOperations?.data?.length == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"emptyDataMsg"}
          data-plasmic-override={overrides.emptyDataMsg}
          className={classNames(projectcss.all, sty.emptyDataMsg)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uvLxk
            )}
          >
            {"Aucune donn\u00e9es trouv\u00e9es"}
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dataGridOperations: [
    "dataGridOperations",
    "container",
    "grid",
    "header",
    "checkbox2",
    "list",
    "checkbox",
    "statutOperation",
    "tableCell",
    "edit",
    "copy",
    "_delete",
    "pagination",
    "emptyDataMsg"
  ],
  container: [
    "container",
    "grid",
    "header",
    "checkbox2",
    "list",
    "checkbox",
    "statutOperation",
    "tableCell",
    "edit",
    "copy",
    "_delete",
    "pagination"
  ],
  grid: [
    "grid",
    "header",
    "checkbox2",
    "list",
    "checkbox",
    "statutOperation",
    "tableCell",
    "edit",
    "copy",
    "_delete"
  ],
  header: ["header", "checkbox2"],
  checkbox2: ["checkbox2"],
  list: [
    "list",
    "checkbox",
    "statutOperation",
    "tableCell",
    "edit",
    "copy",
    "_delete"
  ],
  checkbox: ["checkbox"],
  statutOperation: ["statutOperation"],
  tableCell: ["tableCell", "edit", "copy", "_delete"],
  edit: ["edit"],
  copy: ["copy"],
  _delete: ["_delete"],
  pagination: ["pagination"],
  emptyDataMsg: ["emptyDataMsg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dataGridOperations: "div";
  container: "div";
  grid: "div";
  header: "div";
  checkbox2: typeof AntdCheckbox;
  list: "div";
  checkbox: typeof AntdCheckbox;
  statutOperation: typeof StatutOperation;
  tableCell: "div";
  edit: "button";
  copy: "button";
  _delete: "button";
  pagination: "div";
  emptyDataMsg: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataGridOperations__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataGridOperations__VariantsArgs;
    args?: PlasmicDataGridOperations__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataGridOperations__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDataGridOperations__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataGridOperations__ArgProps,
          internalVariantPropNames: PlasmicDataGridOperations__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDataGridOperations__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dataGridOperations") {
    func.displayName = "PlasmicDataGridOperations";
  } else {
    func.displayName = `PlasmicDataGridOperations.${nodeName}`;
  }
  return func;
}

export const PlasmicDataGridOperations = Object.assign(
  // Top-level PlasmicDataGridOperations renders the root element
  makeNodeComponent("dataGridOperations"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    grid: makeNodeComponent("grid"),
    header: makeNodeComponent("header"),
    checkbox2: makeNodeComponent("checkbox2"),
    list: makeNodeComponent("list"),
    checkbox: makeNodeComponent("checkbox"),
    statutOperation: makeNodeComponent("statutOperation"),
    tableCell: makeNodeComponent("tableCell"),
    edit: makeNodeComponent("edit"),
    copy: makeNodeComponent("copy"),
    _delete: makeNodeComponent("_delete"),
    pagination: makeNodeComponent("pagination"),
    emptyDataMsg: makeNodeComponent("emptyDataMsg"),

    // Metadata about props expected for PlasmicDataGridOperations
    internalVariantProps: PlasmicDataGridOperations__VariantProps,
    internalArgProps: PlasmicDataGridOperations__ArgProps
  }
);

export default PlasmicDataGridOperations;
/* prettier-ignore-end */
