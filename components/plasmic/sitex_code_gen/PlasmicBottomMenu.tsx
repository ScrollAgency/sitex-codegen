/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: x-phPVP8sWsV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LeftMenu2 from "../../LeftMenu2"; // plasmic-import: fWjlLt6IwrU8/component
import ButtonBottomMenu from "../../ButtonBottomMenu"; // plasmic-import: JyCXAdKcNiAC/component

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicBottomMenu.module.css"; // plasmic-import: x-phPVP8sWsV/css

import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: mPYk0ZEUw6Wc/icon
import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: vxoLwbtBRoIB/icon
import PlayCircleIcon from "./icons/PlasmicIcon__PlayCircle"; // plasmic-import: 3xbs9uQMOSa-/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon
import PhCalendarCheckFillIcon from "./icons/PlasmicIcon__PhCalendarCheckFill"; // plasmic-import: NYzYvDEBOieQ/icon
import PhChartDonutFillIcon from "./icons/PlasmicIcon__PhChartDonutFill"; // plasmic-import: CxVtPFpWDYul/icon
import AddressBookIcon from "./icons/PlasmicIcon__AddressBook"; // plasmic-import: Ckm62y44qvwo/icon

createPlasmicElementProxy;

export type PlasmicBottomMenu__VariantMembers = {};
export type PlasmicBottomMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicBottomMenu__VariantsArgs;
export const PlasmicBottomMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicBottomMenu__ArgsType = {};
type ArgPropType = keyof PlasmicBottomMenu__ArgsType;
export const PlasmicBottomMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicBottomMenu__OverridesType = {
  root?: Flex__<"div">;
  sidebarMenu?: Flex__<"div">;
  logo?: Flex__<"div">;
  picto?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  menuLinksWrapper?: Flex__<"div">;
  accueil?: Flex__<typeof LeftMenu2>;
  mainCourante?: Flex__<typeof LeftMenu2>;
  operations?: Flex__<typeof LeftMenu2>;
  frame1437254281?: Flex__<"div">;
  sidebarMenuSublink?: Flex__<"div">;
  label?: Flex__<"div">;
  sidebarMenuSublink2?: Flex__<"div">;
  label2?: Flex__<"div">;
  bilanRetex?: Flex__<typeof LeftMenu2>;
  positionsSite?: Flex__<typeof LeftMenu2>;
  annuaire?: Flex__<typeof LeftMenu2>;
  parametres?: Flex__<typeof LeftMenu2>;
  frame1437254283?: Flex__<"div">;
  deconnexion?: Flex__<typeof LeftMenu2>;
  urgenceWrapper?: Flex__<"div">;
  statusBadge?: Flex__<"div">;
  statusBadge2?: Flex__<"div">;
  sidebarMenu2?: Flex__<"div">;
  menuLinksWrapper2?: Flex__<"div">;
};

export interface DefaultBottomMenuProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBottomMenu__RenderFunc(props: {
  variants: PlasmicBottomMenu__VariantsArgs;
  args: PlasmicBottomMenu__ArgsType;
  overrides: PlasmicBottomMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"sidebarMenu"}
        data-plasmic-override={overrides.sidebarMenu}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebarMenu)}
      >
        <div
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames(projectcss.all, sty.logo)}
          onClick={async event => {
            const $steps = {};

            $steps["goToDashboard"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToDashboard"] != null &&
              typeof $steps["goToDashboard"] === "object" &&
              typeof $steps["goToDashboard"].then === "function"
            ) {
              $steps["goToDashboard"] = await $steps["goToDashboard"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pxyb4
            )}
          >
            {"Sitex"}
          </div>
          <div
            data-plasmic-name={"picto"}
            data-plasmic-override={overrides.picto}
            className={classNames(projectcss.all, sty.picto)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__af5Os)}
              displayHeight={"8.442129135131836px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"31.71537208557129px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/sitex_code_gen/images/frame66.svg",
                fullWidth: 31.71537208557129,
                fullHeight: 8.442129135131836,
                aspectRatio: 3.555556
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___7DGq9)}
              displayHeight={"8.442129135131836px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"31.71537208557129px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/sitex_code_gen/images/frame67.svg",
                fullWidth: 31.71537208557129,
                fullHeight: 8.442129135131836,
                aspectRatio: 2.833333
              }}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <PhGearFillIcon
            className={classNames(projectcss.all, sty.svg___4Gswq)}
            onClick={async event => {
              const $steps = {};

              $steps["goToParametres"] = true
                ? (() => {
                    const actionArgs = { destination: `/parametres` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToParametres"] != null &&
                typeof $steps["goToParametres"] === "object" &&
                typeof $steps["goToParametres"].then === "function"
              ) {
                $steps["goToParametres"] = await $steps["goToParametres"];
              }
            }}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"menuLinksWrapper"}
          data-plasmic-override={overrides.menuLinksWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuLinksWrapper)}
        >
          <LeftMenu2
            data-plasmic-name={"accueil"}
            data-plasmic-override={overrides.accueil}
            className={classNames("__wab_instance", sty.accueil)}
          />

          <LeftMenu2
            data-plasmic-name={"mainCourante"}
            data-plasmic-override={overrides.mainCourante}
            className={classNames("__wab_instance", sty.mainCourante)}
          />

          <LeftMenu2
            data-plasmic-name={"operations"}
            data-plasmic-override={overrides.operations}
            className={classNames("__wab_instance", sty.operations)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254281"}
            data-plasmic-override={overrides.frame1437254281}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254281)}
          >
            <div
              data-plasmic-name={"sidebarMenuSublink"}
              data-plasmic-override={overrides.sidebarMenuSublink}
              className={classNames(projectcss.all, sty.sidebarMenuSublink)}
            >
              <div
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToOperations"] = true
                    ? (() => {
                        const actionArgs = { destination: `/operations` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToOperations"] != null &&
                    typeof $steps["goToOperations"] === "object" &&
                    typeof $steps["goToOperations"].then === "function"
                  ) {
                    $steps["goToOperations"] = await $steps["goToOperations"];
                  }
                }}
                style={(() => {
                  try {
                    return {
                      color:
                        $ctx.pagePath === "/operations" ||
                        $ctx.pagePath.includes("/runsheet")
                          ? "#7641F1"
                          : "#FBFBFB",
                      "font-weight":
                        $ctx.pagePath === "/operations" ||
                        $ctx.pagePath.includes("/runsheet")
                          ? "700"
                          : "400"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                {"Op\u00e9rations"}
              </div>
            </div>
            <div
              data-plasmic-name={"sidebarMenuSublink2"}
              data-plasmic-override={overrides.sidebarMenuSublink2}
              className={classNames(projectcss.all, sty.sidebarMenuSublink2)}
            >
              <div
                data-plasmic-name={"label2"}
                data-plasmic-override={overrides.label2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToModeles"] = true
                    ? (() => {
                        const actionArgs = { destination: `/modeles` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToModeles"] != null &&
                    typeof $steps["goToModeles"] === "object" &&
                    typeof $steps["goToModeles"].then === "function"
                  ) {
                    $steps["goToModeles"] = await $steps["goToModeles"];
                  }
                }}
                style={(() => {
                  try {
                    return {
                      color:
                        $ctx.pagePath === "/modeles" ? "#7641F1" : "#FBFBFB",
                      "font-weight":
                        $ctx.pagePath === "/modeles" ? "700" : "400"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                {"Mod\u00e8les"}
              </div>
            </div>
          </Stack__>
          <LeftMenu2
            data-plasmic-name={"bilanRetex"}
            data-plasmic-override={overrides.bilanRetex}
            className={classNames("__wab_instance", sty.bilanRetex)}
          />

          <LeftMenu2
            data-plasmic-name={"positionsSite"}
            data-plasmic-override={overrides.positionsSite}
            className={classNames("__wab_instance", sty.positionsSite)}
          />

          <LeftMenu2
            data-plasmic-name={"annuaire"}
            data-plasmic-override={overrides.annuaire}
            className={classNames("__wab_instance", sty.annuaire)}
          />

          <LeftMenu2
            data-plasmic-name={"parametres"}
            data-plasmic-override={overrides.parametres}
            className={classNames("__wab_instance", sty.parametres)}
          />
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame1437254283"}
          data-plasmic-override={overrides.frame1437254283}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1437254283)}
        >
          <LeftMenu2
            data-plasmic-name={"deconnexion"}
            data-plasmic-override={overrides.deconnexion}
            className={classNames("__wab_instance", sty.deconnexion)}
          />
        </Stack__>
        {false ? (
          <div
            data-plasmic-name={"urgenceWrapper"}
            data-plasmic-override={overrides.urgenceWrapper}
            className={classNames(projectcss.all, sty.urgenceWrapper)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge"}
              data-plasmic-override={overrides.statusBadge}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__q77Vd)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3L8Yu
                )}
              >
                {"0"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge2"}
              data-plasmic-override={overrides.statusBadge2}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge2)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__qtuU8)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nxHVx
                )}
              >
                {"0"}
              </div>
            </Stack__>
          </div>
        ) : null}
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"sidebarMenu2"}
        data-plasmic-override={overrides.sidebarMenu2}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebarMenu2)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"menuLinksWrapper2"}
          data-plasmic-override={overrides.menuLinksWrapper2}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuLinksWrapper2)}
        >
          <ButtonBottomMenu
            className={classNames(
              "__wab_instance",
              sty.buttonBottomMenu__id2Rj
            )}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ioqFn
                )}
              >
                {"MAIN COURANTE"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["goToMainCourante"] = true
                ? (() => {
                    const actionArgs = { destination: `/main_courante` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToMainCourante"] != null &&
                typeof $steps["goToMainCourante"] === "object" &&
                typeof $steps["goToMainCourante"].then === "function"
              ) {
                $steps["goToMainCourante"] = await $steps["goToMainCourante"];
              }
            }}
            start={
              <PlayCircleIcon
                className={classNames(projectcss.all, sty.svg__kqSx)}
                role={"img"}
              />
            }
            type={(() => {
              try {
                return $ctx.pagePath === "/main_courante" ? "current" : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          />

          <ButtonBottomMenu
            className={classNames(
              "__wab_instance",
              sty.buttonBottomMenu__uWqT0
            )}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yZl1G
                )}
              >
                {"OP\u00c9RATIONS"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["goToOperations"] = true
                ? (() => {
                    const actionArgs = { destination: `/operations` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToOperations"] != null &&
                typeof $steps["goToOperations"] === "object" &&
                typeof $steps["goToOperations"].then === "function"
              ) {
                $steps["goToOperations"] = await $steps["goToOperations"];
              }
            }}
            start={
              <PhCalendarCheckFillIcon
                className={classNames(projectcss.all, sty.svg__mWbyw)}
                role={"img"}
              />
            }
            type={(() => {
              try {
                return $ctx.pagePath.includes("/runsheet") ||
                  $ctx.pagePath === "/operations" ||
                  $ctx.pagePath === "/modeles"
                  ? "current"
                  : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          />

          <ButtonBottomMenu
            className={classNames(
              "__wab_instance",
              sty.buttonBottomMenu__gQf6R
            )}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iDSeJ
                )}
              >
                {"BILAN/RETEX"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["goToBilan"] = true
                ? (() => {
                    const actionArgs = { destination: `/bilan_retex_general` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToBilan"] != null &&
                typeof $steps["goToBilan"] === "object" &&
                typeof $steps["goToBilan"].then === "function"
              ) {
                $steps["goToBilan"] = await $steps["goToBilan"];
              }
            }}
            start={
              <PhChartDonutFillIcon
                className={classNames(projectcss.all, sty.svg___8HzhQ)}
                role={"img"}
              />
            }
            type={(() => {
              try {
                return $ctx.pagePath === "/bilan" ? "current" : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          />

          <ButtonBottomMenu
            className={classNames(
              "__wab_instance",
              sty.buttonBottomMenu___2Ujqy
            )}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xzZ4L
                )}
              >
                {"ANNUAIRE"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["goToAnnuaire"] = true
                ? (() => {
                    const actionArgs = { destination: `/annuaire` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToAnnuaire"] != null &&
                typeof $steps["goToAnnuaire"] === "object" &&
                typeof $steps["goToAnnuaire"].then === "function"
              ) {
                $steps["goToAnnuaire"] = await $steps["goToAnnuaire"];
              }
            }}
            start={
              <AddressBookIcon
                className={classNames(projectcss.all, sty.svg__zcorA)}
                role={"img"}
              />
            }
            type={(() => {
              try {
                return $ctx.pagePath === "/annuaire" ? "current" : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          />
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebarMenu",
    "logo",
    "picto",
    "freeBox",
    "menuLinksWrapper",
    "accueil",
    "mainCourante",
    "operations",
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "bilanRetex",
    "positionsSite",
    "annuaire",
    "parametres",
    "frame1437254283",
    "deconnexion",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2",
    "sidebarMenu2",
    "menuLinksWrapper2"
  ],
  sidebarMenu: [
    "sidebarMenu",
    "logo",
    "picto",
    "freeBox",
    "menuLinksWrapper",
    "accueil",
    "mainCourante",
    "operations",
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "bilanRetex",
    "positionsSite",
    "annuaire",
    "parametres",
    "frame1437254283",
    "deconnexion",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  logo: ["logo", "picto"],
  picto: ["picto"],
  freeBox: ["freeBox"],
  menuLinksWrapper: [
    "menuLinksWrapper",
    "accueil",
    "mainCourante",
    "operations",
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2",
    "bilanRetex",
    "positionsSite",
    "annuaire",
    "parametres"
  ],
  accueil: ["accueil"],
  mainCourante: ["mainCourante"],
  operations: ["operations"],
  frame1437254281: [
    "frame1437254281",
    "sidebarMenuSublink",
    "label",
    "sidebarMenuSublink2",
    "label2"
  ],
  sidebarMenuSublink: ["sidebarMenuSublink", "label"],
  label: ["label"],
  sidebarMenuSublink2: ["sidebarMenuSublink2", "label2"],
  label2: ["label2"],
  bilanRetex: ["bilanRetex"],
  positionsSite: ["positionsSite"],
  annuaire: ["annuaire"],
  parametres: ["parametres"],
  frame1437254283: ["frame1437254283", "deconnexion"],
  deconnexion: ["deconnexion"],
  urgenceWrapper: ["urgenceWrapper", "statusBadge", "statusBadge2"],
  statusBadge: ["statusBadge"],
  statusBadge2: ["statusBadge2"],
  sidebarMenu2: ["sidebarMenu2", "menuLinksWrapper2"],
  menuLinksWrapper2: ["menuLinksWrapper2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebarMenu: "div";
  logo: "div";
  picto: "div";
  freeBox: "div";
  menuLinksWrapper: "div";
  accueil: typeof LeftMenu2;
  mainCourante: typeof LeftMenu2;
  operations: typeof LeftMenu2;
  frame1437254281: "div";
  sidebarMenuSublink: "div";
  label: "div";
  sidebarMenuSublink2: "div";
  label2: "div";
  bilanRetex: typeof LeftMenu2;
  positionsSite: typeof LeftMenu2;
  annuaire: typeof LeftMenu2;
  parametres: typeof LeftMenu2;
  frame1437254283: "div";
  deconnexion: typeof LeftMenu2;
  urgenceWrapper: "div";
  statusBadge: "div";
  statusBadge2: "div";
  sidebarMenu2: "div";
  menuLinksWrapper2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBottomMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBottomMenu__VariantsArgs;
    args?: PlasmicBottomMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBottomMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBottomMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBottomMenu__ArgProps,
          internalVariantPropNames: PlasmicBottomMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBottomMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBottomMenu";
  } else {
    func.displayName = `PlasmicBottomMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicBottomMenu = Object.assign(
  // Top-level PlasmicBottomMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebarMenu: makeNodeComponent("sidebarMenu"),
    logo: makeNodeComponent("logo"),
    picto: makeNodeComponent("picto"),
    freeBox: makeNodeComponent("freeBox"),
    menuLinksWrapper: makeNodeComponent("menuLinksWrapper"),
    accueil: makeNodeComponent("accueil"),
    mainCourante: makeNodeComponent("mainCourante"),
    operations: makeNodeComponent("operations"),
    frame1437254281: makeNodeComponent("frame1437254281"),
    sidebarMenuSublink: makeNodeComponent("sidebarMenuSublink"),
    label: makeNodeComponent("label"),
    sidebarMenuSublink2: makeNodeComponent("sidebarMenuSublink2"),
    label2: makeNodeComponent("label2"),
    bilanRetex: makeNodeComponent("bilanRetex"),
    positionsSite: makeNodeComponent("positionsSite"),
    annuaire: makeNodeComponent("annuaire"),
    parametres: makeNodeComponent("parametres"),
    frame1437254283: makeNodeComponent("frame1437254283"),
    deconnexion: makeNodeComponent("deconnexion"),
    urgenceWrapper: makeNodeComponent("urgenceWrapper"),
    statusBadge: makeNodeComponent("statusBadge"),
    statusBadge2: makeNodeComponent("statusBadge2"),
    sidebarMenu2: makeNodeComponent("sidebarMenu2"),
    menuLinksWrapper2: makeNodeComponent("menuLinksWrapper2"),

    // Metadata about props expected for PlasmicBottomMenu
    internalVariantProps: PlasmicBottomMenu__VariantProps,
    internalArgProps: PlasmicBottomMenu__ArgProps
  }
);

export default PlasmicBottomMenu;
/* prettier-ignore-end */
