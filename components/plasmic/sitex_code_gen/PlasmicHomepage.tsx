/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: 6er0_CEeOues

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SitexButton } from "../../../plasmic-library/buttons/SitexButton"; // plasmic-import: EoIFqdbbsu6C/codeComponent

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 6er0_CEeOues/css

import Line295Icon from "./icons/PlasmicIcon__Line295"; // plasmic-import: 9JjVenKaquZL/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  global?: Flex__<"div">;
  backgroundImage?: Flex__<"div">;
  logoConnection?: Flex__<"div">;
  frame1437253902?: Flex__<"div">;
  frame133?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
  quote?: Flex__<"div">;
  buttonSitex?: Flex__<typeof SitexButton>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"global"}
            data-plasmic-override={overrides.global}
            className={classNames(projectcss.all, sty.global)}
          >
            <div
              data-plasmic-name={"backgroundImage"}
              data-plasmic-override={overrides.backgroundImage}
              className={classNames(projectcss.all, sty.backgroundImage)}
            />

            <div
              data-plasmic-name={"logoConnection"}
              data-plasmic-override={overrides.logoConnection}
              className={classNames(projectcss.all, sty.logoConnection)}
            >
              <div
                data-plasmic-name={"frame1437253902"}
                data-plasmic-override={overrides.frame1437253902}
                className={classNames(projectcss.all, sty.frame1437253902)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame133"}
                  data-plasmic-override={overrides.frame133}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame133)}
                >
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/sitex_code_gen/images/sitexPng.png",
                        fullWidth: 2988,
                        fullHeight: 1568,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <Line295Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"quote"}
                    data-plasmic-override={overrides.quote}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.quote
                    )}
                  >
                    {"Event staff management"}
                  </div>
                  <SitexButton
                    data-plasmic-name={"buttonSitex"}
                    data-plasmic-override={overrides.buttonSitex}
                    className={
                      classNames({ [sty["pcls_KvjUp_uoQYwz"]]: true }) +
                      " " +
                      classNames("__wab_instance", sty.buttonSitex)
                    }
                    destructive={false}
                    hierarchy={"primary"}
                    icon={"none"}
                    label={"Connexion"}
                    onClick={async VarInput => {
                      const $steps = {};

                      $steps["goLogin"] = true
                        ? (() => {
                            const actionArgs = { destination: `/login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goLogin"] != null &&
                        typeof $steps["goLogin"] === "object" &&
                        typeof $steps["goLogin"].then === "function"
                      ) {
                        $steps["goLogin"] = await $steps["goLogin"];
                      }
                    }}
                    size={"large"}
                  />
                </Stack__>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "global",
    "backgroundImage",
    "logoConnection",
    "frame1437253902",
    "frame133",
    "freeBox",
    "img",
    "svg",
    "quote",
    "buttonSitex"
  ],
  global: [
    "global",
    "backgroundImage",
    "logoConnection",
    "frame1437253902",
    "frame133",
    "freeBox",
    "img",
    "svg",
    "quote",
    "buttonSitex"
  ],
  backgroundImage: ["backgroundImage"],
  logoConnection: [
    "logoConnection",
    "frame1437253902",
    "frame133",
    "freeBox",
    "img",
    "svg",
    "quote",
    "buttonSitex"
  ],
  frame1437253902: [
    "frame1437253902",
    "frame133",
    "freeBox",
    "img",
    "svg",
    "quote",
    "buttonSitex"
  ],
  frame133: ["frame133", "freeBox", "img", "svg", "quote", "buttonSitex"],
  freeBox: ["freeBox", "img"],
  img: ["img"],
  svg: ["svg"],
  quote: ["quote"],
  buttonSitex: ["buttonSitex"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  global: "div";
  backgroundImage: "div";
  logoConnection: "div";
  frame1437253902: "div";
  frame133: "div";
  freeBox: "div";
  img: typeof PlasmicImg__;
  svg: "svg";
  quote: "div";
  buttonSitex: typeof SitexButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    global: makeNodeComponent("global"),
    backgroundImage: makeNodeComponent("backgroundImage"),
    logoConnection: makeNodeComponent("logoConnection"),
    frame1437253902: makeNodeComponent("frame1437253902"),
    frame133: makeNodeComponent("frame133"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    quote: makeNodeComponent("quote"),
    buttonSitex: makeNodeComponent("buttonSitex"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
