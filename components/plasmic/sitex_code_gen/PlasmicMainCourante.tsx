/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: 4P660rZYzasJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import UpdateTask from "../../UpdateTask"; // plasmic-import: dNZpqitvFdjI/component
import CreateTask from "../../CreateTask"; // plasmic-import: zV_rzxoZsY7r/component
import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import CreateUpdateSituation from "../../CreateUpdateSituation"; // plasmic-import: ifRw-0-06-Dn/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import LeftMenu from "../../LeftMenu"; // plasmic-import: P7MLNCNmfe0b/component
import Header from "../../Header"; // plasmic-import: 2eAt6bzh0iAt/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import Checkbox from "../../Checkbox"; // plasmic-import: QA-Gc8H2apHJ/component
import { Kanban } from "../../others/Kanban/Kanban"; // plasmic-import: b1_mc_uCs9FU/codeComponent
import { DataGrid } from "../../../plasmic-library/ui/data_grid"; // plasmic-import: UgPv5Wh-TKEv/codeComponent
import DataGridDispositif from "../../DataGridDispositif"; // plasmic-import: 7iqQuq7PqTqr/component
import File from "../../File"; // plasmic-import: kvtu7IVvZKcp/component
import BottomMenu from "../../BottomMenu"; // plasmic-import: x-phPVP8sWsV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicMainCourante.module.css"; // plasmic-import: 4P660rZYzasJ/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon
import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import SlidersHorizontalIcon from "./icons/PlasmicIcon__SlidersHorizontal"; // plasmic-import: yp2q2x7jxhyF/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: 7-eqbUfgKU33/icon

createPlasmicElementProxy;

export type PlasmicMainCourante__VariantMembers = {};
export type PlasmicMainCourante__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainCourante__VariantsArgs;
export const PlasmicMainCourante__VariantProps = new Array<VariantPropType>();

export type PlasmicMainCourante__ArgsType = {};
type ArgPropType = keyof PlasmicMainCourante__ArgsType;
export const PlasmicMainCourante__ArgProps = new Array<ArgPropType>();

export type PlasmicMainCourante__OverridesType = {
  root?: Flex__<"div">;
  updateTask2?: Flex__<typeof UpdateTask>;
  createTask?: Flex__<typeof CreateTask>;
  createUpdateSituationModal?: Flex__<typeof Modal>;
  frame1437254016?: Flex__<"div">;
  frame1437254019?: Flex__<"div">;
  createUpdateSituation2?: Flex__<typeof CreateUpdateSituation>;
  uploadFile?: Flex__<typeof Modal>;
  frame1437254034?: Flex__<"div">;
  name16?: Flex__<"div">;
  frame1437254035?: Flex__<"div">;
  formAddDoc?: Flex__<typeof FormWrapper>;
  event?: Flex__<typeof FormItemWrapper>;
  select2?: Flex__<typeof AntdSelect>;
  event2?: Flex__<typeof FormItemWrapper>;
  upload5?: Flex__<typeof UploadWrapper>;
  accueilDashboard?: Flex__<"div">;
  leftMenu?: Flex__<typeof LeftMenu>;
  main?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  tabs4?: Flex__<typeof TabsContainer>;
  mainContainer?: Flex__<"div">;
  tabButtons?: Flex__<"div">;
  tabButton?: Flex__<typeof TabButton>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  tabContent?: Flex__<typeof TabContent>;
  content?: Flex__<"div">;
  filterStuff?: Flex__<"div">;
  filter?: Flex__<"div">;
  buttonFilter?: Flex__<typeof Button>;
  filterValue?: Flex__<"div">;
  graviteNoir?: Flex__<typeof Checkbox>;
  graviteRouge?: Flex__<typeof Checkbox>;
  signalements?: Flex__<typeof Checkbox>;
  buttonAdd2?: Flex__<typeof Button>;
  buttonAdd3?: Flex__<typeof Button>;
  buttonAddStaff2?: Flex__<typeof Button>;
  _12?: Flex__<"div">;
  kanban?: Flex__<typeof Kanban>;
  _34?: Flex__<"div">;
  dataGrid?: Flex__<typeof DataGrid>;
  dataGridDispositif?: Flex__<typeof DataGridDispositif>;
  _5?: Flex__<"div">;
  file?: Flex__<typeof File>;
  bottomMenu?: Flex__<typeof BottomMenu>;
};

export interface DefaultMainCouranteProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainCourante__RenderFunc(props: {
  variants: PlasmicMainCourante__VariantsArgs;
  args: PlasmicMainCourante__ArgsType;
  overrides: PlasmicMainCourante__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "newTask",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "taskId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "updateTask",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "kanbanStatus",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "columns1",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "NON CATEGORIS\u00c9",
            title: "NON CATEGORIS\u00c9",
            backgroundColor: "#ECE6DF"
          },
          {
            id: "\u00c0 PLANIFIER",
            title: "\u00c0 PLANIFIER",
            backgroundColor: "#D9CDBF"
          },
          {
            id: "PLANIFI\u00c9E",
            title: "PLANIFI\u00c9E",
            backgroundColor: "#CBC1B5"
          },
          {
            id: "\u00c0 ENGAGER",
            title: "\u00c0 ENGAGER",
            backgroundColor: "#C6B49F"
          },
          { id: "EN COURS", title: "EN COURS", backgroundColor: "#B39C7F" },
          {
            id: "CLASS\u00c9E",
            title: "CLASS\u00c9E",
            backgroundColor: "#80694C"
          },
          { id: "NON FAIT", title: "NON FAIT", backgroundColor: "#604E39" }
        ]
      },
      {
        path: "columns2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.mcVariablesPriority.data.map(x => ({
                id: x.name,
                label: x.name,
                backgroundColor: x.color
              }));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    id: "SUIVI",
                    title: "Non cat\u00e9goris\u00e9e",
                    backgroundColor: "#ECE6DF"
                  },
                  {
                    id: "1: Nul",
                    label: "Code Blanc : nul",
                    backgroundColor: "#EAEAEC"
                  },
                  {
                    id: "2: Faible",
                    title: "Code Jaune : faible",
                    backgroundColor: "#FFD66B"
                  },
                  {
                    id: "3: Moyen",
                    title: "Code Orange : moyen",
                    backgroundColor: "#FF7F37"
                  },
                  {
                    id: "4: Fort",
                    title: "CODE ROUGE : FORT, RISQUE ARR\u00caT ",
                    backgroundColor: "#E20A37"
                  },
                  {
                    id: "5: Crise",
                    title: "Code Noir : CRISE",
                    backgroundColor: "#43454D"
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "tabs2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Kanban", id: 1 },
          { label: "Par Gravit\u00e9", id: 2 },
          { label: "Dispositif H arriv\u00e9e", id: 3 },
          { label: "Dispositif H d\u00e9part", id: 4 },
          { label: "Documents", id: 5 }
        ]
      },
      {
        path: "newTaskSitu",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "updateTaskSitu",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "header.operationId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "file[][].fileId",
        type: "private",
        variableType: "number"
      },
      {
        path: "file[][].type",
        type: "private",
        variableType: "text"
      },
      {
        path: "createTask.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "updateTask2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "updateTask2.taskIdUpdate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "updateTask2.stateTaskDispo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.mcTaskDispo.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "uploadFile.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.newDoc;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "upload5.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "newDoc",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formAddDoc.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formAddDoc",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formAddDoc.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formAddDoc",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "header.runsheet",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Runsheet"
      },
      {
        path: "leftMenu.subMenuParams",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "openFilter",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "graviteNoir[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "graviteRouge[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "signalements[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "filtredTasks",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.mcTasks.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "updateTask2.dispoDataGrid",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.mcDispoDataGrid.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "filtredDispoDataGridHeader",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.header.operationId == "" ||
                $state.header.operationId == undefined
                ? $queries.mcDispoDataGrid.data
                : $queries.mcDispoDataGrid.data.filter(
                    t =>
                      Number(t.associated_operation) ==
                      Number($state.header.operationId)
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "header.mois",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "header.userClientId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dispoColumnsDataGrid",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { value: "main_mission", label: "Mission" },
          { value: "position_name", label: "Position site" },
          { value: "date_on_site", label: "Date sur place" },
          { value: "date_start", label: "Date d\u00e9but t\u00e2che" },
          { value: "date_end", label: "Date fin t\u00e2che" },
          { value: "date_leave", label: "Date d\u00e9part dispositif" },
          { value: "description", label: "Description (Ref.Dim.)" },
          { value: "total_price", label: "Co\u00fbt total" },
          { value: "company_id", label: "Soci\u00e9t\u00e9" },
          { value: "status", label: "Statut" },
          { value: "code_price", label: "Code tarif" },
          { value: "total_hours", label: "Nb heures total" },
          { value: "role_name", label: "Nom fonction" },
          { value: "sector", label: "Secteur" },
          { value: "service_type", label: "Services" },
          { value: "updated_by", label: "Derni\u00e8re modification par" },
          { value: "updated_at", label: "Derni\u00e8re modification le" }
        ]
      },
      {
        path: "dataGridDispositif[].pageNumber",
        type: "private",
        variableType: "number"
      },
      {
        path: "dataGridDispositif[].headerItems",
        type: "private",
        variableType: "object"
      },
      {
        path: "createUpdateSituationModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.openSituation;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "createUpdateSituation2.situationId",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.mcSitu.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "openSituation",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    mcTasks: usePlasmicDataOp(() => {
      return {
        sourceId: "8BDg6iB9tWhTHhLhnaXBWU",
        opId: "2c71e561-9ccf-412c-9737-2509ec61ee99",
        userArgs: {
          path: [
            $state.header.userClientId == undefined
              ? 0
              : $state.header.userClientId,
            $state.header.operationId == 0 ||
            $state.header.operationId == undefined
              ? ""
              : "&associated_operation=" + $state.header.operationId
          ]
        },
        cacheKey: `plasmic.$.2c71e561-9ccf-412c-9737-2509ec61ee99.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcOperations: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.1ac88ed9-11c0-4a2e-b5b5-ef856c7c895f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcFeedbacks: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "d3381cbb-f842-4211-a840-806181643757",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.d3381cbb-f842-4211-a840-806181643757.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcTaskDispo: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "330d5325-6e12-4b25-97e4-15853a7883d0",
        userArgs: {},
        cacheKey: `plasmic.$.330d5325-6e12-4b25-97e4-15853a7883d0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcFiles: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "131797d4-fe96-49f4-8d74-de7dbc1b9618",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.131797d4-fe96-49f4-8d74-de7dbc1b9618.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcPositions: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "571ccdeb-8d29-4eff-a446-13bb51d67404",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.571ccdeb-8d29-4eff-a446-13bb51d67404.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcDispositif: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "8a2f0ee3-a6bf-421f-bcf3-5e61735476c7",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.8a2f0ee3-a6bf-421f-bcf3-5e61735476c7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcDispoDataGrid: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "069e9c41-c976-4aab-bc58-904cf4e3c2f9",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.069e9c41-c976-4aab-bc58-904cf4e3c2f9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcVariablesPriority: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "b813dc76-0c5d-4e14-ad33-c9171e58a848",
        userArgs: {
          filters: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.b813dc76-0c5d-4e14-ad33-c9171e58a848.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcSituOld: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "aa06ca05-767a-491b-b9b8-8c51a3f0d1d6",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.aa06ca05-767a-491b-b9b8-8c51a3f0d1d6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mcSitu: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "a4147156-22f3-4ca3-a089-0c63e5ddc045",
        userArgs: {
          query: [$state.header.userClientId]
        },
        cacheKey: `plasmic.$.a4147156-22f3-4ca3-a089-0c63e5ddc045.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMainCourante.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMainCourante.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMainCourante.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <UpdateTask
          data-plasmic-name={"updateTask2"}
          data-plasmic-override={overrides.updateTask2}
          className={classNames("__wab_instance", sty.updateTask2)}
          clientId={(() => {
            try {
              return $state.header.userClientId;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          dispoDataGrid={generateStateValueProp($state, [
            "updateTask2",
            "dispoDataGrid"
          ])}
          dispositif={(() => {
            try {
              return $queries.mcDispositif;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onDispoDataGridChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "updateTask2",
              "dispoDataGrid"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["updateTask2", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onStateTaskDispoChange2={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "updateTask2",
              "stateTaskDispo"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onTaskIdUpdateChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "updateTask2",
              "taskIdUpdate"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["updateTask2", "open"])}
          operation={(() => {
            try {
              return $queries.mcOperations;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          positions={(() => {
            try {
              return $queries.mcPositions;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          stateTaskDispo={generateStateValueProp($state, [
            "updateTask2",
            "stateTaskDispo"
          ])}
          taskDispo={(() => {
            try {
              return $queries.mcTaskDispo;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          taskIdUpdate={generateStateValueProp($state, [
            "updateTask2",
            "taskIdUpdate"
          ])}
          tasks={(() => {
            try {
              return $queries.mcTasks.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          type={"main_courante"}
        />

        <CreateTask
          data-plasmic-name={"createTask"}
          data-plasmic-override={overrides.createTask}
          className={classNames("__wab_instance", sty.createTask)}
          clientId={(() => {
            try {
              return $state.header.userClientId;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          dispositif={(() => {
            try {
              return $queries.mcDispositif;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onOpenChange2={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["createTask", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["createTask", "open"])}
          operation={(() => {
            try {
              return $queries.mcOperations;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          positions={(() => {
            try {
              return $queries.mcPositions;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          type={"main_courante"}
        />

        <Modal
          data-plasmic-name={"createUpdateSituationModal"}
          data-plasmic-override={overrides.createUpdateSituationModal}
          className={classNames(
            "__wab_instance",
            sty.createUpdateSituationModal
          )}
          closeOnBackdropClick={false}
          content={
            <CreateUpdateSituation
              data-plasmic-name={"createUpdateSituation2"}
              data-plasmic-override={overrides.createUpdateSituation2}
              className={classNames(
                "__wab_instance",
                sty.createUpdateSituation2
              )}
              onSituationIdChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "createUpdateSituation2",
                  "situationId"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              operationId={(() => {
                try {
                  return $state.header.operationId == 0 ||
                    $state.header.operationId
                    ? $queries.mcSitu.data[0].operation_id
                    : $state.header.operationId;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              operations={(() => {
                try {
                  return $queries.mcOperations;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              situationId={generateStateValueProp($state, [
                "createUpdateSituation2",
                "situationId"
              ])}
            />
          }
          footer={null}
          heading={
            <div
              data-plasmic-name={"frame1437254016"}
              data-plasmic-override={overrides.frame1437254016}
              className={classNames(projectcss.all, sty.frame1437254016)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fflKk
                )}
              >
                {"Point de situation"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame1437254019"}
                data-plasmic-override={overrides.frame1437254019}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1437254019)}
              >
                <LinkSimpleIcon
                  className={classNames(projectcss.all, sty.svg__k4We7)}
                  role={"img"}
                />

                <XIcon
                  className={classNames(projectcss.all, sty.svg__evn1L)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateOpenSituation"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["openSituation"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateOpenSituation"] != null &&
                      typeof $steps["updateOpenSituation"] === "object" &&
                      typeof $steps["updateOpenSituation"].then === "function"
                    ) {
                      $steps["updateOpenSituation"] = await $steps[
                        "updateOpenSituation"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </Stack__>
            </div>
          }
          isOpen={generateStateValueProp($state, [
            "createUpdateSituationModal",
            "isOpen"
          ])}
          noTrigger={true}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "createUpdateSituationModal",
              "isOpen"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />

        <Modal
          data-plasmic-name={"uploadFile"}
          data-plasmic-override={overrides.uploadFile}
          className={classNames("__wab_instance", sty.uploadFile)}
          closeOnBackdropClick={false}
          content={(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.formAddDoc),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["formAddDoc", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["supabaseUploadFile"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                          opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                          userArgs: {
                            path: [$state.formAddDoc.value.file[0].name],
                            content: [$state.formAddDoc.value.file[0].contents],
                            contentType: [$state.formAddDoc.value.file[0].type]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["supabaseUploadFile"] != null &&
                  typeof $steps["supabaseUploadFile"] === "object" &&
                  typeof $steps["supabaseUploadFile"].then === "function"
                ) {
                  $steps["supabaseUploadFile"] = await $steps[
                    "supabaseUploadFile"
                  ];
                }

                $steps["postgresCreate"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "56bc8a2e-b455-4d71-8a4a-2e0819c64283",
                          userArgs: {
                            variables: [
                              $steps.supabaseUploadFile?.path,
                              Number(
                                $state.formAddDoc.value.associated_operation
                              ),
                              $state.header.userClientId
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [
                            "131797d4-fe96-49f4-8d74-de7dbc1b9618"
                          ],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresCreate"] != null &&
                  typeof $steps["postgresCreate"] === "object" &&
                  typeof $steps["postgresCreate"].then === "function"
                ) {
                  $steps["postgresCreate"] = await $steps["postgresCreate"];
                }

                $steps["updateNewDoc"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["newDoc"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewDoc"] != null &&
                  typeof $steps["updateNewDoc"] === "object" &&
                  typeof $steps["updateNewDoc"].then === "function"
                ) {
                  $steps["updateNewDoc"] = await $steps["updateNewDoc"];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["formAddDoc", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["formAddDoc"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "formAddDoc.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "formAddDoc.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"formAddDoc"}
                data-plasmic-override={overrides.formAddDoc}
                {...child$Props}
              >
                <FormItemWrapper
                  data-plasmic-name={"event"}
                  data-plasmic-override={overrides.event}
                  className={classNames("__wab_instance", sty.event)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b8Jj5
                      )}
                    >
                      {"Op\u00e9ration associ\u00e9e"}
                    </div>
                  }
                  name={"associated_operation"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <AntdSelect
                    data-plasmic-name={"select2"}
                    data-plasmic-override={overrides.select2}
                    className={classNames("__wab_instance", sty.select2)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select2",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.mcOperations.data.map(op => ({
                          value: op.id,
                          label: op.title
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gaaHh
                        )}
                      >
                        {"Select..."}
                      </div>
                    }
                    popupScopeClassName={sty["select2__popup"]}
                    size={"middle"}
                    value={generateStateValueProp($state, ["select2", "value"])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"event2"}
                  data-plasmic-override={overrides.event2}
                  className={classNames("__wab_instance", sty.event2)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hYFd4
                      )}
                    >
                      {"Fichier attach\u00e9"}
                    </div>
                  }
                  name={"file"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <UploadWrapper
                    data-plasmic-name={"upload5"}
                    data-plasmic-override={overrides.upload5}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload5)}
                    dragAndDropFiles={true}
                    files={generateStateValueProp($state, ["upload5", "files"])}
                    maxCount={1}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload5",
                        "files"
                      ]).apply(null, eventArgs);
                    }}
                    showUploadList={true}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__emEnT
                      )}
                      size={"large"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ztLzu
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Importer ou d\u00e9poser un fichier"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Sucv
                        )}
                      >
                        {"10 Mb max"}
                      </div>
                    </AntdButton>
                  </UploadWrapper>
                </FormItemWrapper>
                <Button
                  className={classNames("__wab_instance", sty.button__njmY)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tr9Mo
                      )}
                    >
                      {"Importer"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["supabaseUploadFile"] =
                      $state.upload5.files.length > 0
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                                opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                                userArgs: {
                                  path: [$state.upload5.files[0].name],
                                  content: [$state.upload5.files[0].contents],
                                  contentType: [$state.upload5.files[0].type]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["supabaseUploadFile"] != null &&
                      typeof $steps["supabaseUploadFile"] === "object" &&
                      typeof $steps["supabaseUploadFile"].then === "function"
                    ) {
                      $steps["supabaseUploadFile"] = await $steps[
                        "supabaseUploadFile"
                      ];
                    }

                    $steps["updateNewTask"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["newTask"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNewTask"] != null &&
                      typeof $steps["updateNewTask"] === "object" &&
                      typeof $steps["updateNewTask"].then === "function"
                    ) {
                      $steps["updateNewTask"] = await $steps["updateNewTask"];
                    }
                  }}
                  submitsForm={true}
                />
              </FormWrapper>
            );
          })()}
          footer={
            <div className={classNames(projectcss.all, sty.freeBox__yQTc3)} />
          }
          heading={
            <div
              data-plasmic-name={"frame1437254034"}
              data-plasmic-override={overrides.frame1437254034}
              className={classNames(projectcss.all, sty.frame1437254034)}
            >
              <div
                data-plasmic-name={"name16"}
                data-plasmic-override={overrides.name16}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.name16
                )}
              >
                {"Nouveau document"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame1437254035"}
                data-plasmic-override={overrides.frame1437254035}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1437254035)}
              >
                <LinkSimpleIcon
                  className={classNames(projectcss.all, sty.svg__z6KF8)}
                  role={"img"}
                />

                <XIcon
                  className={classNames(projectcss.all, sty.svg___50P4K)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateNewDoc"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["newDoc"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNewDoc"] != null &&
                      typeof $steps["updateNewDoc"] === "object" &&
                      typeof $steps["updateNewDoc"].then === "function"
                    ) {
                      $steps["updateNewDoc"] = await $steps["updateNewDoc"];
                    }
                  }}
                  role={"img"}
                />
              </Stack__>
            </div>
          }
          isOpen={generateStateValueProp($state, ["uploadFile", "isOpen"])}
          noTrigger={true}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["uploadFile", "isOpen"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          showFooter={false}
          trigger={null}
        />

        <div
          data-plasmic-name={"accueilDashboard"}
          data-plasmic-override={overrides.accueilDashboard}
          className={classNames(projectcss.all, sty.accueilDashboard)}
        >
          <LeftMenu
            data-plasmic-name={"leftMenu"}
            data-plasmic-override={overrides.leftMenu}
            className={classNames("__wab_instance", sty.leftMenu)}
            onSubMenuParamsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "leftMenu",
                "subMenuParams"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />

          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              onMoisChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["header", "mois"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onOperationIdChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "header",
                  "operationId"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onRunsheetChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["header", "runsheet"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onUserClientIdChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "header",
                  "userClientId"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              operationId={generateStateValueProp($state, [
                "header",
                "operationId"
              ])}
              runsheet={generateStateValueProp($state, ["header", "runsheet"])}
            />

            <TabsContainer
              data-plasmic-name={"tabs4"}
              data-plasmic-override={overrides.tabs4}
              initialKey={(() => {
                try {
                  return 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx => (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"mainContainer"}
                    data-plasmic-override={overrides.mainContainer}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.mainContainer)}
                  >
                    <div
                      data-plasmic-name={"tabButtons"}
                      data-plasmic-override={overrides.tabButtons}
                      className={classNames(projectcss.all, sty.tabButtons)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.tabs2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <TabButton
                            data-plasmic-name={"tabButton"}
                            data-plasmic-override={overrides.tabButton}
                            className={classNames(
                              "__wab_instance",
                              sty.tabButton
                            )}
                            key={currentIndex}
                            tabKey={(() => {
                              try {
                                return currentItem.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___2TAjK
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0RrPm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Text";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateKanbanStatus"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["kanbanStatus"]
                                        },
                                        operation: 0,
                                        value: currentIndex
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateKanbanStatus"] != null &&
                                  typeof $steps["updateKanbanStatus"] ===
                                    "object" &&
                                  typeof $steps["updateKanbanStatus"].then ===
                                    "function"
                                ) {
                                  $steps["updateKanbanStatus"] = await $steps[
                                    "updateKanbanStatus"
                                  ];
                                }
                              }}
                              type={"tag"}
                            />
                          </TabButton>
                        );
                      })}
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.tabs2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <TabContent
                          data-plasmic-name={"tabContent"}
                          data-plasmic-override={overrides.tabContent}
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent
                          )}
                          key={currentIndex}
                          tabKey={(() => {
                            try {
                              return currentItem.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"content"}
                            data-plasmic-override={overrides.content}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.content)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"filterStuff"}
                              data-plasmic-override={overrides.filterStuff}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.filterStuff
                              )}
                            >
                              <div
                                data-plasmic-name={"filter"}
                                data-plasmic-override={overrides.filter}
                                className={classNames(
                                  projectcss.all,
                                  sty.filter
                                )}
                              >
                                <Button
                                  data-plasmic-name={"buttonFilter"}
                                  data-plasmic-override={overrides.buttonFilter}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.buttonFilter
                                  )}
                                  disabled={(() => {
                                    try {
                                      return currentItem.id > 2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  end={
                                    <PlusIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___3AlyE
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  iconStart={true}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qk9Ky
                                      )}
                                    >
                                      {"Filtrer"}
                                    </div>
                                  }
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateOpenFilter"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["openFilter"]
                                            },
                                            operation: 4
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateOpenFilter"] != null &&
                                      typeof $steps["updateOpenFilter"] ===
                                        "object" &&
                                      typeof $steps["updateOpenFilter"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOpenFilter"] = await $steps[
                                        "updateOpenFilter"
                                      ];
                                    }
                                  }}
                                  start={
                                    <SlidersHorizontalIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__fvY6W
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  type={"secondary"}
                                />

                                {(() => {
                                  try {
                                    return (
                                      $state.openFilter &&
                                      (currentItem.id == 1 ||
                                        currentItem.id == 2)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"filterValue"}
                                    data-plasmic-override={
                                      overrides.filterValue
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.filterValue
                                    )}
                                  >
                                    <XIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___6M4Ka
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateOpenFilter"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["openFilter"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateOpenFilter"] != null &&
                                          typeof $steps["updateOpenFilter"] ===
                                            "object" &&
                                          typeof $steps["updateOpenFilter"]
                                            .then === "function"
                                        ) {
                                          $steps["updateOpenFilter"] =
                                            await $steps["updateOpenFilter"];
                                        }
                                      }}
                                      role={"img"}
                                    />

                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.graviteNoir
                                        ),
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "graviteNoir",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        label: (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jNg2K
                                            )}
                                          >
                                            {"Gravit\u00e9: Noir"}
                                          </div>
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "graviteNoir",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }

                                          (async val => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return ($state.filtredTasks =
                                                          $queries.mcTasks.data.response.filter(
                                                            task =>
                                                              (!$state
                                                                .graviteNoir[0]
                                                                .isSelected ||
                                                                task.priority ===
                                                                  "5: Crise") &&
                                                              (!$state
                                                                .graviteRouge[0]
                                                                .isSelected ||
                                                                task.priority ===
                                                                  "4: Fort") &&
                                                              (!$state
                                                                .signalements[0]
                                                                .isSelected ||
                                                                task.type ===
                                                                  "signalement")
                                                          ));
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }).apply(null, eventArgs);
                                        }
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "graviteNoir[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Checkbox
                                          data-plasmic-name={"graviteNoir"}
                                          data-plasmic-override={
                                            overrides.graviteNoir
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.graviteRouge
                                        ),
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "graviteRouge",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        label: "Gravit\u00e9: Rouge",
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "graviteRouge",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }

                                          (async val => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return ($state.filtredTasks =
                                                          $queries.mcTasks.data.response.filter(
                                                            task =>
                                                              (!$state
                                                                .graviteNoir[0]
                                                                .isSelected ||
                                                                task.priority ===
                                                                  "5: Crise") &&
                                                              (!$state
                                                                .graviteRouge[0]
                                                                .isSelected ||
                                                                task.priority ===
                                                                  "4: Fort") &&
                                                              (!$state
                                                                .signalements[0]
                                                                .isSelected ||
                                                                task.type ===
                                                                  "signalement")
                                                          ));
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }).apply(null, eventArgs);
                                        }
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "graviteRouge[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Checkbox
                                          data-plasmic-name={"graviteRouge"}
                                          data-plasmic-override={
                                            overrides.graviteRouge
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.signalements
                                        ),
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "signalements",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        label: "Signalements",
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "signalements",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }

                                          (async val => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return ($state.filtredTasks =
                                                          $queries.mcTasks.data.response.filter(
                                                            task =>
                                                              (!$state
                                                                .graviteNoir[0]
                                                                .isSelected ||
                                                                task.priority ===
                                                                  "5: Crise") &&
                                                              (!$state
                                                                .graviteRouge[0]
                                                                .isSelected ||
                                                                task.priority ===
                                                                  "4: Fort") &&
                                                              (!$state
                                                                .signalements[0]
                                                                .isSelected ||
                                                                task.type ===
                                                                  "signalement")
                                                          ));
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }).apply(null, eventArgs);
                                        }
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "signalements[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Checkbox
                                          data-plasmic-name={"signalements"}
                                          data-plasmic-override={
                                            overrides.signalements
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </Stack__>
                                ) : null}
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2Z90Z
                                )}
                              >
                                {(() => {
                                  try {
                                    return (
                                      currentItem.id == 1 || currentItem.id == 2
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Button
                                    data-plasmic-name={"buttonAdd2"}
                                    data-plasmic-override={overrides.buttonAdd2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonAdd2
                                    )}
                                    end={
                                      <PlusIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__fkBgg
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    iconEnd={true}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pPnv
                                        )}
                                      >
                                        {"Cr\u00e9er une nouvelle carte"}
                                      </div>
                                    }
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateVariable"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "createTask",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateVariable"] != null &&
                                        typeof $steps["updateVariable"] ===
                                          "object" &&
                                        typeof $steps["updateVariable"].then ===
                                          "function"
                                      ) {
                                        $steps["updateVariable"] = await $steps[
                                          "updateVariable"
                                        ];
                                      }
                                    }}
                                  />
                                ) : null}
                                {false ? (
                                  <Button
                                    data-plasmic-name={"buttonAdd3"}
                                    data-plasmic-override={overrides.buttonAdd3}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonAdd3
                                    )}
                                    end={
                                      <PlusIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__flqLk
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gaZXg
                                        )}
                                      >
                                        {"Point de situation"}
                                      </div>
                                    }
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateVariable"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["updateTaskSitu"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateVariable"] != null &&
                                        typeof $steps["updateVariable"] ===
                                          "object" &&
                                        typeof $steps["updateVariable"].then ===
                                          "function"
                                      ) {
                                        $steps["updateVariable"] = await $steps[
                                          "updateVariable"
                                        ];
                                      }

                                      $steps["updateTaskId"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["taskId"]
                                              },
                                              operation: 0,
                                              value:
                                                $queries.mcTasks.data.response
                                                  .filter(
                                                    x => x.type === "situation"
                                                  )
                                                  .filter(x =>
                                                    $queries.mcSituOld.data.some(
                                                      s =>
                                                        s.id.includes(
                                                          x.associated_operation
                                                        )
                                                    )
                                                  )[0].id
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateTaskId"] != null &&
                                        typeof $steps["updateTaskId"] ===
                                          "object" &&
                                        typeof $steps["updateTaskId"].then ===
                                          "function"
                                      ) {
                                        $steps["updateTaskId"] = await $steps[
                                          "updateTaskId"
                                        ];
                                      }
                                    }}
                                    type={"tertiary"}
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return currentItem.id == 5;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Button
                                    data-plasmic-name={"buttonAddStaff2"}
                                    data-plasmic-override={
                                      overrides.buttonAddStaff2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonAddStaff2
                                    )}
                                    end={
                                      <PlusIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___9KfkQ
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    iconEnd={true}
                                    label={"Importer un nouveau document"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateNewDoc"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["newDoc"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateNewDoc"] != null &&
                                        typeof $steps["updateNewDoc"] ===
                                          "object" &&
                                        typeof $steps["updateNewDoc"].then ===
                                          "function"
                                      ) {
                                        $steps["updateNewDoc"] = await $steps[
                                          "updateNewDoc"
                                        ];
                                      }
                                    }}
                                  />
                                ) : null}
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__tlKdx
                                  )}
                                  label={"Point de situation"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateOpenSituation"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["openSituation"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateOpenSituation"] != null &&
                                      typeof $steps["updateOpenSituation"] ===
                                        "object" &&
                                      typeof $steps["updateOpenSituation"]
                                        .then === "function"
                                    ) {
                                      $steps["updateOpenSituation"] =
                                        await $steps["updateOpenSituation"];
                                    }
                                  }}
                                  type={"tertiary"}
                                />
                              </Stack__>
                            </Stack__>
                            {(() => {
                              try {
                                return (
                                  currentItem.id == 1 || currentItem.id == 2
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"_12"}
                                data-plasmic-override={overrides._12}
                                className={classNames(projectcss.all, sty._12)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__x6QRf
                                  )}
                                >
                                  <Kanban
                                    data-plasmic-name={"kanban"}
                                    data-plasmic-override={overrides.kanban}
                                    cardMaxWidth={"320px"}
                                    cardMinHeight={"auto"}
                                    cardMinWidth={"280px"}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.kanban
                                    )}
                                    columnGap={"16px"}
                                    columnMaxWidth={"320px"}
                                    columnMinWidth={"320px"}
                                    containerHeight={"100%"}
                                    containerMaxWidth={"100%"}
                                    containerWidth={"100%"}
                                    fixedColumnOrder={(() => {
                                      try {
                                        return currentItem.id == 1
                                          ? $state.columns1
                                          : $state.columns2;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    groupBy={(() => {
                                      try {
                                        return currentItem.id == 1
                                          ? "status"
                                          : currentItem.id == 2
                                          ? "priority"
                                          : "type";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "precisions";
                                        }
                                        throw e;
                                      }
                                    })()}
                                    headerStyle={(() => {
                                      const __composite = {
                                        backgroundColor: null,
                                        textColor: null,
                                        borderRadius: null,
                                        textAlign: null,
                                        fontSize: "14px",
                                        fontWeight: null,
                                        padding: null,
                                        fontFamily: "Manrope",
                                        uppercase: null,
                                        stylesParColonne: null
                                      };
                                      __composite["backgroundColor"] =
                                        "#2D3748";
                                      __composite["textColor"] = "#2D3748";
                                      __composite["borderRadius"] = "12px";
                                      __composite["textAlign"] = "center";
                                      __composite["fontWeight"] = "900";
                                      __composite["padding"] = "8px 12px";
                                      __composite["uppercase"] = true;
                                      __composite["stylesParColonne"] =
                                        currentItem.id == 1
                                          ? $state.columns1.reduce(
                                              (acc, curr) => {
                                                acc[curr.id] = {
                                                  backgroundColor:
                                                    curr.backgroundColor
                                                };
                                                return acc;
                                              },
                                              {}
                                            )
                                          : $state.columns2.reduce(
                                              (acc, curr) => {
                                                acc[curr.id] = {
                                                  backgroundColor:
                                                    curr.backgroundColor
                                                };
                                                return acc;
                                              },
                                              {}
                                            );
                                      return __composite;
                                    })()}
                                    minHeight={"100%"}
                                    onTaskClick={async taskId => {
                                      const $steps = {};

                                      $steps["taskId"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "updateTask2",
                                                  "taskIdUpdate"
                                                ]
                                              },
                                              operation: 0,
                                              value: taskId
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["taskId"] != null &&
                                        typeof $steps["taskId"] === "object" &&
                                        typeof $steps["taskId"].then ===
                                          "function"
                                      ) {
                                        $steps["taskId"] = await $steps[
                                          "taskId"
                                        ];
                                      }

                                      $steps["stateTaskDispo"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "updateTask2",
                                                  "stateTaskDispo"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $queries.mcTaskDispo.data.filter(
                                                  t =>
                                                    Number(t.task_id) ==
                                                    Number(
                                                      $state.updateTask2
                                                        .taskIdUpdate
                                                    )
                                                )
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["stateTaskDispo"] != null &&
                                        typeof $steps["stateTaskDispo"] ===
                                          "object" &&
                                        typeof $steps["stateTaskDispo"].then ===
                                          "function"
                                      ) {
                                        $steps["stateTaskDispo"] = await $steps[
                                          "stateTaskDispo"
                                        ];
                                      }

                                      $steps["openTask"] =
                                        $queries.mcTasks.data.response.find(
                                          task =>
                                            Number(task.id) ==
                                            $state.updateTask2.taskIdUpdate
                                        ).type !== "situation"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "updateTask2",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["openTask"] != null &&
                                        typeof $steps["openTask"] ===
                                          "object" &&
                                        typeof $steps["openTask"].then ===
                                          "function"
                                      ) {
                                        $steps["openTask"] = await $steps[
                                          "openTask"
                                        ];
                                      }

                                      $steps["taskidSitu"] =
                                        $queries.mcTasks.data.response.find(
                                          task =>
                                            Number(task.id) ==
                                            $state.updateTask2.taskIdUpdate
                                        ).type == "situation"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["taskId"]
                                                },
                                                operation: 0,
                                                value: taskId
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["taskidSitu"] != null &&
                                        typeof $steps["taskidSitu"] ===
                                          "object" &&
                                        typeof $steps["taskidSitu"].then ===
                                          "function"
                                      ) {
                                        $steps["taskidSitu"] = await $steps[
                                          "taskidSitu"
                                        ];
                                      }

                                      $steps["openSitu"] =
                                        $queries.mcTasks.data.response.find(
                                          task =>
                                            Number(task.id) ==
                                            $state.updateTask2.taskIdUpdate
                                        ).type == "situation"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "updateTaskSitu"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["openSitu"] != null &&
                                        typeof $steps["openSitu"] ===
                                          "object" &&
                                        typeof $steps["openSitu"].then ===
                                          "function"
                                      ) {
                                        $steps["openSitu"] = await $steps[
                                          "openSitu"
                                        ];
                                      }
                                    }}
                                    onTaskMove={async (taskId, newGroup) => {
                                      const $steps = {};

                                      $steps["postgresUpdateById"] =
                                        currentItem.id == 1
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "v6umJuHyep6kPNyCAJjouT",
                                                  opId: "262ff463-7e28-4adf-8c4e-a36d9d724752",
                                                  userArgs: {
                                                    keys: [taskId],
                                                    variables: [newGroup]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "2c71e561-9ccf-412c-9737-2509ec61ee99"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["postgresUpdateById"] != null &&
                                        typeof $steps["postgresUpdateById"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateById"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateById"] =
                                          await $steps["postgresUpdateById"];
                                      }

                                      $steps["enCours"] =
                                        newGroup === "EN COURS" &&
                                        currentItem.id == 1
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "v6umJuHyep6kPNyCAJjouT",
                                                  opId: "958d7d2f-e6cd-427c-8594-7ffeaa575e13",
                                                  userArgs: {
                                                    keys: [taskId],
                                                    variables: [new Date()]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "2c71e561-9ccf-412c-9737-2509ec61ee99"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["enCours"] != null &&
                                        typeof $steps["enCours"] === "object" &&
                                        typeof $steps["enCours"].then ===
                                          "function"
                                      ) {
                                        $steps["enCours"] = await $steps[
                                          "enCours"
                                        ];
                                      }

                                      $steps["postgresUpdateById2"] =
                                        currentItem.id == 2
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "v6umJuHyep6kPNyCAJjouT",
                                                  opId: "3fb0fe0f-29d4-43ac-8130-2eca36cfa8b3",
                                                  userArgs: {
                                                    keys: [taskId],
                                                    variables: [newGroup]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "2c71e561-9ccf-412c-9737-2509ec61ee99"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["postgresUpdateById2"] != null &&
                                        typeof $steps["postgresUpdateById2"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateById2"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateById2"] =
                                          await $steps["postgresUpdateById2"];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: ["info", "Modifi\u00e9"]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }
                                    }}
                                    priorityColors={(() => {
                                      try {
                                        return $queries.mcVariablesPriority.data.map(
                                          x => ({
                                            priority: x.name,
                                            backgroundColor: x.color,
                                            backgroundColorOpacity: 0.05,
                                            borderColor: x.color
                                          })
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [{}];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    scrollBehavior={"overflow"}
                                    showFilters={false}
                                    sortBy={"date_start"}
                                    sortDirection={"desc"}
                                    taskColors={{
                                      backgroundColor: "#ffffff",
                                      textColor: "#131013",
                                      borderColor: "#E2E8F0"
                                    }}
                                    tasks={(() => {
                                      try {
                                        return $state.filtredTasks.filter(
                                          x => x.type !== "situation"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return (() => {
                                            const __composite = [
                                              {
                                                id: null,
                                                title: null,
                                                type: null
                                              }
                                            ];
                                            __composite["0"]["id"] = "1";
                                            __composite["0"]["title"] = "Lorem";
                                            __composite["0"]["type"] =
                                              "main_courante";
                                            return __composite;
                                          })();
                                        }
                                        throw e;
                                      }
                                    })()}
                                    typeColors={(() => {
                                      const __composite = [
                                        {
                                          type: null,
                                          backgroundColor: null,
                                          borderColor: null
                                        }
                                      ];
                                      __composite["0"]["type"] = "signalement";
                                      __composite["0"]["backgroundColor"] =
                                        "#F9F5FF";
                                      __composite["0"]["borderColor"] =
                                        "#7641F1";
                                      return __composite;
                                    })()}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  currentItem.id == 3 || currentItem.id == 4
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"_34"}
                                data-plasmic-override={overrides._34}
                                className={classNames(projectcss.all, sty._34)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__iiyHr
                                  )}
                                >
                                  <DataGrid
                                    data-plasmic-name={"dataGrid"}
                                    data-plasmic-override={overrides.dataGrid}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dataGrid
                                    )}
                                    columnLabels={(() => {
                                      try {
                                        return $state.dispoColumnsDataGrid.reduce(
                                          (acc, curr) => {
                                            acc[curr.value] = curr.label;
                                            return acc;
                                          },
                                          {}
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {};
                                        }
                                        throw e;
                                      }
                                    })()}
                                    currentPage={1}
                                    defaultSort={(() => {
                                      const __composite = {
                                        direction: null,
                                        field: null
                                      };
                                      __composite["direction"] =
                                        currentItem.id == 3 ? "asc" : "desc";
                                      __composite["field"] =
                                        currentItem.id == 3
                                          ? "date_on_site"
                                          : "date_leave";
                                      return __composite;
                                    })()}
                                    emptyStateMessage={
                                      "Aucune donnée disponible"
                                    }
                                    enableColumnReordering={true}
                                    enableExport={false}
                                    enablePrint={false}
                                    exportFormats={"excel"}
                                    groupByFields={(() => {
                                      try {
                                        return ["id"];
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    monetaryColumns={["budget"]}
                                    numericColumns={["budget"]}
                                    pageSize={100}
                                    pdfTitle={"Sitex - Commande"}
                                    responsive={{
                                      minWidth: "100%",
                                      horizontalOverflow: "auto",
                                      verticalOverflow: "auto",
                                      stickyHeader: true,
                                      compactOnMobile: true,
                                      breakpoint: 768
                                    }}
                                    showActions={false}
                                    tasks={(() => {
                                      try {
                                        return $state.filtredDispoDataGridHeader.filter(
                                          x =>
                                            $state.filtredTasks.some(
                                              y => y.id == Number(x.task_id)
                                            )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    theme={(() => {
                                      const __composite = {
                                        headerBgColor: "#ECE6DF",
                                        rowBgColor: "#ffffff",
                                        hoverBgColor: null,
                                        borderColor: "#d9cdbf",
                                        textColor: "#333333",
                                        fontSize: "14px",
                                        dragHandleColor: null
                                      };
                                      __composite["hoverBgColor"] = "#F6F3EF";
                                      __composite["dragHandleColor"] =
                                        "#333333";
                                      return __composite;
                                    })()}
                                    visibleColumns={(() => {
                                      try {
                                        return $state.dispoColumnsDataGrid.map(
                                          x => x.value
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.dataGridDispositif
                                    ),
                                    clientId: (() => {
                                      try {
                                        return $state.header.userClientId;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 1;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    headerItems: generateStateValueProp(
                                      $state,
                                      [
                                        "dataGridDispositif",
                                        __plasmic_idx_0,
                                        "headerItems"
                                      ]
                                    ),
                                    onHeaderItemsChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangeProp($state, [
                                        "dataGridDispositif",
                                        __plasmic_idx_0,
                                        "headerItems"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onPageNumberChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangeProp($state, [
                                        "dataGridDispositif",
                                        __plasmic_idx_0,
                                        "pageNumber"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    pageNumber: generateStateValueProp($state, [
                                      "dataGridDispositif",
                                      __plasmic_idx_0,
                                      "pageNumber"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "dataGridDispositif[].pageNumber",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => 1
                                      },
                                      {
                                        name: "dataGridDispositif[].headerItems",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => [
                                          { name: "Mission principale" },
                                          { name: "Position site" },
                                          { name: "N\u00b0" },
                                          { name: "Description (Ref.Dim.)" },
                                          { name: "Soci\u00e9t\u00e9" },
                                          { name: "Co\u00fbt total" },
                                          {
                                            name: "Date et heure de d\u00e9but"
                                          },
                                          { name: "Actions" }
                                        ]
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <DataGridDispositif
                                      data-plasmic-name={"dataGridDispositif"}
                                      data-plasmic-override={
                                        overrides.dataGridDispositif
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return currentItem.id == 5;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"_5"}
                                data-plasmic-override={overrides._5}
                                hasGap={true}
                                className={classNames(projectcss.all, sty._5)}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.header.operationId == "" ||
                                        $state.header.operationId == undefined
                                        ? $queries.mcFiles.data
                                        : $queries.mcFiles.data.filter(
                                            file =>
                                              file.id ==
                                              $state.header.operationId
                                          );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.file
                                      ),
                                      currentItem: (() => {
                                        try {
                                          return currentItem;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      fileId: generateStateValueProp($state, [
                                        "file",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "fileId"
                                      ]),
                                      key: currentIndex,
                                      onFileIdChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "file",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "fileId"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      onTypeChange2: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "file",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "type"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      type: generateStateValueProp($state, [
                                        "file",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "type"
                                      ])
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "file[][].fileId",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return currentItem.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 0;
                                                }
                                                throw e;
                                              }
                                            })()
                                        },
                                        {
                                          name: "file[][].type",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => "operation"
                                        }
                                      ],
                                      [__plasmic_idx_0, __plasmic_idx_1]
                                    );
                                    return (
                                      <File
                                        data-plasmic-name={"file"}
                                        data-plasmic-override={overrides.file}
                                        {...child$Props}
                                      />
                                    );
                                  })();
                                })}
                              </Stack__>
                            ) : null}
                          </Stack__>
                        </TabContent>
                      );
                    })}
                  </Stack__>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </div>
        </div>
        <BottomMenu
          data-plasmic-name={"bottomMenu"}
          data-plasmic-override={overrides.bottomMenu}
          className={classNames("__wab_instance", sty.bottomMenu)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "updateTask2",
    "createTask",
    "createUpdateSituationModal",
    "frame1437254016",
    "frame1437254019",
    "createUpdateSituation2",
    "uploadFile",
    "frame1437254034",
    "name16",
    "frame1437254035",
    "formAddDoc",
    "event",
    "select2",
    "event2",
    "upload5",
    "accueilDashboard",
    "leftMenu",
    "main",
    "header",
    "tabs4",
    "mainContainer",
    "tabButtons",
    "tabButton",
    "tabUnderline",
    "tabContent",
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file",
    "bottomMenu"
  ],
  updateTask2: ["updateTask2"],
  createTask: ["createTask"],
  createUpdateSituationModal: [
    "createUpdateSituationModal",
    "frame1437254016",
    "frame1437254019",
    "createUpdateSituation2"
  ],
  frame1437254016: ["frame1437254016", "frame1437254019"],
  frame1437254019: ["frame1437254019"],
  createUpdateSituation2: ["createUpdateSituation2"],
  uploadFile: [
    "uploadFile",
    "frame1437254034",
    "name16",
    "frame1437254035",
    "formAddDoc",
    "event",
    "select2",
    "event2",
    "upload5"
  ],
  frame1437254034: ["frame1437254034", "name16", "frame1437254035"],
  name16: ["name16"],
  frame1437254035: ["frame1437254035"],
  formAddDoc: ["formAddDoc", "event", "select2", "event2", "upload5"],
  event: ["event", "select2"],
  select2: ["select2"],
  event2: ["event2", "upload5"],
  upload5: ["upload5"],
  accueilDashboard: [
    "accueilDashboard",
    "leftMenu",
    "main",
    "header",
    "tabs4",
    "mainContainer",
    "tabButtons",
    "tabButton",
    "tabUnderline",
    "tabContent",
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file"
  ],
  leftMenu: ["leftMenu"],
  main: [
    "main",
    "header",
    "tabs4",
    "mainContainer",
    "tabButtons",
    "tabButton",
    "tabUnderline",
    "tabContent",
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file"
  ],
  header: ["header"],
  tabs4: [
    "tabs4",
    "mainContainer",
    "tabButtons",
    "tabButton",
    "tabUnderline",
    "tabContent",
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file"
  ],
  mainContainer: [
    "mainContainer",
    "tabButtons",
    "tabButton",
    "tabUnderline",
    "tabContent",
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file"
  ],
  tabButtons: ["tabButtons", "tabButton", "tabUnderline"],
  tabButton: ["tabButton"],
  tabUnderline: ["tabUnderline"],
  tabContent: [
    "tabContent",
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file"
  ],
  content: [
    "content",
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2",
    "_12",
    "kanban",
    "_34",
    "dataGrid",
    "dataGridDispositif",
    "_5",
    "file"
  ],
  filterStuff: [
    "filterStuff",
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements",
    "buttonAdd2",
    "buttonAdd3",
    "buttonAddStaff2"
  ],
  filter: [
    "filter",
    "buttonFilter",
    "filterValue",
    "graviteNoir",
    "graviteRouge",
    "signalements"
  ],
  buttonFilter: ["buttonFilter"],
  filterValue: ["filterValue", "graviteNoir", "graviteRouge", "signalements"],
  graviteNoir: ["graviteNoir"],
  graviteRouge: ["graviteRouge"],
  signalements: ["signalements"],
  buttonAdd2: ["buttonAdd2"],
  buttonAdd3: ["buttonAdd3"],
  buttonAddStaff2: ["buttonAddStaff2"],
  _12: ["_12", "kanban"],
  kanban: ["kanban"],
  _34: ["_34", "dataGrid", "dataGridDispositif"],
  dataGrid: ["dataGrid"],
  dataGridDispositif: ["dataGridDispositif"],
  _5: ["_5", "file"],
  file: ["file"],
  bottomMenu: ["bottomMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  updateTask2: typeof UpdateTask;
  createTask: typeof CreateTask;
  createUpdateSituationModal: typeof Modal;
  frame1437254016: "div";
  frame1437254019: "div";
  createUpdateSituation2: typeof CreateUpdateSituation;
  uploadFile: typeof Modal;
  frame1437254034: "div";
  name16: "div";
  frame1437254035: "div";
  formAddDoc: typeof FormWrapper;
  event: typeof FormItemWrapper;
  select2: typeof AntdSelect;
  event2: typeof FormItemWrapper;
  upload5: typeof UploadWrapper;
  accueilDashboard: "div";
  leftMenu: typeof LeftMenu;
  main: "div";
  header: typeof Header;
  tabs4: typeof TabsContainer;
  mainContainer: "div";
  tabButtons: "div";
  tabButton: typeof TabButton;
  tabUnderline: typeof TabUnderline;
  tabContent: typeof TabContent;
  content: "div";
  filterStuff: "div";
  filter: "div";
  buttonFilter: typeof Button;
  filterValue: "div";
  graviteNoir: typeof Checkbox;
  graviteRouge: typeof Checkbox;
  signalements: typeof Checkbox;
  buttonAdd2: typeof Button;
  buttonAdd3: typeof Button;
  buttonAddStaff2: typeof Button;
  _12: "div";
  kanban: typeof Kanban;
  _34: "div";
  dataGrid: typeof DataGrid;
  dataGridDispositif: typeof DataGridDispositif;
  _5: "div";
  file: typeof File;
  bottomMenu: typeof BottomMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainCourante__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainCourante__VariantsArgs;
    args?: PlasmicMainCourante__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainCourante__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainCourante__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainCourante__ArgProps,
          internalVariantPropNames: PlasmicMainCourante__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainCourante__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainCourante";
  } else {
    func.displayName = `PlasmicMainCourante.${nodeName}`;
  }
  return func;
}

export const PlasmicMainCourante = Object.assign(
  // Top-level PlasmicMainCourante renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    updateTask2: makeNodeComponent("updateTask2"),
    createTask: makeNodeComponent("createTask"),
    createUpdateSituationModal: makeNodeComponent("createUpdateSituationModal"),
    frame1437254016: makeNodeComponent("frame1437254016"),
    frame1437254019: makeNodeComponent("frame1437254019"),
    createUpdateSituation2: makeNodeComponent("createUpdateSituation2"),
    uploadFile: makeNodeComponent("uploadFile"),
    frame1437254034: makeNodeComponent("frame1437254034"),
    name16: makeNodeComponent("name16"),
    frame1437254035: makeNodeComponent("frame1437254035"),
    formAddDoc: makeNodeComponent("formAddDoc"),
    event: makeNodeComponent("event"),
    select2: makeNodeComponent("select2"),
    event2: makeNodeComponent("event2"),
    upload5: makeNodeComponent("upload5"),
    accueilDashboard: makeNodeComponent("accueilDashboard"),
    leftMenu: makeNodeComponent("leftMenu"),
    main: makeNodeComponent("main"),
    header: makeNodeComponent("header"),
    tabs4: makeNodeComponent("tabs4"),
    mainContainer: makeNodeComponent("mainContainer"),
    tabButtons: makeNodeComponent("tabButtons"),
    tabButton: makeNodeComponent("tabButton"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    tabContent: makeNodeComponent("tabContent"),
    content: makeNodeComponent("content"),
    filterStuff: makeNodeComponent("filterStuff"),
    filter: makeNodeComponent("filter"),
    buttonFilter: makeNodeComponent("buttonFilter"),
    filterValue: makeNodeComponent("filterValue"),
    graviteNoir: makeNodeComponent("graviteNoir"),
    graviteRouge: makeNodeComponent("graviteRouge"),
    signalements: makeNodeComponent("signalements"),
    buttonAdd2: makeNodeComponent("buttonAdd2"),
    buttonAdd3: makeNodeComponent("buttonAdd3"),
    buttonAddStaff2: makeNodeComponent("buttonAddStaff2"),
    _12: makeNodeComponent("_12"),
    kanban: makeNodeComponent("kanban"),
    _34: makeNodeComponent("_34"),
    dataGrid: makeNodeComponent("dataGrid"),
    dataGridDispositif: makeNodeComponent("dataGridDispositif"),
    _5: makeNodeComponent("_5"),
    file: makeNodeComponent("file"),
    bottomMenu: makeNodeComponent("bottomMenu"),

    // Metadata about props expected for PlasmicMainCourante
    internalVariantProps: PlasmicMainCourante__VariantProps,
    internalArgProps: PlasmicMainCourante__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Main courante",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMainCourante;
/* prettier-ignore-end */
