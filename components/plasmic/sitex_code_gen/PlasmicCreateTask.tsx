/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: zV_rzxoZsY7r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { Checkbox } from "../../../plasmic-library/forms/Checkbox"; // plasmic-import: 4jYUg63Ip8fJ/codeComponent
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: lhUOZcKCH_AK/component
import Switch from "../../Switch"; // plasmic-import: UaftfvqN7siX/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicCreateTask.module.css"; // plasmic-import: zV_rzxoZsY7r/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicCreateTask__VariantMembers = {};
export type PlasmicCreateTask__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateTask__VariantsArgs;
export const PlasmicCreateTask__VariantProps = new Array<VariantPropType>();

export type PlasmicCreateTask__ArgsType = {
  open?: boolean;
  type?: string;
  positions?: any;
  dispositif?: any;
  operation?: any;
  onOpenChange2?: (val: string) => void;
  modelId?: number;
  clientId?: number;
};
type ArgPropType = keyof PlasmicCreateTask__ArgsType;
export const PlasmicCreateTask__ArgProps = new Array<ArgPropType>(
  "open",
  "type",
  "positions",
  "dispositif",
  "operation",
  "onOpenChange2",
  "modelId",
  "clientId"
);

export type PlasmicCreateTask__OverridesType = {
  modalCreate?: Flex__<typeof Modal>;
  frame1437254016?: Flex__<"div">;
  name?: Flex__<"div">;
  frame1437254019?: Flex__<"div">;
  formCreate?: Flex__<typeof FormWrapper>;
  event?: Flex__<typeof FormItemWrapper>;
  select2?: Flex__<typeof AntdSelect>;
  title?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  status3?: Flex__<typeof FormItemWrapper>;
  select21?: Flex__<typeof AntdSelect>;
  dateStart?: Flex__<typeof FormItemWrapper>;
  timePicker2?: Flex__<typeof AntdDatePicker>;
  title2?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  dateEnd?: Flex__<typeof FormItemWrapper>;
  timePicker3?: Flex__<typeof AntdDatePicker>;
  startingTask?: Flex__<typeof FormItemWrapper>;
  checkbox?: Flex__<typeof Checkbox>;
  impactPrio?: Flex__<typeof FormItemWrapper>;
  select4?: Flex__<typeof AntdSelect>;
  generalDescription?: Flex__<typeof FormItemWrapper>;
  richTextEditor?: Flex__<typeof Quill>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  radioBut?: Flex__<"div">;
  particular?: Flex__<typeof FormItemWrapper>;
  _switch?: Flex__<typeof Switch>;
  share?: Flex__<typeof FormItemWrapper>;
  switch2?: Flex__<typeof Switch>;
  precisions?: Flex__<typeof FormItemWrapper>;
  select5?: Flex__<typeof AntdSelect>;
  thematic?: Flex__<typeof FormItemWrapper>;
  select6?: Flex__<typeof AntdSelect>;
  thematic2?: Flex__<typeof FormItemWrapper>;
  select7?: Flex__<typeof AntdSelect>;
  impact?: Flex__<typeof FormItemWrapper>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  impactComment?: Flex__<typeof FormItemWrapper>;
  textAreaInput2?: Flex__<typeof TextAreaInput>;
  dispo?: Flex__<typeof FormItemWrapper>;
  ddDispo?: Flex__<typeof AntdSelect>;
  formTaskDispo?: Flex__<typeof FormWrapper>;
  dispositifs?: Flex__<"div">;
  thematic8?: Flex__<typeof FormItemWrapper>;
  select8?: Flex__<typeof AntdSelect>;
  position?: Flex__<typeof FormItemWrapper>;
  select30?: Flex__<typeof AntdSelect>;
  thematic11?: Flex__<typeof FormItemWrapper>;
  select29?: Flex__<typeof AntdSelect>;
  generalDescription7?: Flex__<typeof FormItemWrapper>;
  textAreaInput3?: Flex__<typeof TextAreaInput>;
  files?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
};

export interface DefaultCreateTaskProps {
  open?: boolean;
  type?: string;
  positions?: any;
  dispositif?: any;
  operation?: any;
  onOpenChange2?: (val: string) => void;
  modelId?: number;
  clientId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateTask__RenderFunc(props: {
  variants: PlasmicCreateTask__VariantsArgs;
  args: PlasmicCreateTask__ArgsType;
  overrides: PlasmicCreateTask__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          type: "runsheet"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modalCreate.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "formCreate.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formCreate",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formCreate.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formCreate",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "select21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ddDispo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formTaskDispo[].value",
        type: "private",
        variableType: "object",

        refName: "formTaskDispo",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formTaskDispo[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "formTaskDispo",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select8[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select29[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select30[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange2"
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "taskIdComp",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formCreate.value.particular;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "switch2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formCreate.value.share;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "typeTheme",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            category: "Suivi dispositif (runsheet) [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "CODE 51 - Etat suppos\u00e9e d'ivresse [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE 49 - Altercation - Rixe - Violences [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE NRRI - R\u00e8glement int\u00e9rieur [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE CAPITOLE - Intrusion [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "CODE OS : r\u00e9ception VIP [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "V\u00e9hicule interdit et stationnement [SU]",
            macro_category: "SURETE [SU]"
          },
          { category: "Vol [SU]", macro_category: "SURETE [SU]" },
          { category: "Colis suspect [SU]", macro_category: "SURETE [SU]" },
          {
            category: "Comportement suspect [SU]",
            macro_category: "SURETE [SU]"
          },
          { category: "D\u00e9gradation [SU]", macro_category: "SURETE [SU]" },
          { category: "Objets interdits [SU]", macro_category: "SURETE [SU]" },
          {
            category: "VHSS, injures raciales [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "Vente ill\u00e9gale [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "Accr\u00e9ditations, listings, acc\u00e8s travail [SU]",
            macro_category: "SURETE [SU]"
          },
          {
            category: "Execution difficile et \u00e9carts [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "CODE Papa Alpha [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "Modification dispositif et prolongements [DI]",
            macro_category: "DISPOSITIF [DI]"
          },
          {
            category: "CODE 112 Malaise/blessure UR [S]",
            macro_category: "SANTE-SECOURS [S]"
          },
          {
            category: "CODE 15 Malaise/blessure UA [S]",
            macro_category: "SANTE-SECOURS [S]"
          },
          { category: "BI Litiges", macro_category: "BI Litiges" },
          {
            category: "Hermeticit\u00e9 et p\u00e9rim\u00e8tre [MA]",
            macro_category: "MANIFESTATION [MA]"
          },
          {
            category: "Personne perdue [MA]",
            macro_category: "MANIFESTATION [MA]"
          },
          { category: null, macro_category: "SUIVI" },
          { category: null, macro_category: "MODELE" }
        ]
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "dateStart2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formCreate.value.status === "EN COURS"
                ? new Date().toISOString().slice(0, 18)
                : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "dateEnd2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formCreate.value.status === "CLASSÉE" ||
                $state.status === "NON FAIT"
                ? new Date().toISOString().slice(0, 18)
                : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.type === "runsheet" ? "PLANIFIÉE" : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    variables: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "69c3bb51-f664-410c-8b2d-803bab8d1966",
        userArgs: {
          filters: [$props.clientId]
        },
        cacheKey: `plasmic.$.69c3bb51-f664-410c-8b2d-803bab8d1966.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <Modal
      data-plasmic-name={"modalCreate"}
      data-plasmic-override={overrides.modalCreate}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modalCreate)}
      closeOnBackdropClick={false}
      content={(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.formCreate),
          extendedOnValuesChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["formCreate", "value"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);

            (async (changedValues, allValues) => {
              const $steps = {};

              $steps["runCode"] =
                $state.formCreate.value.status === "CLASSÉE" ||
                $state.formCreate.value.status === "NON FAIT" ||
                $state.formCreate.value.status === "EN COURS"
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const status = $state.formCreate.value.status;
                            if (status === "CLASSÉE" || status === "NON FAIT") {
                              $state.formCreate.value.date_end =
                                new Date().toISOString();
                              return ($state.formCreate.value.date_start =
                                null);
                            } else if (status === "EN COURS") {
                              $state.formCreate.value.date_start =
                                new Date().toISOString();
                              return ($state.formCreate.value.date_end = null);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = (
                $state.formCreate.value.precisions ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const macro = $queries.variables.data.find(
                            x => x.id == $state.formCreate.value.precisions
                          ).name_macro;
                          return ($state.formCreate.value.thematic =
                            $queries.variables.data.find(
                              x => x.name === macro
                            ).id);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }).apply(null, eventArgs);
          },
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["supabaseUploadFile"] =
              $state.upload.files.length > 0
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                        opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                        userArgs: {
                          path: [$state.upload.files[0].name],
                          content: [$state.upload.files[0].contents],
                          contentType: [$state.upload.files[0].type]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["supabaseUploadFile"] != null &&
              typeof $steps["supabaseUploadFile"] === "object" &&
              typeof $steps["supabaseUploadFile"].then === "function"
            ) {
              $steps["supabaseUploadFile"] = await $steps["supabaseUploadFile"];
            }

            $steps["createFile"] =
              $state.upload.files.length > 0
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "708f2049-6a58-4cd1-9ad5-d9b37aedc44c",
                        userArgs: {
                          variables: [
                            $steps.supabaseUploadFile?.path,
                            $props.type === "model"
                              ? null
                              : $state.formCreate.value.associated_operation[0]
                                  .value,
                            $props.modelId || null
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["createFile"] != null &&
              typeof $steps["createFile"] === "object" &&
              typeof $steps["createFile"].then === "function"
            ) {
              $steps["createFile"] = await $steps["createFile"];
            }

            $steps["createAction"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "v6umJuHyep6kPNyCAJjouT",
                      opId: "726083bc-920b-4f20-8b22-dd2d252e7e76",
                      userArgs: {
                        variables: [
                          $props.type === "model"
                            ? null
                            : $state.formCreate.value.associated_operation[0]
                                .value,
                          new Date().toISOString(),
                          $state.formCreate.value.date_end,
                          $state.formCreate.value.date_start,
                          $state.formCreate.value.general_description,
                          $state.formCreate.value.particular,
                          $state.formCreate.value.precisions,
                          $state.formCreate.value.priority,
                          $state.formCreate.value.share,
                          $state.formCreate.value.status,
                          $state.formCreate.value.thematic,
                          $state.formCreate.value.title,
                          $props.type,
                          new Date().toISOString(),
                          $ctx.SupabaseUser.user == null
                            ? null
                            : $ctx.SupabaseUser.user.id,
                          $state.upload.files.length > 0
                            ? $steps.createFile.data[0].id
                            : null,
                          $state.formCreate.value.implied,
                          $state.formCreate.value.starting_task,
                          $props.modelId || null,
                          $state.formCreate.value.impact_comment,
                          $state.formCreate.value.impact_value,
                          $props.clientId
                        ]
                      },
                      cacheKey: null,
                      invalidatedKeys: [
                        "2c71e561-9ccf-412c-9737-2509ec61ee99",
                        "fa5c4dfe-59a9-43d6-8bce-9d467217a75e",
                        "cec3d7bf-5ee9-47a3-ab41-392259ef4090"
                      ],
                      roleId: null
                    },
                    continueOnError: false
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["createAction"] != null &&
              typeof $steps["createAction"] === "object" &&
              typeof $steps["createAction"].then === "function"
            ) {
              $steps["createAction"] = await $steps["createAction"];
            }

            $steps["updateTaskId2"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: Number($steps.createAction.data[0].id),
                    variable: {
                      objRoot: $state,
                      variablePath: ["taskIdComp"]
                    }
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTaskId2"] != null &&
              typeof $steps["updateTaskId2"] === "object" &&
              typeof $steps["updateTaskId2"].then === "function"
            ) {
              $steps["updateTaskId2"] = await $steps["updateTaskId2"];
            }

            $steps["taskDispo"] =
              $state.formCreate.value.dispositif_id != undefined &&
              $state.formCreate.value.dispositif_id.length > 0
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "v6umJuHyep6kPNyCAJjouT",
                        opId: "6a7ac4af-ecf4-4bf7-9ac7-bd31959fc65e",
                        userArgs: {
                          variables: [
                            Object.values($state.formTaskDispo).map(obj => {
                              const {
                                position_id,
                                id,
                                min_before,
                                description
                              } = obj.value;
                              return {
                                position_id: position_id,
                                task_id: Number($state.taskIdComp),
                                dispositif_id: id,
                                min_before: min_before || null,
                                description: description || null,
                                date_start:
                                  $state.formCreate.value.date_start || null,
                                date_end:
                                  $state.formCreate.value.date_end || null,
                                associated_model: $props.modelId || null,
                                last_updated_by:
                                  $ctx.SupabaseUser.user == undefined
                                    ? null
                                    : $ctx.SupabaseUser.user.id
                              };
                            })
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [
                          "330d5325-6e12-4b25-97e4-15853a7883d0",
                          "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                          "ae8f6af7-e283-4770-a3e5-c810ebc5351d"
                        ],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["taskDispo"] != null &&
              typeof $steps["taskDispo"] === "object" &&
              typeof $steps["taskDispo"].then === "function"
            ) {
              $steps["taskDispo"] = await $steps["taskDispo"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "success",
                      "Op\u00e9ration cr\u00e9\u00e9e",
                      undefined,
                      undefined,
                      "bottom"
                    ]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["updateOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["open"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpen"] != null &&
              typeof $steps["updateOpen"] === "object" &&
              typeof $steps["updateOpen"].then === "function"
            ) {
              $steps["updateOpen"] = await $steps["updateOpen"];
            }
          },
          onFinishFailed: async data => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "Erreur ",
                      (() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      undefined,
                      "bottom"
                    ]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          },
          onIsSubmittingChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "isSubmitting",
              ["formCreate", "isSubmitting"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          ref: ref => {
            $refs["formCreate"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "formCreate.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "formCreate.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"formCreate"}
            data-plasmic-override={overrides.formCreate}
            {...child$Props}
          >
            {(() => {
              try {
                return $props.type !== "model";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"event"}
                data-plasmic-override={overrides.event}
                className={classNames("__wab_instance", sty.event)}
                initialValue={
                  $props.operation.data.length == 1 && $props.type !== "model"
                    ? $props.operation.data.map(item => ({
                        value: item.id,
                        label: item.title
                      }))
                    : null
                }
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lnDva
                    )}
                  >
                    {"Op\u00e9ration associ\u00e9e"}
                  </div>
                }
                name={"associated_operation"}
                rules={[
                  {
                    ruleType: "required",
                    message: "Requis",
                    custom: (rule, value) => {
                      return (
                        $state.formCreate.value.asociated_operation !== null &&
                        $props.type !== "model"
                      );
                    }
                  }
                ]}
              >
                <AntdSelect
                  data-plasmic-name={"select2"}
                  data-plasmic-override={overrides.select2}
                  className={classNames("__wab_instance", sty.select2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionClassName={classNames({
                    [sty["pcls_evTh6S8zRRBl"]]: true
                  })}
                  options={(() => {
                    try {
                      return $props.operation.data.map(item => ({
                        value: item.id,
                        label: item.title
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dsZmU
                      )}
                    >
                      {"Select..."}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls_JE1jdwDPfbHw"]]: true
                  })}
                  popupClassName={classNames({
                    [sty["pcls_hAETqJNsbI3T"]]: true
                  })}
                  popupScopeClassName={sty["select2__popup"]}
                  size={"middle"}
                  triggerClassName={classNames({
                    [sty["pcls_1pqsvjmPQcyg"]]: true
                  })}
                  value={generateStateValueProp($state, ["select2", "value"])}
                />
              </FormItemWrapper>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames("__wab_instance", sty.title)}
              initialValue={(() => {
                try {
                  return $props.type === "runsheet" ? "PLANIFIÉE" : null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bBr4P
                  )}
                >
                  {"Titre"}
                </div>
              }
              name={"title"}
              rules={[{ ruleType: "required", message: "Titre requis" }]}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: "Titre",
                  size: "large",
                  value: generateStateValueProp($state, ["input", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"status3"}
                data-plasmic-override={overrides.status3}
                className={classNames("__wab_instance", sty.status3)}
                initialValue={(() => {
                  try {
                    return $props.type === "runsheet" ? "PLANIFIÉE" : null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s1WBi
                    )}
                  >
                    {"Statut"}
                  </div>
                }
                name={"status"}
                rules={[{ ruleType: "required", message: "Requis" }]}
                shouldUpdate={true}
              >
                <AntdSelect
                  data-plasmic-name={"select21"}
                  data-plasmic-override={overrides.select21}
                  bordered={true}
                  className={classNames("__wab_instance", sty.select21)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select21",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionClassName={classNames({
                    [sty["pcls_aElJL0qfn7Hc"]]: true
                  })}
                  options={(() => {
                    try {
                      return [
                        "À PLANIFIER",
                        "PLANIFIÉE",
                        "À ENGAGER",
                        "EN COURS",
                        "CLASSÉE",
                        "NON FAIT"
                      ].map((text, index) => ({
                        value: text,
                        label: text
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pMCnF
                      )}
                    >
                      {"S\u00e9lectionner"}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls_JHjBUsu5ZGur"]]: true
                  })}
                  popupClassName={classNames({
                    [sty["pcls_uctQrN-kFl_n"]]: true
                  })}
                  popupScopeClassName={sty["select21__popup"]}
                  size={"middle"}
                  triggerClassName={classNames({
                    [sty["pcls_K9m4vTtXljLR"]]: true
                  })}
                  value={generateStateValueProp($state, ["select21", "value"])}
                />
              </FormItemWrapper>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__raz3I)}>
              <FormItemWrapper
                data-plasmic-name={"dateStart"}
                data-plasmic-override={overrides.dateStart}
                className={classNames("__wab_instance", sty.dateStart)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rziGi
                    )}
                  >
                    {"Date et heure de d\u00e9but"}
                  </div>
                }
                name={"date_start"}
                rules={[
                  {
                    ruleType: "required",
                    message: "Date de d\u00e9but requise"
                  }
                ]}
                shouldUpdate={true}
              >
                {(() => {
                  const child$Props = {
                    allowClear: true,
                    className: classNames("__wab_instance", sty.timePicker2),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["timePicker2", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupBodyClassName: classNames({
                      [sty["pcls_z3_6_KH5QZMP"]]: true
                    }),
                    popupClassName: classNames({
                      [sty["pcls_MxGrxUEw_SNt"]]: true
                    }),
                    popupFooterClassName: classNames({
                      [sty["pcls_Z_N-w5PIhn_9"]]: true
                    }),
                    popupHeaderClassName: classNames({
                      [sty["pcls_gTRhvZB8gIlk"]]: true
                    }),
                    popupScopeClassName: sty["timePicker2__datePickerPopup"],
                    showNow: false,
                    showTime: true,
                    value: generateStateValueProp($state, [
                      "timePicker2",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "timePicker2.value"
                      }
                    ],
                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdDatePicker
                      data-plasmic-name={"timePicker2"}
                      data-plasmic-override={overrides.timePicker2}
                      {...child$Props}
                    />
                  );
                })()}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8SrOe
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Début de l'opération : " +
                          new Date(
                            $props.operation.data.find(
                              x =>
                                Number(x.id) ==
                                Number(
                                  $state.formCreate.value
                                    .associated_operation[0].value ||
                                    $state.formCreate.value.associated_operation
                                )
                            ).date_start
                          ).toLocaleString("fr-FR", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric",
                            hour: "2-digit",
                            minute: "2-digit"
                          })
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"title2"}
                data-plasmic-override={overrides.title2}
                className={classNames("__wab_instance", sty.title2)}
                initialValue={undefined}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wGksx
                    )}
                  >
                    {"Dur\u00e9e estim\u00e9e"}
                  </div>
                }
                name={"estimated_duration"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input2),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input2", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder: "Titre",
                    size: "large",
                    type: "time",
                    value: generateStateValueProp($state, ["input2", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input2.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"input2"}
                      data-plasmic-override={overrides.input2}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"dateEnd"}
                data-plasmic-override={overrides.dateEnd}
                className={classNames("__wab_instance", sty.dateEnd)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x1Qw
                    )}
                  >
                    {"Date et heure de fin estim\u00e9es"}
                  </div>
                }
                name={"date_end"}
                rules={[
                  {
                    ruleType: "advanced",
                    custom: (rule, value) => {
                      return (
                        $state.formCreate == undefined ||
                        $state.formCreate.value.date_end == null ||
                        ($state.formCreate.value.date !== null &&
                          $state.formCreate.value.date_end >
                            $state.formCreate.value.date_start)
                      );
                    },
                    message: "Date ant\u00e9rieure"
                  }
                ]}
                shouldUpdate={true}
              >
                {(() => {
                  const child$Props = {
                    allowClear: true,
                    className: classNames("__wab_instance", sty.timePicker3),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["timePicker3", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupBodyClassName: classNames({
                      [sty["pcls_ty-gQN1ClLw4"]]: true
                    }),
                    popupClassName: classNames({
                      [sty["pcls_D0HUYEtino4d"]]: true
                    }),
                    popupFooterClassName: classNames({
                      [sty["pcls_1Ma5azsbjGf1"]]: true
                    }),
                    popupHeaderClassName: classNames({
                      [sty["pcls_D7eXdaRpEM7i"]]: true
                    }),
                    popupScopeClassName: sty["timePicker3__datePickerPopup"],
                    showNow: false,
                    showTime: true,
                    value: generateStateValueProp($state, [
                      "timePicker3",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "timePicker3.value"
                      }
                    ],
                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdDatePicker
                      data-plasmic-name={"timePicker3"}
                      data-plasmic-override={overrides.timePicker3}
                      {...child$Props}
                    />
                  );
                })()}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eaDaf
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Fin de l'opération : " +
                          new Date(
                            $props.operation.data.find(
                              x =>
                                Number(x.id) ==
                                Number(
                                  $state.formCreate.value
                                    .associated_operation[0].value ||
                                    $state.formCreate.value.associated_operation
                                )
                            ).date_end
                          ).toLocaleString("fr-FR", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric",
                            hour: "2-digit",
                            minute: "2-digit"
                          })
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </FormItemWrapper>
            </div>
            {(() => {
              try {
                return $props.type === "runsheet";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"startingTask"}
                data-plasmic-override={overrides.startingTask}
                className={classNames("__wab_instance", sty.startingTask)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__up51I
                    )}
                  >
                    {
                      "D\u00e9finir l\u2019action comme Marqueur de d\u00e9but de l\u2019op\u00e9ration"
                    }
                  </div>
                }
                name={"starting_task"}
              >
                <Checkbox
                  data-plasmic-name={"checkbox"}
                  data-plasmic-override={overrides.checkbox}
                  checked={(() => {
                    try {
                      return $state.formCreate.value.starting_task;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.checkbox)}
                  disabled={false}
                  state={"default"}
                />
              </FormItemWrapper>
            ) : null}
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"impactPrio"}
                data-plasmic-override={overrides.impactPrio}
                className={classNames("__wab_instance", sty.impactPrio)}
                initialValue={undefined}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hSsbg
                    )}
                  >
                    {"Impact/Priorit\u00e9"}
                  </div>
                }
                name={"priority"}
              >
                <AntdSelect
                  data-plasmic-name={"select4"}
                  data-plasmic-override={overrides.select4}
                  allowClear={true}
                  bordered={true}
                  className={classNames("__wab_instance", sty.select4)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select4",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $queries.variables.data
                        .filter(x => x.category === "priority")
                        .map(x => ({
                          value: x.id,
                          label: x.name
                        }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tTmsb
                      )}
                    >
                      {"S\u00e9lectionner"}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls_jqMrc3DNc36D"]]: true
                  })}
                  popupScopeClassName={sty["select4__popup"]}
                  size={"middle"}
                  value={generateStateValueProp($state, ["select4", "value"])}
                />
              </FormItemWrapper>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"generalDescription"}
              data-plasmic-override={overrides.generalDescription}
              className={classNames("__wab_instance", sty.generalDescription)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Hjy6
                  )}
                >
                  {"Description g\u00e9n\u00e9rale"}
                </div>
              }
              name={"general_description"}
            >
              {(() => {
                const child$Props = {
                  containerClassName: classNames(
                    "__wab_instance",
                    sty.richTextEditor
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["richTextEditor", "value"],
                      Quill_Helpers
                    ).apply(null, eventArgs);
                  },
                  preserveWhitespace: true,
                  readOnly: false,
                  toolbar: (() => {
                    const __composite = {
                      textStyle: [
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough"
                      ],
                      colors: null,
                      script: null,
                      fontFamily: null,
                      heading: null,
                      fontSizes: null,
                      formatting: null,
                      inputTypes: null
                    };
                    __composite["colors"] = ["text color"];
                    __composite["script"] = false;
                    __composite["fontFamily"] = false;
                    __composite["heading"] = [];
                    __composite["fontSizes"] = [];
                    __composite["formatting"] = ["alignment", "list"];
                    __composite["inputTypes"] = ["link"];
                    return __composite;
                  })(),

                  value: generateStateValueProp($state, [
                    "richTextEditor",
                    "value"
                  ])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "richTextEditor.value"
                    }
                  ],
                  [],
                  Quill_Helpers ?? {},
                  child$Props
                );

                return (
                  <Quill
                    data-plasmic-name={"richTextEditor"}
                    data-plasmic-override={overrides.richTextEditor}
                    {...child$Props}
                  />
                );
              })()}
              <TextAreaInput
                data-plasmic-name={"textAreaInput"}
                data-plasmic-override={overrides.textAreaInput}
                className={classNames("__wab_instance", sty.textAreaInput)}
                inputMode={"text"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textAreaInput",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "Si une situation est en cours d\u2019\u00e9volution, Heure, commentaire"
                }
              />
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"radioBut"}
                data-plasmic-override={overrides.radioBut}
                className={classNames(projectcss.all, sty.radioBut)}
              >
                <FormItemWrapper
                  data-plasmic-name={"particular"}
                  data-plasmic-override={overrides.particular}
                  className={classNames("__wab_instance", sty.particular)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__odhVa
                      )}
                    >
                      {"Regard particulier"}
                    </div>
                  }
                  name={"particular"}
                >
                  <Switch
                    data-plasmic-name={"_switch"}
                    data-plasmic-override={overrides._switch}
                    className={classNames("__wab_instance", sty._switch)}
                    isSelected={generateStateValueProp($state, [
                      "_switch",
                      "isSelected"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "_switch",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"share"}
                  data-plasmic-override={overrides.share}
                  className={classNames("__wab_instance", sty.share)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bdsc
                      )}
                    >
                      {"Partager"}
                    </div>
                  }
                  name={"share"}
                >
                  <Switch
                    data-plasmic-name={"switch2"}
                    data-plasmic-override={overrides.switch2}
                    className={classNames("__wab_instance", sty.switch2)}
                    isSelected={generateStateValueProp($state, [
                      "switch2",
                      "isSelected"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "switch2",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </FormItemWrapper>
              </div>
            ) : null}
            <FormItemWrapper
              data-plasmic-name={"precisions"}
              data-plasmic-override={overrides.precisions}
              className={classNames("__wab_instance", sty.precisions)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wzh13
                  )}
                >
                  {"Pr\u00e9cisions (Type)"}
                </div>
              }
              name={"precisions"}
            >
              <AntdSelect
                data-plasmic-name={"select5"}
                data-plasmic-override={overrides.select5}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.select5)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                mode={"single"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select5", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                optionClassName={classNames({
                  [sty["pcls_ewtMie-8GFqr"]]: true
                })}
                options={(() => {
                  try {
                    return $queries.variables.data
                      .filter(x => x.category === "precisions")
                      .map(x => ({
                        value: x.id,
                        label: x.name
                      }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                placeholder={"S\u00e9lectionner"}
                placeholderClassName={classNames({
                  [sty["pcls_iVjYEO9qox6z"]]: true
                })}
                popupClassName={classNames({
                  [sty["pcls_GMX4-dqsRWMS"]]: true
                })}
                popupScopeClassName={sty["select5__popup"]}
                showSearch={true}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_90QA34wh0wxy"]]: true
                })}
                value={generateStateValueProp($state, ["select5", "value"])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              data-plasmic-name={"thematic"}
              data-plasmic-override={overrides.thematic}
              className={classNames("__wab_instance", sty.thematic)}
              initialValue={(() => {
                try {
                  return $state.formCreate.value.precisions == null
                    ? null
                    : $queries.variables.data.find(
                        x => x.id === $state.formCreate.value.precisions
                      ).name_macro;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h4Ulk
                  )}
                >
                  {"Dominante (Th\u00e9matique)"}
                </div>
              }
              name={"thematic"}
              shouldUpdate={true}
            >
              <AntdSelect
                data-plasmic-name={"select6"}
                data-plasmic-override={overrides.select6}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.select6)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select6", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                optionClassName={classNames({
                  [sty["pcls_AAKAa_6zCWa4"]]: true
                })}
                options={(() => {
                  try {
                    return $queries.variables.data
                      .filter(x => x.category === "thematic")
                      .map(x => ({
                        value: x.id,
                        label: x.name
                      }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                placeholder={"S\u00e9lectionner"}
                placeholderClassName={classNames({
                  [sty["pcls_BDmHpKDPikHG"]]: true
                })}
                popupClassName={classNames({
                  [sty["pcls_TplA_NoZzj9W"]]: true
                })}
                popupScopeClassName={sty["select6__popup"]}
                showSearch={true}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_Ydob7oPow27-"]]: true
                })}
                value={generateStateValueProp($state, ["select6", "value"])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              data-plasmic-name={"thematic2"}
              data-plasmic-override={overrides.thematic2}
              className={classNames("__wab_instance", sty.thematic2)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sviiu
                  )}
                >
                  {"Impliqu\u00e9s"}
                </div>
              }
              name={"implied"}
            >
              <AntdSelect
                data-plasmic-name={"select7"}
                data-plasmic-override={overrides.select7}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.select7)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                mode={"multiple"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select7", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                optionClassName={classNames({
                  [sty["pcls_0FAbco6Tt8J6"]]: true
                })}
                options={(() => {
                  try {
                    return $queries.variables.data
                      .filter(x => x.category === "implied")
                      .map(x => ({
                        value: x.id,
                        label: x.name
                      }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [
                        { value: "option1", label: "Option 1", type: "option" },
                        { value: "option2", label: "Option 2", type: "option" }
                      ];
                    }
                    throw e;
                  }
                })()}
                placeholder={"S\u00e9lectionner"}
                placeholderClassName={classNames({
                  [sty["pcls_19JUD6oq92pL"]]: true
                })}
                popupClassName={classNames({
                  [sty["pcls_lK09_LVEQDWo"]]: true
                })}
                popupScopeClassName={sty["select7__popup"]}
                showSearch={true}
                size={"middle"}
                triggerClassName={classNames({
                  [sty["pcls_BUI1E6tnLm0t"]]: true
                })}
                value={generateStateValueProp($state, ["select7", "value"])}
              />
            </FormItemWrapper>
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"impact"}
                data-plasmic-override={overrides.impact}
                className={classNames("__wab_instance", sty.impact)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5VcjF
                    )}
                  >
                    {"Impact sur la jauge "}
                  </div>
                }
                name={"impact_value"}
              >
                <AntdInputNumber
                  data-plasmic-name={"numberInput"}
                  data-plasmic-override={overrides.numberInput}
                  className={classNames("__wab_instance", sty.numberInput)}
                  controls={true}
                  max={10}
                  min={0}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "numberInput",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={"0"}
                  step={1}
                  type={"number"}
                  value={generateStateValueProp($state, [
                    "numberInput",
                    "value"
                  ])}
                />
              </FormItemWrapper>
            ) : null}
            {(() => {
              try {
                return $props.type === "main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"impactComment"}
                data-plasmic-override={overrides.impactComment}
                className={classNames("__wab_instance", sty.impactComment)}
                label={null}
                name={"impact_comment"}
              >
                <TextAreaInput
                  data-plasmic-name={"textAreaInput2"}
                  data-plasmic-override={overrides.textAreaInput2}
                  className={classNames("__wab_instance", sty.textAreaInput2)}
                  inputMode={"text"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "textAreaInput2",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"Commentaire impact"}
                />
              </FormItemWrapper>
            ) : null}
            {(() => {
              try {
                return $props.type === "runsheet";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FormItemWrapper
                data-plasmic-name={"dispo"}
                data-plasmic-override={overrides.dispo}
                className={classNames("__wab_instance", sty.dispo)}
                initialValue={undefined}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lat9I
                    )}
                  >
                    {"Dispositifs/Services"}
                  </div>
                }
                name={"dispositif_id"}
              >
                <AntdSelect
                  data-plasmic-name={"ddDispo"}
                  data-plasmic-override={overrides.ddDispo}
                  allowClear={true}
                  bordered={true}
                  className={classNames("__wab_instance", sty.ddDispo)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                  mode={"multiple"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "ddDispo",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionClassName={classNames({
                    [sty["pcls_r769F03EufSe"]]: true
                  })}
                  options={(() => {
                    try {
                      return $props.dispositif.data.map(item => ({
                        value: item.id,
                        label: item.main_mission
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__shAxO
                      )}
                    >
                      {"S\u00e9lectionner"}
                    </div>
                  }
                  placeholderClassName={classNames({
                    [sty["pcls__lDZGcs1EteU"]]: true
                  })}
                  popupClassName={classNames({
                    [sty["pcls_mV93R4tQsp3L"]]: true
                  })}
                  popupScopeClassName={sty["ddDispo__popup"]}
                  showSearch={true}
                  size={"middle"}
                  triggerClassName={classNames({
                    [sty["pcls_b69C-7kVRvOL"]]: true
                  })}
                  value={generateStateValueProp($state, ["ddDispo", "value"])}
                />
              </FormItemWrapper>
            ) : null}
            {(() => {
              try {
                return $props.type === "runsheet";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $props.dispositif.data.filter(dispo =>
                        $state.formCreate.value.dispositif_id.includes(dispo.id)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.formTaskDispo
                      ),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["formTaskDispo", __plasmic_idx_0, "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      key: currentIndex,
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["formTaskDispo", __plasmic_idx_0, "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["formTaskDispo"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "formTaskDispo[].value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "formTaskDispo[].isSubmitting"
                        }
                      ],
                      [__plasmic_idx_0],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"formTaskDispo"}
                        data-plasmic-override={overrides.formTaskDispo}
                        {...child$Props}
                      >
                        <div
                          data-plasmic-name={"dispositifs"}
                          data-plasmic-override={overrides.dispositifs}
                          className={classNames(
                            projectcss.all,
                            sty.dispositifs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__akyn8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.dispositif.data.find(
                                    dispo => Number(dispo.id) == currentItem.id
                                  ).main_mission;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Text";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <FormItemWrapper
                            data-plasmic-name={"thematic8"}
                            data-plasmic-override={overrides.thematic8}
                            className={classNames(
                              "__wab_instance",
                              sty.thematic8
                            )}
                            initialValue={(() => {
                              try {
                                return [
                                  {
                                    value: currentItem.id,
                                    label: currentItem.role_name
                                  }
                                ][0].value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6MtZc
                                )}
                              >
                                {"Dispositif"}
                              </div>
                            }
                            name={"id"}
                          >
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.select8
                                ),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                ),
                                disabled: true,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select8",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                },
                                optionClassName: classNames({
                                  [sty["pcls_GkSIlaM6z1lL"]]: true
                                }),
                                options: (() => {
                                  try {
                                    return [
                                      {
                                        value: currentItem.id,
                                        label: currentItem.role_name
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })(),
                                placeholder: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___5ASu
                                    )}
                                  >
                                    {"Select..."}
                                  </div>
                                ),
                                placeholderClassName: classNames({
                                  [sty["pcls_uEsFoLa62oy-"]]: true
                                }),
                                popupClassName: classNames({
                                  [sty["pcls_lkswwYt26fd9"]]: true
                                }),
                                popupScopeClassName: sty["select8__popup"],
                                size: "middle",
                                suffixIcon: null,
                                triggerClassName: classNames({
                                  [sty["pcls_VzwjI3fGaOtK"]]: true
                                }),
                                value: generateStateValueProp($state, [
                                  "select8",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "select8[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "select8[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSelect
                                  data-plasmic-name={"select8"}
                                  data-plasmic-override={overrides.select8}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"position"}
                            data-plasmic-override={overrides.position}
                            className={classNames(
                              "__wab_instance",
                              sty.position
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__euENp
                                )}
                              >
                                {"Positions site"}
                              </div>
                            }
                            name={"position_id"}
                            rules={[
                              { ruleType: "required", message: "Requis" }
                            ]}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: true,
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.select30
                                ),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select30",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                },
                                optionClassName: classNames({
                                  [sty["pcls_S23IPMIS4rNj"]]: true
                                }),
                                options: (() => {
                                  try {
                                    return $props.positions.data.map(
                                      position => ({
                                        value: position.id,
                                        label: position.specific_name
                                      })
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })(),
                                placeholder: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xrEmw
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                ),
                                placeholderClassName: classNames({
                                  [sty["pcls_LumVH_4AwM-3"]]: true
                                }),
                                popupClassName: classNames({
                                  [sty["pcls_arO1n1evsZ8v"]]: true
                                }),
                                popupScopeClassName: sty["select30__popup"],
                                showSearch: true,
                                size: "middle",
                                triggerClassName: classNames({
                                  [sty["pcls_x-HzSy8OyLtL"]]: true
                                }),
                                value: generateStateValueProp($state, [
                                  "select30",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "select30[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "select30[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSelect
                                  data-plasmic-name={"select30"}
                                  data-plasmic-override={overrides.select30}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          {(() => {
                            try {
                              return $props.type === "runsheet";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <FormItemWrapper
                              data-plasmic-name={"thematic11"}
                              data-plasmic-override={overrides.thematic11}
                              className={classNames(
                                "__wab_instance",
                                sty.thematic11
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eeG1W
                                  )}
                                >
                                  {
                                    "Convier le dispositif avant le d\u00e9but de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_before"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.select29
                                  ),
                                  defaultStylesClassName: classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select29",
                                      __plasmic_idx_0,
                                      "value"
                                    ]).apply(null, eventArgs);
                                  },
                                  optionClassName: classNames({
                                    [sty["pcls_ExSuCSkWVjul"]]: true
                                  }),
                                  options: (() => {
                                    try {
                                      return [
                                        {
                                          value: 15,
                                          label: "15 min avant"
                                        },
                                        {
                                          value: 30,
                                          label: "30 min avant"
                                        },
                                        {
                                          value: 60,
                                          label: "1 h avant"
                                        }
                                      ];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  placeholder: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dsjj8
                                      )}
                                    >
                                      {"S\u00e9lectionner"}
                                    </div>
                                  ),
                                  placeholderClassName: classNames({
                                    [sty["pcls_NCiOf42KxOOV"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_4umPTBrM_qYE"]]: true
                                  }),
                                  popupScopeClassName: sty["select29__popup"],
                                  showSearch: true,
                                  size: "middle",
                                  triggerClassName: classNames({
                                    [sty["pcls_LMITPUJngQwb"]]: true
                                  }),
                                  value: generateStateValueProp($state, [
                                    "select29",
                                    __plasmic_idx_0,
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "select29[].value"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  undefined ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "select29[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSelect
                                    data-plasmic-name={"select29"}
                                    data-plasmic-override={overrides.select29}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          ) : null}
                          <FormItemWrapper
                            data-plasmic-name={"generalDescription7"}
                            data-plasmic-override={
                              overrides.generalDescription7
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.generalDescription7
                            )}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__scZgw
                                )}
                              >
                                {"Description sp\u00e9cifique"}
                              </div>
                            }
                            name={"description"}
                          >
                            <TextAreaInput
                              data-plasmic-name={"textAreaInput3"}
                              data-plasmic-override={overrides.textAreaInput3}
                              className={classNames(
                                "__wab_instance",
                                sty.textAreaInput3
                              )}
                              inputMode={"text"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textAreaInput3",
                                  __plasmic_idx_0,
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Position site/Dispositif/Action"}
                            />
                          </FormItemWrapper>
                        </div>
                      </FormWrapper>
                    );
                  })();
                })
              : null}
            <Stack__
              as={"div"}
              data-plasmic-name={"files"}
              data-plasmic-override={overrides.files}
              hasGap={true}
              className={classNames(projectcss.all, sty.files)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t9PnE
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Fichier attach\u00e9"}
                  </span>
                </React.Fragment>
              </div>
              <UploadWrapper
                data-plasmic-name={"upload"}
                data-plasmic-override={overrides.upload}
                accept={""}
                className={classNames("__wab_instance", sty.upload)}
                dragAndDropFiles={true}
                files={generateStateValueProp($state, ["upload", "files"])}
                maxCount={1}
                onFilesChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["upload", "files"]).apply(
                    null,
                    eventArgs
                  );
                }}
                showUploadList={true}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__jtMgf)}
                  size={"large"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dUc8G
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Importer ou d\u00e9poser un fichier"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aCdl
                    )}
                  >
                    {"10 Mo max"}
                  </div>
                </AntdButton>
              </UploadWrapper>
            </Stack__>
            <Button
              className={classNames("__wab_instance", sty.button__zbcgi)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__orZsH
                  )}
                >
                  {"Cr\u00e9er"}
                </div>
              }
              submitsForm={true}
            />
          </FormWrapper>
        );
      })()}
      footer={<div className={classNames(projectcss.all, sty.freeBox__jRgU)} />}
      heading={
        <div
          data-plasmic-name={"frame1437254016"}
          data-plasmic-override={overrides.frame1437254016}
          className={classNames(projectcss.all, sty.frame1437254016)}
        >
          <div
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.type == "main_courante"
                    ? "Nouvelle carte"
                    : "Nouvelle action";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Nouvelle carte";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254019"}
            data-plasmic-override={overrides.frame1437254019}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254019)}
          >
            <LinkSimpleIcon
              className={classNames(projectcss.all, sty.svg__l2BpG)}
              role={"img"}
            />

            <XIcon
              className={classNames(projectcss.all, sty.svg__da9N)}
              onClick={async event => {
                const $steps = {};

                $steps["updateOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateOpen"] != null &&
                  typeof $steps["updateOpen"] === "object" &&
                  typeof $steps["updateOpen"].then === "function"
                ) {
                  $steps["updateOpen"] = await $steps["updateOpen"];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      }
      isOpen={generateStateValueProp($state, ["modalCreate", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modalCreate", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modalCreate: [
    "modalCreate",
    "frame1437254016",
    "name",
    "frame1437254019",
    "formCreate",
    "event",
    "select2",
    "title",
    "input",
    "status3",
    "select21",
    "dateStart",
    "timePicker2",
    "title2",
    "input2",
    "dateEnd",
    "timePicker3",
    "startingTask",
    "checkbox",
    "impactPrio",
    "select4",
    "generalDescription",
    "richTextEditor",
    "textAreaInput",
    "radioBut",
    "particular",
    "_switch",
    "share",
    "switch2",
    "precisions",
    "select5",
    "thematic",
    "select6",
    "thematic2",
    "select7",
    "impact",
    "numberInput",
    "impactComment",
    "textAreaInput2",
    "dispo",
    "ddDispo",
    "formTaskDispo",
    "dispositifs",
    "thematic8",
    "select8",
    "position",
    "select30",
    "thematic11",
    "select29",
    "generalDescription7",
    "textAreaInput3",
    "files",
    "upload"
  ],
  frame1437254016: ["frame1437254016", "name", "frame1437254019"],
  name: ["name"],
  frame1437254019: ["frame1437254019"],
  formCreate: [
    "formCreate",
    "event",
    "select2",
    "title",
    "input",
    "status3",
    "select21",
    "dateStart",
    "timePicker2",
    "title2",
    "input2",
    "dateEnd",
    "timePicker3",
    "startingTask",
    "checkbox",
    "impactPrio",
    "select4",
    "generalDescription",
    "richTextEditor",
    "textAreaInput",
    "radioBut",
    "particular",
    "_switch",
    "share",
    "switch2",
    "precisions",
    "select5",
    "thematic",
    "select6",
    "thematic2",
    "select7",
    "impact",
    "numberInput",
    "impactComment",
    "textAreaInput2",
    "dispo",
    "ddDispo",
    "formTaskDispo",
    "dispositifs",
    "thematic8",
    "select8",
    "position",
    "select30",
    "thematic11",
    "select29",
    "generalDescription7",
    "textAreaInput3",
    "files",
    "upload"
  ],
  event: ["event", "select2"],
  select2: ["select2"],
  title: ["title", "input"],
  input: ["input"],
  status3: ["status3", "select21"],
  select21: ["select21"],
  dateStart: ["dateStart", "timePicker2"],
  timePicker2: ["timePicker2"],
  title2: ["title2", "input2"],
  input2: ["input2"],
  dateEnd: ["dateEnd", "timePicker3"],
  timePicker3: ["timePicker3"],
  startingTask: ["startingTask", "checkbox"],
  checkbox: ["checkbox"],
  impactPrio: ["impactPrio", "select4"],
  select4: ["select4"],
  generalDescription: ["generalDescription", "richTextEditor", "textAreaInput"],
  richTextEditor: ["richTextEditor"],
  textAreaInput: ["textAreaInput"],
  radioBut: ["radioBut", "particular", "_switch", "share", "switch2"],
  particular: ["particular", "_switch"],
  _switch: ["_switch"],
  share: ["share", "switch2"],
  switch2: ["switch2"],
  precisions: ["precisions", "select5"],
  select5: ["select5"],
  thematic: ["thematic", "select6"],
  select6: ["select6"],
  thematic2: ["thematic2", "select7"],
  select7: ["select7"],
  impact: ["impact", "numberInput"],
  numberInput: ["numberInput"],
  impactComment: ["impactComment", "textAreaInput2"],
  textAreaInput2: ["textAreaInput2"],
  dispo: ["dispo", "ddDispo"],
  ddDispo: ["ddDispo"],
  formTaskDispo: [
    "formTaskDispo",
    "dispositifs",
    "thematic8",
    "select8",
    "position",
    "select30",
    "thematic11",
    "select29",
    "generalDescription7",
    "textAreaInput3"
  ],
  dispositifs: [
    "dispositifs",
    "thematic8",
    "select8",
    "position",
    "select30",
    "thematic11",
    "select29",
    "generalDescription7",
    "textAreaInput3"
  ],
  thematic8: ["thematic8", "select8"],
  select8: ["select8"],
  position: ["position", "select30"],
  select30: ["select30"],
  thematic11: ["thematic11", "select29"],
  select29: ["select29"],
  generalDescription7: ["generalDescription7", "textAreaInput3"],
  textAreaInput3: ["textAreaInput3"],
  files: ["files", "upload"],
  upload: ["upload"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modalCreate: typeof Modal;
  frame1437254016: "div";
  name: "div";
  frame1437254019: "div";
  formCreate: typeof FormWrapper;
  event: typeof FormItemWrapper;
  select2: typeof AntdSelect;
  title: typeof FormItemWrapper;
  input: typeof AntdInput;
  status3: typeof FormItemWrapper;
  select21: typeof AntdSelect;
  dateStart: typeof FormItemWrapper;
  timePicker2: typeof AntdDatePicker;
  title2: typeof FormItemWrapper;
  input2: typeof AntdInput;
  dateEnd: typeof FormItemWrapper;
  timePicker3: typeof AntdDatePicker;
  startingTask: typeof FormItemWrapper;
  checkbox: typeof Checkbox;
  impactPrio: typeof FormItemWrapper;
  select4: typeof AntdSelect;
  generalDescription: typeof FormItemWrapper;
  richTextEditor: typeof Quill;
  textAreaInput: typeof TextAreaInput;
  radioBut: "div";
  particular: typeof FormItemWrapper;
  _switch: typeof Switch;
  share: typeof FormItemWrapper;
  switch2: typeof Switch;
  precisions: typeof FormItemWrapper;
  select5: typeof AntdSelect;
  thematic: typeof FormItemWrapper;
  select6: typeof AntdSelect;
  thematic2: typeof FormItemWrapper;
  select7: typeof AntdSelect;
  impact: typeof FormItemWrapper;
  numberInput: typeof AntdInputNumber;
  impactComment: typeof FormItemWrapper;
  textAreaInput2: typeof TextAreaInput;
  dispo: typeof FormItemWrapper;
  ddDispo: typeof AntdSelect;
  formTaskDispo: typeof FormWrapper;
  dispositifs: "div";
  thematic8: typeof FormItemWrapper;
  select8: typeof AntdSelect;
  position: typeof FormItemWrapper;
  select30: typeof AntdSelect;
  thematic11: typeof FormItemWrapper;
  select29: typeof AntdSelect;
  generalDescription7: typeof FormItemWrapper;
  textAreaInput3: typeof TextAreaInput;
  files: "div";
  upload: typeof UploadWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateTask__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateTask__VariantsArgs;
    args?: PlasmicCreateTask__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateTask__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCreateTask__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateTask__ArgProps,
          internalVariantPropNames: PlasmicCreateTask__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modalCreate") {
    func.displayName = "PlasmicCreateTask";
  } else {
    func.displayName = `PlasmicCreateTask.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateTask = Object.assign(
  // Top-level PlasmicCreateTask renders the root element
  makeNodeComponent("modalCreate"),
  {
    // Helper components rendering sub-elements
    frame1437254016: makeNodeComponent("frame1437254016"),
    _name: makeNodeComponent("name"),
    frame1437254019: makeNodeComponent("frame1437254019"),
    formCreate: makeNodeComponent("formCreate"),
    event: makeNodeComponent("event"),
    select2: makeNodeComponent("select2"),
    title: makeNodeComponent("title"),
    input: makeNodeComponent("input"),
    status3: makeNodeComponent("status3"),
    select21: makeNodeComponent("select21"),
    dateStart: makeNodeComponent("dateStart"),
    timePicker2: makeNodeComponent("timePicker2"),
    title2: makeNodeComponent("title2"),
    input2: makeNodeComponent("input2"),
    dateEnd: makeNodeComponent("dateEnd"),
    timePicker3: makeNodeComponent("timePicker3"),
    startingTask: makeNodeComponent("startingTask"),
    checkbox: makeNodeComponent("checkbox"),
    impactPrio: makeNodeComponent("impactPrio"),
    select4: makeNodeComponent("select4"),
    generalDescription: makeNodeComponent("generalDescription"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    radioBut: makeNodeComponent("radioBut"),
    particular: makeNodeComponent("particular"),
    _switch: makeNodeComponent("_switch"),
    share: makeNodeComponent("share"),
    switch2: makeNodeComponent("switch2"),
    precisions: makeNodeComponent("precisions"),
    select5: makeNodeComponent("select5"),
    thematic: makeNodeComponent("thematic"),
    select6: makeNodeComponent("select6"),
    thematic2: makeNodeComponent("thematic2"),
    select7: makeNodeComponent("select7"),
    impact: makeNodeComponent("impact"),
    numberInput: makeNodeComponent("numberInput"),
    impactComment: makeNodeComponent("impactComment"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    dispo: makeNodeComponent("dispo"),
    ddDispo: makeNodeComponent("ddDispo"),
    formTaskDispo: makeNodeComponent("formTaskDispo"),
    dispositifs: makeNodeComponent("dispositifs"),
    thematic8: makeNodeComponent("thematic8"),
    select8: makeNodeComponent("select8"),
    position: makeNodeComponent("position"),
    select30: makeNodeComponent("select30"),
    thematic11: makeNodeComponent("thematic11"),
    select29: makeNodeComponent("select29"),
    generalDescription7: makeNodeComponent("generalDescription7"),
    textAreaInput3: makeNodeComponent("textAreaInput3"),
    files: makeNodeComponent("files"),
    upload: makeNodeComponent("upload"),

    // Metadata about props expected for PlasmicCreateTask
    internalVariantProps: PlasmicCreateTask__VariantProps,
    internalArgProps: PlasmicCreateTask__ArgProps
  }
);

export default PlasmicCreateTask;
/* prettier-ignore-end */
