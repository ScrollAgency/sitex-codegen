/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: gIRAoWCoKmMg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { HoursCalculator } from "../../../others/hoursCalculator/hoursCalculator"; // plasmic-import: NUh3K8InU4PR/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: lhUOZcKCH_AK/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import TextInput from "../../TextInput"; // plasmic-import: lm9M4C5ynpU1/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicUpdateDispo.module.css"; // plasmic-import: gIRAoWCoKmMg/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicUpdateDispo__VariantMembers = {};
export type PlasmicUpdateDispo__VariantsArgs = {};
type VariantPropType = keyof PlasmicUpdateDispo__VariantsArgs;
export const PlasmicUpdateDispo__VariantProps = new Array<VariantPropType>();

export type PlasmicUpdateDispo__ArgsType = {
  files?: any;
  positions?: any;
  tasks?: any;
  staff?: any;
  operation?: any;
  dispositif?: any;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  dispoIdUpdate?: number;
  onDispoIdUpdateChange2?: (val: string) => void;
  type?: string;
  stateTaskDispo2?: any;
  onStateTaskDispo2Change?: (val: string) => void;
  taskDispo?: any;
  modelId?: number;
  clientId?: number;
  hoursCalculator?: any;
  onHoursCalculatorChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicUpdateDispo__ArgsType;
export const PlasmicUpdateDispo__ArgProps = new Array<ArgPropType>(
  "files",
  "positions",
  "tasks",
  "staff",
  "operation",
  "dispositif",
  "open",
  "onOpenChange",
  "dispoIdUpdate",
  "onDispoIdUpdateChange2",
  "type",
  "stateTaskDispo2",
  "onStateTaskDispo2Change",
  "taskDispo",
  "modelId",
  "clientId",
  "hoursCalculator",
  "onHoursCalculatorChange"
);

export type PlasmicUpdateDispo__OverridesType = {
  modalUpdateDispo?: Flex__<typeof Modal>;
  frame1437254024?: Flex__<"div">;
  name7?: Flex__<"div">;
  frame1437254025?: Flex__<"div">;
  hoursCalculator2?: Flex__<typeof HoursCalculator>;
  formUpdateDispositif?: Flex__<typeof FormWrapper>;
  event4?: Flex__<typeof FormItemWrapper>;
  select12?: Flex__<typeof AntdSelect>;
  title8?: Flex__<typeof FormItemWrapper>;
  input5?: Flex__<typeof AntdInput>;
  title9?: Flex__<typeof FormItemWrapper>;
  input11?: Flex__<typeof AntdInput>;
  generalDescription5?: Flex__<typeof FormItemWrapper>;
  textAreaInput4?: Flex__<typeof TextAreaInput>;
  startingTaskDispo?: Flex__<typeof FormItemWrapper>;
  select24?: Flex__<typeof AntdSelect>;
  formStartingTaskDispo?: Flex__<typeof FormWrapper>;
  dispositifs4?: Flex__<"div">;
  taskDispoId?: Flex__<typeof FormItemWrapper>;
  select35?: Flex__<typeof AntdSelect>;
  dateStart4?: Flex__<typeof FormItemWrapper>;
  dateStart5?: Flex__<typeof AntdDatePicker>;
  minBefore3?: Flex__<typeof FormItemWrapper>;
  minBefore4?: Flex__<typeof AntdSelect>;
  position3?: Flex__<typeof FormItemWrapper>;
  positionSite?: Flex__<typeof AntdSelect>;
  libele3?: Flex__<typeof FormItemWrapper>;
  input20?: Flex__<typeof AntdInput>;
  libele4?: Flex__<typeof FormItemWrapper>;
  input21?: Flex__<typeof AntdInput>;
  generalDescription9?: Flex__<typeof FormItemWrapper>;
  textAreaInput3?: Flex__<typeof TextAreaInput>;
  dateEnd4?: Flex__<typeof FormItemWrapper>;
  dateEnd5?: Flex__<typeof AntdDatePicker>;
  minBefore2?: Flex__<typeof FormItemWrapper>;
  select36?: Flex__<typeof AntdSelect>;
  endingTaskDispo?: Flex__<typeof FormItemWrapper>;
  select29?: Flex__<typeof AntdSelect>;
  formEndingTaskDispo?: Flex__<typeof FormWrapper>;
  dispositifs5?: Flex__<"div">;
  taskDispoId2?: Flex__<typeof FormItemWrapper>;
  select37?: Flex__<typeof AntdSelect>;
  dateStart6?: Flex__<typeof FormItemWrapper>;
  dateStart7?: Flex__<typeof AntdDatePicker>;
  minBefore5?: Flex__<typeof FormItemWrapper>;
  minBefore6?: Flex__<typeof AntdSelect>;
  position4?: Flex__<typeof FormItemWrapper>;
  positionSite2?: Flex__<typeof AntdSelect>;
  libele5?: Flex__<typeof FormItemWrapper>;
  input22?: Flex__<typeof AntdInput>;
  libele6?: Flex__<typeof FormItemWrapper>;
  input23?: Flex__<typeof AntdInput>;
  generalDescription10?: Flex__<typeof FormItemWrapper>;
  textAreaInput5?: Flex__<typeof TextAreaInput>;
  dateEnd6?: Flex__<typeof FormItemWrapper>;
  dateEnd7?: Flex__<typeof AntdDatePicker>;
  minBefore7?: Flex__<typeof FormItemWrapper>;
  select38?: Flex__<typeof AntdSelect>;
  thematic13?: Flex__<typeof FormItemWrapper>;
  select23?: Flex__<typeof AntdSelect>;
  detailsTarif?: Flex__<"div">;
  title11?: Flex__<typeof FormItemWrapper>;
  textInput?: Flex__<typeof TextInput>;
  detailsHours?: Flex__<"div">;
  title10?: Flex__<typeof FormItemWrapper>;
  input12?: Flex__<typeof AntdInput>;
  title12?: Flex__<typeof FormItemWrapper>;
  input14?: Flex__<typeof AntdInput>;
  detailsTarif2?: Flex__<"div">;
  mainMission?: Flex__<typeof FormItemWrapper>;
  select22?: Flex__<typeof AntdSelect>;
  thematic15?: Flex__<typeof FormItemWrapper>;
  select25?: Flex__<typeof AntdSelect>;
  thematic16?: Flex__<typeof FormItemWrapper>;
  select26?: Flex__<typeof AntdSelect>;
  thematic17?: Flex__<typeof FormItemWrapper>;
  select13?: Flex__<typeof AntdSelect>;
  thematic18?: Flex__<typeof FormItemWrapper>;
  select27?: Flex__<typeof AntdSelect>;
  thematic19?: Flex__<typeof FormItemWrapper>;
  select28?: Flex__<typeof AntdSelect>;
  generalDescription6?: Flex__<typeof FormItemWrapper>;
  textAreaInput2?: Flex__<typeof TextAreaInput>;
  upload4?: Flex__<typeof UploadWrapper>;
};

export interface DefaultUpdateDispoProps {
  files?: any;
  positions?: any;
  tasks?: any;
  staff?: any;
  operation?: any;
  dispositif?: any;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  dispoIdUpdate?: number;
  onDispoIdUpdateChange2?: (val: string) => void;
  type?: string;
  stateTaskDispo2?: any;
  onStateTaskDispo2Change?: (val: string) => void;
  taskDispo?: any;
  modelId?: number;
  clientId?: number;
  hoursCalculator?: any;
  onHoursCalculatorChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUpdateDispo__RenderFunc(props: {
  variants: PlasmicUpdateDispo__VariantsArgs;
  args: PlasmicUpdateDispo__ArgsType;
  overrides: PlasmicUpdateDispo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tasks: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modalUpdateDispo.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "formUpdateDispositif.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formUpdateDispositif",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formUpdateDispositif.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formUpdateDispositif",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select25.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select27.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select28.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload4.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.formUpdateDispositif.value.attached_file ==
                undefined ||
                $state.formUpdateDispositif.value.attached_file == null
                ? null
                : [
                    {
                      name: $props.files.data.find(
                        f =>
                          Number(f.id) ==
                          Number(
                            $state.formUpdateDispositif.value.attached_file
                          )
                      ).attached_file,
                      download_url:
                        "https://wrtucmaotoeqjhalofcv.supabase.co/storage/v1/object/public/tasks/" +
                        $props.files.data.find(
                          f =>
                            Number(f.id) ==
                            Number(
                              $state.formUpdateDispositif.value.attached_file
                            )
                        ).attached_file
                    }
                  ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "formStartingTaskDispo.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formStartingTaskDispo",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formStartingTaskDispo.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formStartingTaskDispo",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select35.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateStart5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "minBefore4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "positionSite.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dateEnd5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "dispoIdUpdate",
        type: "writable",
        variableType: "number",

        valueProp: "dispoIdUpdate",
        onChangeProp: "onDispoIdUpdateChange2"
      },
      {
        path: "stateTaskDispo2",
        type: "writable",
        variableType: "array",

        valueProp: "stateTaskDispo2",
        onChangeProp: "onStateTaskDispo2Change"
      },
      {
        path: "select36.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select29.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formEndingTaskDispo.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEndingTaskDispo",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEndingTaskDispo.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEndingTaskDispo",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select37.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateStart7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "minBefore6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "positionSite2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textAreaInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateEnd7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select38.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showHours",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showCost",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showUnitPrice",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "startingTask",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return Number(
                $props.taskDispo.data.find(
                  y => y.id == $state.startingTaskDispo2
                ).task_id
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "endingTask",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return Number(
                $props.taskDispo.data.find(
                  y => Number(y.id) == Number($state.endingTaskDispo2)
                ).task_id
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "startingTaskDispo2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.dispositif.data.find(
                x => x.id == $state.dispoIdUpdate
              ).starting_task_dispo;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "endingTaskDispo2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.dispositif.data.find(
                x => x.id == $state.dispoIdUpdate
              ).ending_task_dispo;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "hoursCalculator",
        type: "writable",
        variableType: "object",

        valueProp: "hoursCalculator",
        onChangeProp: "onHoursCalculatorChange"
      },
      {
        path: "prices",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const sta = $props.staff.data.filter(
                  x =>
                    x.id == Number($state.formUpdateDispositif.value.staff_id)
                );
                return sta.map(x => ({
                  unit_price_day: x.unit_price_day,
                  unit_price_night: x.unit_price_night,
                  unit_price_sun_day: x.unit_price_sun_day,
                  unit_price_sun_night: x.unit_price_sun_night,
                  unit_price_holiday_day: x.unit_price_holiday_day,
                  unit_price_holiday_night: x.unit_price_holiday_night,
                  unit_price_sun_holiday_day: x.unit_price_sun_holiday_day,
                  unit_price_sun_holiday_night: x.unit_price_sun_holiday_night
                }))[0];
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  unit_price_day: 0,
                  unit_price_night: 0,
                  unit_price_sun_day: 0,
                  unit_price_sun_night: 0,
                  unit_price_holiday_day: 0,
                  unit_price_holiday_night: 0,
                  unit_price_sun_holiday_day: 0,
                  unit_price_sun_holiday_night: 0
                };
              }
              throw e;
            }
          })()
      },
      {
        path: "totalPrice",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.prices?.unit_price_day *
                  $state.hoursCalculator.regularDayHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_night *
                  $state.hoursCalculator.regularNightHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_sun_day *
                  $state.hoursCalculator.sundayDayHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_sun_night *
                  $state.hoursCalculator.sundayNightHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_holiday_day *
                  $state.hoursCalculator.holidayDayHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_holiday_night *
                  $state.hoursCalculator.sundayNightHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_sun_holiday_day *
                  $state.hoursCalculator.sundayHolidayDayHours *
                  Number($state.agentCount) +
                $state.prices?.unit_price_sun_holiday_night *
                  $state.hoursCalculator.sundayHolidayNightHours *
                  Number($state.agentCount)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "agentCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return Number($state.formUpdateDispositif.value.agent_count);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "changedValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    variables: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "c33282f8-04ee-4513-8eba-486ff4909289",
        userArgs: {
          filters: [$props.clientId]
        },
        cacheKey: `plasmic.$.c33282f8-04ee-4513-8eba-486ff4909289.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getProfil: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "3a6df28f-4493-4b48-954b-c4494e361914",
        userArgs: {
          keys: [
            $props.dispositif.data.find(x => x.id == $state.dispoIdUpdate)
              .last_updated_by
          ]
        },
        cacheKey: `plasmic.$.3a6df28f-4493-4b48-954b-c4494e361914.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <Modal
      data-plasmic-name={"modalUpdateDispo"}
      data-plasmic-override={overrides.modalUpdateDispo}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modalUpdateDispo)}
      closeOnBackdropClick={false}
      content={
        <React.Fragment>
          <HoursCalculator
            data-plasmic-name={"hoursCalculator2"}
            data-plasmic-override={overrides.hoursCalculator2}
            className={classNames("__wab_instance", sty.hoursCalculator2)}
            dateEnd={(() => {
              try {
                return $state.formEndingTaskDispo.value.date_end;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            dateStart={(() => {
              try {
                return $state.formStartingTaskDispo.value.date_start;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onHoursChange={async result => {
              const $steps = {};

              $steps["updateHoursCalculator2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["hoursCalculator"]
                      },
                      operation: 0,
                      value: result
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateHoursCalculator2"] != null &&
                typeof $steps["updateHoursCalculator2"] === "object" &&
                typeof $steps["updateHoursCalculator2"].then === "function"
              ) {
                $steps["updateHoursCalculator2"] = await $steps[
                  "updateHoursCalculator2"
                ];
              }
            }}
            ref={ref => {
              $refs["hoursCalculator2"] = ref;
            }}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.formUpdateDispositif),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["formUpdateDispositif", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);

                (async (changedValues, allValues) => {
                  const $steps = {};

                  $steps["updateChangedValues"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["changedValues"]
                          },
                          operation: 0,
                          value: changedValues
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateChangedValues"] != null &&
                    typeof $steps["updateChangedValues"] === "object" &&
                    typeof $steps["updateChangedValues"].then === "function"
                  ) {
                    $steps["updateChangedValues"] = await $steps[
                      "updateChangedValues"
                    ];
                  }

                  $steps["startTask"] = (
                    $state.changedValues.starting_task ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return setTimeout(() => {
                              $state.startingTask =
                                $state.formUpdateDispositif.value.starting_task;
                              $state.formStartingTaskDispo.value.date_start =
                                $props.tasks.find(
                                  x => x.id == $state.startingTask
                                )?.date_start;
                              $state.formStartingTaskDispo.value.date_end =
                                $props.tasks.find(
                                  x => x.id == $state.startingTask
                                )?.date_end;
                            }, 100);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["startTask"] != null &&
                    typeof $steps["startTask"] === "object" &&
                    typeof $steps["startTask"].then === "function"
                  ) {
                    $steps["startTask"] = await $steps["startTask"];
                  }

                  $steps["endTask"] = (
                    $state.changedValues.ending_task ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return setTimeout(() => {
                              $state.endingTask =
                                $state.formUpdateDispositif.value.ending_task;
                              $state.formEndingTaskDispo.value.date_start =
                                $props.tasks.find(
                                  x => x.id == $state.endingTask
                                )?.date_start;
                              $state.formEndingTaskDispo.value.date_end =
                                $props.tasks.find(
                                  x => x.id == $state.endingTask
                                )?.date_end;
                            }, 100);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["endTask"] != null &&
                    typeof $steps["endTask"] === "object" &&
                    typeof $steps["endTask"].then === "function"
                  ) {
                    $steps["endTask"] = await $steps["endTask"];
                  }

                  $steps["runCode3"] = (
                    $state.changedValues.ending_task ||
                    $state.changedValues.starting_task
                      ? true
                      : false
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return setTimeout(() => {
                              $state.hoursCalculator =
                                $refs.hoursCalculator2.getCurrentResult();
                              $state.formUpdateDispositif.value.total_hours =
                                $state.hoursCalculator.totalHours;
                            }, 1000);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode3"] != null &&
                    typeof $steps["runCode3"] === "object" &&
                    typeof $steps["runCode3"].then === "function"
                  ) {
                    $steps["runCode3"] = await $steps["runCode3"];
                  }

                  $steps["updateStffPrices"] = (
                    $state.changedValues.staff_id ? true : null
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["prices"]
                          },
                          operation: 0,
                          value: (() => {
                            const sta = $props.staff.data.filter(
                              x =>
                                x.id ==
                                Number(
                                  $state.formUpdateDispositif.value.staff_id
                                )
                            );
                            return sta.map(x => ({
                              unit_price_day: x.unit_price_day,
                              unit_price_night: x.unit_price_night,
                              unit_price_sun_day: x.unit_price_sun_day,
                              unit_price_sun_night: x.unit_price_sun_night,
                              unit_price_holiday_day: x.unit_price_holiday_day,
                              unit_price_holiday_night:
                                x.unit_price_holiday_night,
                              unit_price_sun_holiday_day:
                                x.unit_price_sun_holiday_day,
                              unit_price_sun_holiday_night:
                                x.unit_price_sun_holiday_night
                            }))[0];
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStffPrices"] != null &&
                    typeof $steps["updateStffPrices"] === "object" &&
                    typeof $steps["updateStffPrices"].then === "function"
                  ) {
                    $steps["updateStffPrices"] = await $steps[
                      "updateStffPrices"
                    ];
                  }

                  $steps["updateAgentCount"] = (
                    $state.changedValues.agent_count ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["agentCount"]
                          },
                          operation: 0,
                          value: Number(
                            $state.formUpdateDispositif.value.agent_count
                          )
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAgentCount"] != null &&
                    typeof $steps["updateAgentCount"] === "object" &&
                    typeof $steps["updateAgentCount"].then === "function"
                  ) {
                    $steps["updateAgentCount"] = await $steps[
                      "updateAgentCount"
                    ];
                  }

                  $steps["totalPrices"] = (
                    $state.changedValues.staff_id ||
                    $state.changedValues.ending_task_dispo ||
                    $state.changedValues.starting_task_dispo ||
                    $state.changedValues.agent_count
                      ? true
                      : null
                  )
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.formUpdateDispositif.value.total_price =
                              $state.prices.unit_price_day *
                                $state.hoursCalculator.regularDayHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_night *
                                $state.hoursCalculator.regularNightHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_sun_day *
                                $state.hoursCalculator.sundayDayHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_sun_night *
                                $state.hoursCalculator.sundayNightHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_holiday_day *
                                $state.hoursCalculator.holidayDayHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_holiday_night *
                                $state.hoursCalculator.sundayNightHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_sun_holiday_day *
                                $state.hoursCalculator.sundayHolidayDayHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ) +
                              $state.prices.unit_price_sun_holiday_night *
                                $state.hoursCalculator.sundayHolidayNightHours *
                                Number(
                                  $state.formUpdateDispositif.value.agent_count
                                ));
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["totalPrices"] != null &&
                    typeof $steps["totalPrices"] === "object" &&
                    typeof $steps["totalPrices"].then === "function"
                  ) {
                    $steps["totalPrices"] = await $steps["totalPrices"];
                  }

                  $steps["updateChangedValues2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["changedValues"]
                          },
                          operation: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, undefined);
                          return undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateChangedValues2"] != null &&
                    typeof $steps["updateChangedValues2"] === "object" &&
                    typeof $steps["updateChangedValues2"].then === "function"
                  ) {
                    $steps["updateChangedValues2"] = await $steps[
                      "updateChangedValues2"
                    ];
                  }
                }).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              initialValues: (() => {
                try {
                  return $props.dispositif.data.find(
                    dispo => Number(dispo.id) == Number($state.dispoIdUpdate)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["supabaseUploadFile"] =
                  $state.upload4.files !== null &&
                  $state.upload4.files.length > 0 &&
                  $state.upload4.files[0].uid !== undefined
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                            opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                            userArgs: {
                              path: [$state.upload4.files[0].name],
                              content: [$state.upload4.files[0].contents],
                              contentType: [$state.upload4.files[0].type]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["supabaseUploadFile"] != null &&
                  typeof $steps["supabaseUploadFile"] === "object" &&
                  typeof $steps["supabaseUploadFile"].then === "function"
                ) {
                  $steps["supabaseUploadFile"] = await $steps[
                    "supabaseUploadFile"
                  ];
                }

                $steps["updateFile"] =
                  $state.upload4.files !== null &&
                  $state.upload4.files.length > 0 &&
                  $state.upload4.files[0].uid !== undefined
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "aadf0b1a-92dc-4cd2-be42-716ea59f56ef",
                            userArgs: {
                              keys: [
                                $state.formUpdateDispositif.value.attached_file
                              ],
                              variables: [$steps.supabaseUploadFile?.path]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateFile"] != null &&
                  typeof $steps["updateFile"] === "object" &&
                  typeof $steps["updateFile"].then === "function"
                ) {
                  $steps["updateFile"] = await $steps["updateFile"];
                }

                $steps["updateDispo"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "f8419d62-6b89-4b22-93fb-d0fdcd6d16d7",
                          userArgs: {
                            keys: [$state.dispoIdUpdate],
                            variables: [
                              $state.formUpdateDispositif.value
                                .additional_notes,
                              $state.formUpdateDispositif.value.agent_count,
                              $props.type === "model"
                                ? null
                                : $state.formUpdateDispositif.value
                                    .associated_operation,
                              $state.formUpdateDispositif.value.description,
                              $state.formUpdateDispositif.value.function,
                              $state.formUpdateDispositif.value.id_sitex,
                              $state.formUpdateDispositif.value.main_mission,
                              $state.formUpdateDispositif.value.outfit,
                              $state.formUpdateDispositif.value.position_id,
                              $state.formUpdateDispositif.value.premium_hours,
                              $state.formUpdateDispositif.value.role_name,
                              $state.formUpdateDispositif.value.service_type,
                              $state.formUpdateDispositif.value.staff_id,
                              $state.formUpdateDispositif.value.tags,
                              $state.formUpdateDispositif.value.task_id,
                              $state.formUpdateDispositif.value.thematic,
                              $state.formUpdateDispositif.value.total_hours,
                              $state.formUpdateDispositif.value.total_price,
                              $steps.supabaseUploadFile?.path,
                              $props.type === "model" ? $props.modelId : null,
                              $ctx.SupabaseUser.user == null
                                ? null
                                : $ctx.SupabaseUser.user.id
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [
                            "231e308b-653f-44ec-b971-c9e99c82c230",
                            "38496a2c-2970-40cf-bfd9-47a20de7a9d0",
                            "8a2f0ee3-a6bf-421f-bcf3-5e61735476c7",
                            "2c71e561-9ccf-412c-9737-2509ec61ee99",
                            "330d5325-6e12-4b25-97e4-15853a7883d0",
                            "fa5c4dfe-59a9-43d6-8bce-9d467217a75e",
                            "cec3d7bf-5ee9-47a3-ab41-392259ef4090",
                            "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                            "ae8f6af7-e283-4770-a3e5-c810ebc5351d"
                          ],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDispo"] != null &&
                  typeof $steps["updateDispo"] === "object" &&
                  typeof $steps["updateDispo"].then === "function"
                ) {
                  $steps["updateDispo"] = await $steps["updateDispo"];
                }

                $steps["updateStartingTaskDispo"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "97844f60-51c7-4625-a878-6bde8ebc986c",
                          userArgs: {
                            keys: [$state.startingTaskDispo2],
                            variables: [
                              $state.formStartingTaskDispo.value.description,
                              $ctx.SupabaseUser.user.id,
                              $state.formStartingTaskDispo.value.min_after,
                              $state.formStartingTaskDispo.value.min_before,
                              $state.formStartingTaskDispo.value.position_id,
                              $state.formStartingTaskDispo.value.position_name,
                              $state.formStartingTaskDispo.value
                                .position_sector,
                              new Date().toISOString(),
                              $props.type === "model" ? $props.modelId : null,
                              $state.formUpdateDispositif.value.starting_task
                                .value == undefined
                                ? $state.formUpdateDispositif.value
                                    .starting_task
                                : $state.formUpdateDispositif.value
                                    .starting_task.value
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [
                            "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                            "ae8f6af7-e283-4770-a3e5-c810ebc5351d"
                          ],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStartingTaskDispo"] != null &&
                  typeof $steps["updateStartingTaskDispo"] === "object" &&
                  typeof $steps["updateStartingTaskDispo"].then === "function"
                ) {
                  $steps["updateStartingTaskDispo"] = await $steps[
                    "updateStartingTaskDispo"
                  ];
                }

                $steps["updateEndingTaskDispo"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "97844f60-51c7-4625-a878-6bde8ebc986c",
                          userArgs: {
                            variables: [
                              $state.formEndingTaskDispo.value.description,
                              $ctx.SupabaseUser.user.id,
                              $state.formEndingTaskDispo.value.min_after,
                              $state.formEndingTaskDispo.value.min_before,
                              $state.formEndingTaskDispo.value.position_id,
                              $state.formEndingTaskDispo.value.position_name,
                              $state.formEndingTaskDispo.value.position_sector,
                              new Date().toISOString(),
                              $props.type === "model" ? $props.modelId : null,
                              $state.formUpdateDispositif.value.ending_task
                                .value == undefined
                                ? $state.formUpdateDispositif.value.ending_task
                                : $state.formUpdateDispositif.value.ending_task
                                    .value
                            ],
                            keys: [$state.endingTaskDispo2]
                          },
                          cacheKey: null,
                          invalidatedKeys: [
                            "26fc4d8a-8e48-4bc6-a566-5b4c2cfcbc1a",
                            "ae8f6af7-e283-4770-a3e5-c810ebc5351d"
                          ],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEndingTaskDispo"] != null &&
                  typeof $steps["updateEndingTaskDispo"] === "object" &&
                  typeof $steps["updateEndingTaskDispo"].then === "function"
                ) {
                  $steps["updateEndingTaskDispo"] = await $steps[
                    "updateEndingTaskDispo"
                  ];
                }

                $steps["notif"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          "Dispositif mis \u00e0 jour",
                          undefined,
                          undefined,
                          "bottom"
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["notif"] != null &&
                  typeof $steps["notif"] === "object" &&
                  typeof $steps["notif"].then === "function"
                ) {
                  $steps["notif"] = await $steps["notif"];
                }

                $steps["updateLegacy"] = false
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "d1zf2RtPRa3si4ocCd79Kx",
                          opId: "90b67f4d-7cce-4b41-b53a-f989920585b3",
                          userArgs: {
                            body: [
                              $state.formTaskDispo3
                                .map(item => item.value)
                                .filter(item => item.id != null)
                                .map(item => {
                                  const { date_start, date_end, ...rest } =
                                    item;
                                  return rest;
                                })
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLegacy"] != null &&
                  typeof $steps["updateLegacy"] === "object" &&
                  typeof $steps["updateLegacy"].then === "function"
                ) {
                  $steps["updateLegacy"] = await $steps["updateLegacy"];
                }

                $steps["createLegacy"] = false
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "v6umJuHyep6kPNyCAJjouT",
                          opId: "6a7ac4af-ecf4-4bf7-9ac7-bd31959fc65e",
                          userArgs: {
                            variables: [
                              $state.formTaskDispo3
                                .map(item => item.value)
                                .filter(item => item.id == null)
                                .map(item => ({
                                  task_id: Number(item.task_id),
                                  dispositif_id: Number($state.dispoIdUpdate),
                                  position_id: Number(item.position_id),
                                  min_before: item.min_before,
                                  min_after: item.min_after,
                                  description: item.description,
                                  position_name: item.position_name,
                                  position_sector: item.position_sector,
                                  associated_model: $props.modelId || null
                                }))
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["createLegacy"] != null &&
                  typeof $steps["createLegacy"] === "object" &&
                  typeof $steps["createLegacy"].then === "function"
                ) {
                  $steps["createLegacy"] = await $steps["createLegacy"];
                }

                $steps["deleteLegacy"] =
                  $state.stateTaskDispo2
                    .map(item => item.task_id)
                    .filter(
                      task_id =>
                        !$state.formUpdateDispositif.value.task_id
                          .map(di => di.value)
                          .includes(Number(task_id))
                    ).length > 0
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "156b3310-2d9f-4a6f-8dee-a904141db795",
                            userArgs: {
                              query: [
                                $state.stateTaskDispo2
                                  .filter(
                                    item =>
                                      !$state.formUpdateDispositif.value.task_id
                                        .map(di => di.value)
                                        .includes(Number(item.task_id))
                                  )
                                  .map(item => item.id)
                                  .join(",")
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["deleteLegacy"] != null &&
                  typeof $steps["deleteLegacy"] === "object" &&
                  typeof $steps["deleteLegacy"].then === "function"
                ) {
                  $steps["deleteLegacy"] = await $steps["deleteLegacy"];
                }

                $steps["updateModalUpdateDispoIsOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalUpdateDispo", "isOpen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalUpdateDispoIsOpen"] != null &&
                  typeof $steps["updateModalUpdateDispoIsOpen"] === "object" &&
                  typeof $steps["updateModalUpdateDispoIsOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalUpdateDispoIsOpen"] = await $steps[
                    "updateModalUpdateDispoIsOpen"
                  ];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["formUpdateDispositif", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["formUpdateDispositif"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "formUpdateDispositif.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "formUpdateDispositif.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"formUpdateDispositif"}
                data-plasmic-override={overrides.formUpdateDispositif}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $props.type !== "model";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    data-plasmic-name={"event4"}
                    data-plasmic-override={overrides.event4}
                    className={classNames("__wab_instance", sty.event4)}
                    initialValue={(() => {
                      try {
                        return $props.operation.data.length == 1 &&
                          $props.type !== "model"
                          ? $props.operation.data.map(item => ({
                              value: item.id,
                              label: item.title
                            }))
                          : null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nAefs
                        )}
                      >
                        {"Op\u00e9ration associ\u00e9e"}
                      </div>
                    }
                    name={"associated_operation"}
                    rules={[
                      { ruleType: "required", message: "Mod\u00e8le requis" }
                    ]}
                  >
                    <AntdSelect
                      data-plasmic-name={"select12"}
                      data-plasmic-override={overrides.select12}
                      className={classNames("__wab_instance", sty.select12)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select12",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      optionClassName={classNames({
                        [sty["pcls_qkvjFPN0dRSu"]]: true
                      })}
                      options={(() => {
                        try {
                          return $props.operation.data.map(item => ({
                            value: item.id,
                            label: item.title
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4YefI
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      placeholderClassName={classNames({
                        [sty["pcls_EU85248bARQG"]]: true
                      })}
                      popupClassName={classNames({
                        [sty["pcls_g4OOIKbvFD2X"]]: true
                      })}
                      popupScopeClassName={sty["select12__popup"]}
                      size={"middle"}
                      triggerClassName={classNames({
                        [sty["pcls_l85pociNsR95"]]: true
                      })}
                      value={generateStateValueProp($state, [
                        "select12",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                ) : null}
                <FormItemWrapper
                  data-plasmic-name={"title8"}
                  data-plasmic-override={overrides.title8}
                  className={classNames("__wab_instance", sty.title8)}
                  initialValue={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g5Sq
                      )}
                    >
                      {"Nom fonction *"}
                    </div>
                  }
                  name={"role_name"}
                  rules={[{ ruleType: "required", message: "Titre requis" }]}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input5),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input5", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "Titre",
                      size: "large",
                      value: generateStateValueProp($state, ["input5", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input5.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input5"}
                        data-plasmic-override={overrides.input5}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title9"}
                  data-plasmic-override={overrides.title9}
                  className={classNames("__wab_instance", sty.title9)}
                  initialValue={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yYp6E
                      )}
                    >
                      {"Matricule"}
                    </div>
                  }
                  name={"id_sitex"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input11),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input11", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "Titre",
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input11",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input11.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input11"}
                        data-plasmic-override={overrides.input11}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"generalDescription5"}
                  data-plasmic-override={overrides.generalDescription5}
                  className={classNames(
                    "__wab_instance",
                    sty.generalDescription5
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jklPm
                      )}
                    >
                      {"Description"}
                    </div>
                  }
                  name={"description"}
                >
                  <TextAreaInput
                    data-plasmic-name={"textAreaInput4"}
                    data-plasmic-override={overrides.textAreaInput4}
                    className={classNames("__wab_instance", sty.textAreaInput4)}
                    inputMode={"text"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textAreaInput4",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      "Si une situation est en cours d'\u00e9volution, Heure, commentaire"
                    }
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"startingTaskDispo"}
                  data-plasmic-override={overrides.startingTaskDispo}
                  className={classNames(
                    "__wab_instance",
                    sty.startingTaskDispo
                  )}
                  initialValue={$state.startingTask}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nuKlD
                      )}
                    >
                      {"Marqueur de d\u00e9but de service"}
                    </div>
                  }
                  name={"starting_task"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <AntdSelect
                    data-plasmic-name={"select24"}
                    data-plasmic-override={overrides.select24}
                    allowClear={false}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select24)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"single"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select24",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_jAwBQ-GVbsnp"]]: true
                    })}
                    options={(() => {
                      try {
                        return $props.tasks.map(item => ({
                          value: Number(item.id),
                          label: item.title
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__byKio
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_ObEx11S8iTwK"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_SpqTchVYk6Zc"]]: true
                    })}
                    popupScopeClassName={sty["select24__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_1FP1BtqAbhss"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select24",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.formUpdateDispositif.value.starting_task
                      ? true
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.formStartingTaskDispo
                        ),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["formStartingTaskDispo", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ];
                            }
                            throw e;
                          }
                        })(),
                        initialValues: (() => {
                          try {
                            return $props.taskDispo.data.find(
                              x => x.id == $state.startingTaskDispo2
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["formStartingTaskDispo", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["formStartingTaskDispo"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "formStartingTaskDispo.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName:
                              "formStartingTaskDispo.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"formStartingTaskDispo"}
                          data-plasmic-override={
                            overrides.formStartingTaskDispo
                          }
                          {...child$Props}
                        >
                          <div
                            data-plasmic-name={"dispositifs4"}
                            data-plasmic-override={overrides.dispositifs4}
                            className={classNames(
                              projectcss.all,
                              sty.dispositifs4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aEMvI
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.tasks.find(
                                      x =>
                                        x.id ==
                                        $state.formUpdateDispositif.value
                                          .starting_task
                                    )?.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <FormItemWrapper
                              data-plasmic-name={"taskDispoId"}
                              data-plasmic-override={overrides.taskDispoId}
                              className={classNames(
                                "__wab_instance",
                                sty.taskDispoId
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kvnIj
                                  )}
                                >
                                  {"Dispositif"}
                                </div>
                              }
                              name={"id"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select35"}
                                data-plasmic-override={overrides.select35}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select35
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                disabled={true}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select35",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={[]}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9XNly
                                    )}
                                  >
                                    {"Select..."}
                                  </div>
                                }
                                popupScopeClassName={sty["select35__popup"]}
                                size={"middle"}
                                suffixIcon={null}
                                value={generateStateValueProp($state, [
                                  "select35",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"dateStart4"}
                              data-plasmic-override={overrides.dateStart4}
                              className={classNames(
                                "__wab_instance",
                                sty.dateStart4
                              )}
                              initialValue={
                                $props.tasks.find(
                                  x => x.id == $state.startingTask
                                )?.date_start
                              }
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jd76I
                                  )}
                                >
                                  {"Date et heure de d\u00e9but"}
                                </div>
                              }
                              name={"date_start"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateStart5
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateStart5", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_B2Xbi_SDWXdz"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_bJUGH00VJlpZ"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_2KfQZa4hytYP"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_UBCggi6P8T5T"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["dateStart5__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "dateStart5",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateStart5.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateStart5"}
                                    data-plasmic-override={overrides.dateStart5}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kQyBd
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore3"}
                              data-plasmic-override={overrides.minBefore3}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore3
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aKkI7
                                  )}
                                >
                                  {
                                    "Convier le dispositif avant le d\u00e9but de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_before"}
                            >
                              <AntdSelect
                                data-plasmic-name={"minBefore4"}
                                data-plasmic-override={overrides.minBefore4}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.minBefore4
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "minBefore4",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min avant"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min avant"
                                      },
                                      {
                                        value: 60,
                                        label: "1 h avant"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__titY
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["minBefore4__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "minBefore4",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"position3"}
                              data-plasmic-override={overrides.position3}
                              className={classNames(
                                "__wab_instance",
                                sty.position3
                              )}
                              initialValue={(() => {
                                try {
                                  return $props.positions.data
                                    .filter(
                                      p =>
                                        p.id ==
                                        $state.formStartingTaskDispo.value
                                          .position_id
                                    )
                                    .map(p => ({
                                      value: p.id,
                                      label: p.specific_name
                                    }))[0];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ct02
                                  )}
                                >
                                  {"Positions site"}
                                </div>
                              }
                              name={"position_id"}
                              rules={[
                                { ruleType: "required", message: "Requis" }
                              ]}
                            >
                              <AntdSelect
                                data-plasmic-name={"positionSite"}
                                data-plasmic-override={overrides.positionSite}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.positionSite
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "positionSite",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return $props.positions.data.map(p => ({
                                      value: p.id,
                                      label: p.specific_name
                                    }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rdlQd
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["positionSite__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "positionSite",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cqGJe
                              )}
                            >
                              <FormItemWrapper
                                data-plasmic-name={"libele3"}
                                data-plasmic-override={overrides.libele3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele3
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__aZcdH
                                    )}
                                  >
                                    {"Libell\u00e9"}
                                  </div>
                                }
                                name={"position_name"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input20
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input20", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Libell\u00e9",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input20",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input20.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input20"}
                                      data-plasmic-override={overrides.input20}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                data-plasmic-name={"libele4"}
                                data-plasmic-override={overrides.libele4}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele4
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yR4Xg
                                    )}
                                  >
                                    {"Secteur"}
                                  </div>
                                }
                                name={"position_sector"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input21
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input21", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Secteur",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input21",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input21.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input21"}
                                      data-plasmic-override={overrides.input21}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </Stack__>
                            <FormItemWrapper
                              data-plasmic-name={"generalDescription9"}
                              data-plasmic-override={
                                overrides.generalDescription9
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.generalDescription9
                              )}
                              initialValue={undefined}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__puFTc
                                  )}
                                >
                                  {"Description sp\u00e9cifique"}
                                </div>
                              }
                              name={"description"}
                            >
                              <TextAreaInput
                                data-plasmic-name={"textAreaInput3"}
                                data-plasmic-override={overrides.textAreaInput3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textAreaInput3
                                )}
                                inputMode={"text"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textAreaInput3",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"dateEnd4"}
                              data-plasmic-override={overrides.dateEnd4}
                              className={classNames(
                                "__wab_instance",
                                sty.dateEnd4
                              )}
                              initialValue={
                                $props.tasks.find(
                                  x => x.id == $state.startingTask
                                )?.date_end
                              }
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__syBMq
                                  )}
                                >
                                  {"Date et heure de fin"}
                                </div>
                              }
                              name={"date_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateEnd5
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateEnd5", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_tZ3OusTCnuf7"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls__8HCy4NuehGS"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_ofIZGYfZxJrf"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_THfh7dDP4920"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["dateEnd5__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "dateEnd5",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateEnd5.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateEnd5"}
                                    data-plasmic-override={overrides.dateEnd5}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oNgfv
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore2"}
                              data-plasmic-override={overrides.minBefore2}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1Bzl
                                  )}
                                >
                                  {
                                    "Cong\u00e9dier le dispositif apr\u00e8s la fin de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_after"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select36"}
                                data-plasmic-override={overrides.select36}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select36
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select36",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min avant"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min avant"
                                      },
                                      {
                                        value: 60,
                                        label: "1 h avant"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__agv9K
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select36__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select36",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                          </div>
                        </FormWrapper>
                      );
                    })()
                  : null}
                <FormItemWrapper
                  data-plasmic-name={"endingTaskDispo"}
                  data-plasmic-override={overrides.endingTaskDispo}
                  className={classNames("__wab_instance", sty.endingTaskDispo)}
                  initialValue={(() => {
                    try {
                      return $state.endingTask;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a02FT
                      )}
                    >
                      {"Marqueur de fin de service"}
                    </div>
                  }
                  name={"ending_task"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <AntdSelect
                    data-plasmic-name={"select29"}
                    data-plasmic-override={overrides.select29}
                    allowClear={false}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select29)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"single"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select29",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_QmZpLTYjkAKE"]]: true
                    })}
                    options={(() => {
                      try {
                        return $props.tasks.map(item => ({
                          value: Number(item.id),
                          label: item.title
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fK5Ji
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_LI5AYaymF_0o"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_yQMvfx7LHn9O"]]: true
                    })}
                    popupScopeClassName={sty["select29__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_dKcyOV6t1Vib"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select29",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.formUpdateDispositif.value.ending_task
                      ? true
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.formEndingTaskDispo
                        ),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["formEndingTaskDispo", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ];
                            }
                            throw e;
                          }
                        })(),
                        initialValues: (() => {
                          try {
                            return $props.taskDispo.data.find(
                              x => x.id == $state.endingTaskDispo2
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["formEndingTaskDispo", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["formEndingTaskDispo"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "formEndingTaskDispo.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "formEndingTaskDispo.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"formEndingTaskDispo"}
                          data-plasmic-override={overrides.formEndingTaskDispo}
                          {...child$Props}
                        >
                          <div
                            data-plasmic-name={"dispositifs5"}
                            data-plasmic-override={overrides.dispositifs5}
                            className={classNames(
                              projectcss.all,
                              sty.dispositifs5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oIsNf
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.tasks.find(
                                      x =>
                                        x.id ==
                                        $state.formEndingTaskDispo.value.task_id
                                    ).title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <FormItemWrapper
                              data-plasmic-name={"taskDispoId2"}
                              data-plasmic-override={overrides.taskDispoId2}
                              className={classNames(
                                "__wab_instance",
                                sty.taskDispoId2
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aoYcZ
                                  )}
                                >
                                  {"Dispositif"}
                                </div>
                              }
                              name={"id"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select37"}
                                data-plasmic-override={overrides.select37}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select37
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                disabled={true}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select37",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={[]}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__g5TTh
                                    )}
                                  >
                                    {"Select..."}
                                  </div>
                                }
                                popupScopeClassName={sty["select37__popup"]}
                                size={"middle"}
                                suffixIcon={null}
                                value={generateStateValueProp($state, [
                                  "select37",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"dateStart6"}
                              data-plasmic-override={overrides.dateStart6}
                              className={classNames(
                                "__wab_instance",
                                sty.dateStart6
                              )}
                              initialValue={
                                $props.tasks.find(
                                  x => x.id == $state.endingTask
                                )?.date_start
                              }
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__toiyP
                                  )}
                                >
                                  {"Date et heure de d\u00e9but"}
                                </div>
                              }
                              name={"date_start"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateStart7
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateStart7", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_iV9DMuMFBW8P"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_CkBI69uQpNK8"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_g0tVwQ8d12ao"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls__WNOaEn4R7c1"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["dateStart7__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "dateStart7",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateStart7.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateStart7"}
                                    data-plasmic-override={overrides.dateStart7}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uUcxf
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore5"}
                              data-plasmic-override={overrides.minBefore5}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore5
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oCtGi
                                  )}
                                >
                                  {
                                    "Convier le dispositif avant le d\u00e9but de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_before"}
                            >
                              <AntdSelect
                                data-plasmic-name={"minBefore6"}
                                data-plasmic-override={overrides.minBefore6}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.minBefore6
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "minBefore6",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min avant"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min avant"
                                      },
                                      {
                                        value: 60,
                                        label: "1 h avant"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9PYKj
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["minBefore6__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "minBefore6",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"position4"}
                              data-plasmic-override={overrides.position4}
                              className={classNames(
                                "__wab_instance",
                                sty.position4
                              )}
                              initialValue={(() => {
                                try {
                                  return $props.positions.data
                                    .filter(
                                      p =>
                                        p.id ==
                                        $state.formEndingTaskDispo.value
                                          .position_id
                                    )
                                    .map(p => ({
                                      value: p.id,
                                      label: p.specific_name
                                    }))[0];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cdHsB
                                  )}
                                >
                                  {"Positions site"}
                                </div>
                              }
                              name={"position_id"}
                              rules={[
                                { ruleType: "required", message: "Requis" }
                              ]}
                            >
                              <AntdSelect
                                data-plasmic-name={"positionSite2"}
                                data-plasmic-override={overrides.positionSite2}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.positionSite2
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "positionSite2",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return $props.positions.data.map(p => ({
                                      value: p.id,
                                      label: p.specific_name
                                    }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lo1Gs
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={
                                  sty["positionSite2__popup"]
                                }
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "positionSite2",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6I4J4
                              )}
                            >
                              <FormItemWrapper
                                data-plasmic-name={"libele5"}
                                data-plasmic-override={overrides.libele5}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele5
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bfOww
                                    )}
                                  >
                                    {"Libell\u00e9"}
                                  </div>
                                }
                                name={"position_name"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input22
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input22", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Libell\u00e9",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input22",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input22.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input22"}
                                      data-plasmic-override={overrides.input22}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                data-plasmic-name={"libele6"}
                                data-plasmic-override={overrides.libele6}
                                className={classNames(
                                  "__wab_instance",
                                  sty.libele6
                                )}
                                initialValue={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__oMzGe
                                    )}
                                  >
                                    {"Secteur"}
                                  </div>
                                }
                                name={"position_sector"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input23
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input23", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    placeholder: "Secteur",
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input23",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input23.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input23"}
                                      data-plasmic-override={overrides.input23}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </Stack__>
                            <FormItemWrapper
                              data-plasmic-name={"generalDescription10"}
                              data-plasmic-override={
                                overrides.generalDescription10
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.generalDescription10
                              )}
                              initialValue={undefined}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gw7Bp
                                  )}
                                >
                                  {"Description sp\u00e9cifique"}
                                </div>
                              }
                              name={"description"}
                            >
                              <TextAreaInput
                                data-plasmic-name={"textAreaInput5"}
                                data-plasmic-override={overrides.textAreaInput5}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textAreaInput5
                                )}
                                inputMode={"text"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textAreaInput5",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"dateEnd6"}
                              data-plasmic-override={overrides.dateEnd6}
                              className={classNames(
                                "__wab_instance",
                                sty.dateEnd6
                              )}
                              initialValue={
                                $props.tasks.find(
                                  x => x.id == $state.endingTask
                                )?.date_end
                              }
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8PXn
                                  )}
                                >
                                  {"Date et heure de fin"}
                                </div>
                              }
                              name={"date_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateEnd7
                                  ),
                                  disabled: true,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateEnd7", "value"],
                                      AntdDatePicker_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  popupBodyClassName: classNames({
                                    [sty["pcls_Wp_Dd60dN_8Y"]]: true
                                  }),
                                  popupClassName: classNames({
                                    [sty["pcls_XUZ6-tIY1ADW"]]: true
                                  }),
                                  popupFooterClassName: classNames({
                                    [sty["pcls_KcGC2M0Uf1u_"]]: true
                                  }),
                                  popupHeaderClassName: classNames({
                                    [sty["pcls_uwHCdxeccqXp"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["dateEnd7__datePickerPopup"],
                                  showNow: false,
                                  showTime: true,
                                  value: generateStateValueProp($state, [
                                    "dateEnd7",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateEnd7.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateEnd7"}
                                    data-plasmic-override={overrides.dateEnd7}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tO4Yu
                                )}
                              >
                                {
                                  "Le changement d'heure se fait directement sur la runsheet."
                                }
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"minBefore7"}
                              data-plasmic-override={overrides.minBefore7}
                              className={classNames(
                                "__wab_instance",
                                sty.minBefore7
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2E07U
                                  )}
                                >
                                  {
                                    "Cong\u00e9dier le dispositif apr\u00e8s la fin de l\u2019action"
                                  }
                                </div>
                              }
                              name={"min_after"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select38"}
                                data-plasmic-override={overrides.select38}
                                allowClear={true}
                                bordered={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select38
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select38",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return [
                                      {
                                        value: 15,
                                        label: "15 min avant"
                                      },
                                      {
                                        value: 30,
                                        label: "30 min avant"
                                      },
                                      {
                                        value: 60,
                                        label: "1 h avant"
                                      }
                                    ];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nQrPg
                                    )}
                                  >
                                    {"S\u00e9lectionner"}
                                  </div>
                                }
                                popupScopeClassName={sty["select38__popup"]}
                                showSearch={true}
                                size={"middle"}
                                value={generateStateValueProp($state, [
                                  "select38",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                          </div>
                        </FormWrapper>
                      );
                    })()
                  : null}
                <FormItemWrapper
                  data-plasmic-name={"thematic13"}
                  data-plasmic-override={overrides.thematic13}
                  className={classNames("__wab_instance", sty.thematic13)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uXoYm
                      )}
                    >
                      {"Code Tarif"}
                    </div>
                  }
                  name={"staff_id"}
                  rules={[
                    { ruleType: "required", message: "Code tarif requis" }
                  ]}
                >
                  <AntdSelect
                    data-plasmic-name={"select23"}
                    data-plasmic-override={overrides.select23}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select23)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select23",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_BnlkxwD-KVfY"]]: true
                    })}
                    options={(() => {
                      try {
                        return $props.staff.data.map(item => ({
                          value: item.id,
                          label: `${item.name} - ${item.code_price} - ${item.service_type}`
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___671Qo
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_IfeUrJ45jntZ"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_Z0MHWWMoeHNQ"]]: true
                    })}
                    popupScopeClassName={sty["select23__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_wJt5q1tRrLNm"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select23",
                      "value"
                    ])}
                  />

                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__e92ED
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Voir plus"}
                  </PlasmicLink__>
                  <div
                    data-plasmic-name={"detailsTarif"}
                    data-plasmic-override={overrides.detailsTarif}
                    className={classNames(projectcss.all, sty.detailsTarif)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__llF1I
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowUnitPrice"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showUnitPrice"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowUnitPrice"] != null &&
                          typeof $steps["updateShowUnitPrice"] === "object" &&
                          typeof $steps["updateShowUnitPrice"].then ===
                            "function"
                        ) {
                          $steps["updateShowUnitPrice"] = await $steps[
                            "updateShowUnitPrice"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.showUnitPrice
                              ? "Voir moins"
                              : "Voir plus";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Voir moins";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                    {(() => {
                      try {
                        return $state.showUnitPrice;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hUwo4
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Prix unitaire horaire jour (\u20AC HT) : " +
                                $state.prices.unit_price_day +
                                "\n" +
                                "Prix unitaire nuit (\u20AC HT) : " +
                                $state.prices.unit_price_night +
                                "\n" +
                                "Prix unitaire dimanche jour (\u20AC HT) : " +
                                $state.prices.unit_price_sun_day +
                                "\n" +
                                "Prix unitaire dimanche nuit (\u20AC HT) : " +
                                $state.prices.unit_price_sun_night +
                                "\n" +
                                "Prix unitaire férié jour (\u20AC HT) : " +
                                $state.prices.unit_price_holiday_day +
                                "\n" +
                                "Prix unitaire férié nuit (\u20AC HT) : " +
                                $state.prices.unit_price_holiday_night +
                                "\n" +
                                "Prix unitaire dimanche férié jour (\u20AC HT) : " +
                                $state.prices.unit_price_sun_holiday_day +
                                "\n" +
                                "Prix unitaire dimanche férié nuit (\u20AC HT) : " +
                                $state.prices.unit_price_sun_holiday_night
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title11"}
                  data-plasmic-override={overrides.title11}
                  className={classNames("__wab_instance", sty.title11)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__judKm
                      )}
                    >
                      {"Nombre d'heures"}
                    </div>
                  }
                  name={"total_hours"}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    defaultValue={(() => {
                      try {
                        return $state.hoursCalculator.totalHours;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    inputMode={"decimal"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <div
                    data-plasmic-name={"detailsHours"}
                    data-plasmic-override={overrides.detailsHours}
                    className={classNames(projectcss.all, sty.detailsHours)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__cMvby
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runActionOnHoursCalculator2"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "hoursCalculator2",
                                action: "calculate"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnHoursCalculator2"] != null &&
                          typeof $steps["runActionOnHoursCalculator2"] ===
                            "object" &&
                          typeof $steps["runActionOnHoursCalculator2"].then ===
                            "function"
                        ) {
                          $steps["runActionOnHoursCalculator2"] = await $steps[
                            "runActionOnHoursCalculator2"
                          ];
                        }

                        $steps["updateHoursCalculator"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["hoursCalculator"]
                                },
                                operation: 0,
                                value: $refs.hoursCalculator2.getCurrentResult()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateHoursCalculator"] != null &&
                          typeof $steps["updateHoursCalculator"] === "object" &&
                          typeof $steps["updateHoursCalculator"].then ===
                            "function"
                        ) {
                          $steps["updateHoursCalculator"] = await $steps[
                            "updateHoursCalculator"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.formUpdateDispositif.value.total_hours =
                                    $state.hoursCalculator);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"Re-calculer"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__hcjLi
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowHours"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showHours"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowHours"] != null &&
                          typeof $steps["updateShowHours"] === "object" &&
                          typeof $steps["updateShowHours"].then === "function"
                        ) {
                          $steps["updateShowHours"] = await $steps[
                            "updateShowHours"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.showHours
                              ? "Voir moins"
                              : "Voir plus";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Voir moins";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                    {(() => {
                      try {
                        return $state.showHours;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__enh22
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Heures jour : " +
                                $state.hoursCalculator.regularDayHours +
                                "\n" +
                                "Heures nuit : " +
                                $state.hoursCalculator.regularNightHours +
                                "\n" +
                                "Heures jour dimanche : " +
                                $state.hoursCalculator.sundayDayHours +
                                "\n" +
                                "Heures nuit dimanche : " +
                                $state.hoursCalculator.sundayNightHours +
                                "\n" +
                                "Heures jour férié : " +
                                $state.hoursCalculator.holidayDayHours +
                                "\n" +
                                "Heures nuit férié : " +
                                $state.hoursCalculator.holidayNightHours +
                                "\n" +
                                "Heures jour dimanche férié : " +
                                $state.hoursCalculator.sundayHolidayDayHours +
                                "\n" +
                                "Heures jour dimanche férié : " +
                                $state.hoursCalculator.sundayHolidayNightHours
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title10"}
                  data-plasmic-override={overrides.title10}
                  className={classNames("__wab_instance", sty.title10)}
                  initialValue={(() => {
                    try {
                      return $state.agentCount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__folhx
                      )}
                    >
                      {"Nombre d\u2019agents"}
                    </div>
                  }
                  name={"agent_count"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input12),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input12", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "4",
                      size: "large",
                      type: "number",
                      value: generateStateValueProp($state, [
                        "input12",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input12.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input12"}
                        data-plasmic-override={overrides.input12}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"title12"}
                  data-plasmic-override={overrides.title12}
                  className={classNames("__wab_instance", sty.title12)}
                  initialValue={$state.totalPrice}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gc4Iw
                      )}
                    >
                      {"Co\u00fbt total (tarif * heures * agents)"}
                    </div>
                  }
                  name={"total_price"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input14),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input14", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: "47\u20ac",
                      size: "large",
                      type: "number",
                      value: generateStateValueProp($state, [
                        "input14",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input14.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input14"}
                        data-plasmic-override={overrides.input14}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    data-plasmic-name={"detailsTarif2"}
                    data-plasmic-override={overrides.detailsTarif2}
                    className={classNames(projectcss.all, sty.detailsTarif2)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__xolLk
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.formUpdateDispositif.value.total_price =
                                    $state.prices.unit_price_day *
                                      $state.hoursCalculator.regularDayHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_night *
                                      $state.hoursCalculator.regularNightHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_sun_day *
                                      $state.hoursCalculator.sundayDayHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_sun_night *
                                      $state.hoursCalculator.sundayNightHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_holiday_day *
                                      $state.hoursCalculator.holidayDayHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_holiday_night *
                                      $state.hoursCalculator.sundayNightHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_sun_holiday_day *
                                      $state.hoursCalculator
                                        .sundayHolidayDayHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ) +
                                    $state.prices.unit_price_sun_holiday_night *
                                      $state.hoursCalculator
                                        .sundayHolidayNightHours *
                                      Number(
                                        $state.formUpdateDispositif.value
                                          .agent_count
                                      ));
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"Re-calculer"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__dJh4P
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateShowCost"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showCost"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowCost"] != null &&
                          typeof $steps["updateShowCost"] === "object" &&
                          typeof $steps["updateShowCost"].then === "function"
                        ) {
                          $steps["updateShowCost"] = await $steps[
                            "updateShowCost"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.showCost ? "Voir moins" : "Voir plus";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Voir moins";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                    {(() => {
                      try {
                        return $state.showCost;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__prfi8
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Prix total jour (\u20AC HT) : " +
                                $state.prices?.unit_price_day *
                                  $state.hoursCalculator.regularDayHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total nuit (\u20AC HT) : " +
                                $state.prices?.unit_price_night *
                                  $state.hoursCalculator.regularNightHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total dimanche jour (\u20AC HT) : " +
                                $state.prices?.unit_price_sun_day *
                                  $state.hoursCalculator.sundayDayHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total dimanche nuit (\u20AC HT) : " +
                                $state.prices?.unit_price_sun_night *
                                  $state.hoursCalculator.sundayNightHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total férié jour (\u20AC HT) : " +
                                $state.prices?.unit_price_holiday_day *
                                  $state.hoursCalculator.holidayDayHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total férié nuit (\u20AC HT) : " +
                                $state.prices?.unit_price_holiday_night *
                                  $state.hoursCalculator.sundayNightHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total dimanche férié jour (\u20AC HT) : " +
                                $state.prices?.unit_price_sun_holiday_day *
                                  $state.hoursCalculator.sundayHolidayDayHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  ) +
                                "\n" +
                                "Prix total dimanche férié nuit (\u20AC HT) : " +
                                $state.prices?.unit_price_sun_holiday_night *
                                  $state.hoursCalculator
                                    .sundayHolidayNightHours *
                                  Number(
                                    $state.formUpdateDispositif.value
                                      ?.agent_count
                                  )
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"mainMission"}
                  data-plasmic-override={overrides.mainMission}
                  className={classNames("__wab_instance", sty.mainMission)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rtHvw
                      )}
                    >
                      {"Mission principale"}
                    </div>
                  }
                  name={"main_mission"}
                  rules={[{ ruleType: "required", message: "Requis" }]}
                >
                  <AntdSelect
                    data-plasmic-name={"select22"}
                    data-plasmic-override={overrides.select22}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select22)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select22",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "main_mission")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mVxWj
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    popupScopeClassName={sty["select22__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_LlRJhOby8Zv7"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select22",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic15"}
                  data-plasmic-override={overrides.thematic15}
                  className={classNames("__wab_instance", sty.thematic15)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g69Hr
                      )}
                    >
                      {"Type de service"}
                    </div>
                  }
                  name={"service_type"}
                >
                  <AntdSelect
                    data-plasmic-name={"select25"}
                    data-plasmic-override={overrides.select25}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select25)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select25",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_KHcB5IDloU5T"]]: true
                    })}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "service_type")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gz3L
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_RpbDgOgXD0-m"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_gDKP_DfMib_v"]]: true
                    })}
                    popupScopeClassName={sty["select25__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_G7ddWcpZ25Wo"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select25",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic16"}
                  data-plasmic-override={overrides.thematic16}
                  className={classNames("__wab_instance", sty.thematic16)}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zBbn
                      )}
                    >
                      {"Fonction"}
                    </div>
                  }
                  name={"function"}
                >
                  <AntdSelect
                    data-plasmic-name={"select26"}
                    data-plasmic-override={overrides.select26}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select26)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select26",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_77gcdbPvllE9"]]: true
                    })}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "function")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5SGr
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_Ctv5zbUjTB9W"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_G0JzeTJFX54-"]]: true
                    })}
                    popupScopeClassName={sty["select26__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_VXQQ26I1dgIv"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select26",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic17"}
                  data-plasmic-override={overrides.thematic17}
                  className={classNames("__wab_instance", sty.thematic17)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7TLyK
                      )}
                    >
                      {"Dominante (Th\u00e9matique)"}
                    </div>
                  }
                  name={"thematic"}
                >
                  <AntdSelect
                    data-plasmic-name={"select13"}
                    data-plasmic-override={overrides.select13}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select13)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select13",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "thematic")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z7ZYg
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    popupScopeClassName={sty["select13__popup"]}
                    showSearch={true}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_lU_37SI3KY3v"]]: true
                    })}
                    value={generateStateValueProp($state, [
                      "select13",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic18"}
                  data-plasmic-override={overrides.thematic18}
                  className={classNames("__wab_instance", sty.thematic18)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c2DLs
                      )}
                    >
                      {"Tags mission"}
                    </div>
                  }
                  name={"tags"}
                >
                  <AntdSelect
                    data-plasmic-name={"select27"}
                    data-plasmic-override={overrides.select27}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select27)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"tags"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select27",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(
                            x =>
                              x.category === "main_mission" ||
                              x.category === "service_type" ||
                              x.category === "function"
                          )
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qoM2B
                        )}
                      >
                        {"+\u00a0 S\u00e9lectionner"}
                      </div>
                    }
                    popupScopeClassName={sty["select27__popup"]}
                    showSearch={true}
                    size={"middle"}
                    value={generateStateValueProp($state, [
                      "select27",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"thematic19"}
                  data-plasmic-override={overrides.thematic19}
                  className={classNames("__wab_instance", sty.thematic19)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eg2Z8
                      )}
                    >
                      {"Mat\u00e9riel/Tenue"}
                    </div>
                  }
                  name={"outfit"}
                >
                  <AntdSelect
                    data-plasmic-name={"select28"}
                    data-plasmic-override={overrides.select28}
                    allowClear={true}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select28)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    mode={"tags"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select28",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $queries.variables.data
                          .filter(x => x.category === "outfit")
                          .map(x => ({
                            value: x.id,
                            label: x.name
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oPdUw
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"+"}
                          </span>
                          <React.Fragment>
                            {" S\u00e9lectionner"}
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    }
                    popupScopeClassName={sty["select28__popup"]}
                    showSearch={true}
                    size={"middle"}
                    value={generateStateValueProp($state, [
                      "select28",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"generalDescription6"}
                  data-plasmic-override={overrides.generalDescription6}
                  className={classNames(
                    "__wab_instance",
                    sty.generalDescription6
                  )}
                  initialValue={undefined}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nfS2V
                      )}
                    >
                      {"Notes compl\u00e9mentaires"}
                    </div>
                  }
                  name={"additional_notes"}
                >
                  <TextAreaInput
                    data-plasmic-name={"textAreaInput2"}
                    data-plasmic-override={overrides.textAreaInput2}
                    className={classNames("__wab_instance", sty.textAreaInput2)}
                    inputMode={"text"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textAreaInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Notes"}
                  />
                </FormItemWrapper>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bettM)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ojiYq
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Fichier attach\u00e9"}
                      </span>
                    </React.Fragment>
                  </div>
                  <UploadWrapper
                    data-plasmic-name={"upload4"}
                    data-plasmic-override={overrides.upload4}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload4)}
                    dragAndDropFiles={true}
                    files={generateStateValueProp($state, ["upload4", "files"])}
                    maxCount={1}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload4",
                        "files"
                      ]).apply(null, eventArgs);
                    }}
                    showUploadList={true}
                  >
                    <AntdButton
                      className={classNames("__wab_instance", sty.button__apE8)}
                      size={"large"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ywOf1
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Importer ou d\u00e9poser un fichier"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iEgY5
                        )}
                      >
                        {"10 Mo max"}
                      </div>
                    </AntdButton>
                  </UploadWrapper>
                </Stack__>
                <Button
                  className={classNames("__wab_instance", sty.button__nBn3X)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nq6Ym
                      )}
                    >
                      {"Mettre \u00e0 jour"}
                    </div>
                  }
                  submitsForm={true}
                />
              </FormWrapper>
            );
          })()}
        </React.Fragment>
      }
      footer={
        <div className={classNames(projectcss.all, sty.freeBox__chmHc)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ilDna
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Dernière modification à : " +
                    new Date($state.formUpdateDispositif.value.updated_at)
                      .toISOString()
                      .replace("T", " ")
                      .replace(/\.\d{3}Z/, "")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qt1Vg
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Dernière modification par : " +
                    $queries.getProfil.data[0].email
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      }
      heading={
        <div
          data-plasmic-name={"frame1437254024"}
          data-plasmic-override={overrides.frame1437254024}
          className={classNames(projectcss.all, sty.frame1437254024)}
        >
          <div
            data-plasmic-name={"name7"}
            data-plasmic-override={overrides.name7}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name7
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Modifier service n\xB0" +
                    $state.formUpdateDispositif.value.id
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Modifier service";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254025"}
            data-plasmic-override={overrides.frame1437254025}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254025)}
          >
            <LinkSimpleIcon
              className={classNames(projectcss.all, sty.svg__mdNJs)}
              role={"img"}
            />

            <XIcon
              className={classNames(projectcss.all, sty.svg__tjh1W)}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      }
      isOpen={generateStateValueProp($state, ["modalUpdateDispo", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modalUpdateDispo", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modalUpdateDispo: [
    "modalUpdateDispo",
    "frame1437254024",
    "name7",
    "frame1437254025",
    "hoursCalculator2",
    "formUpdateDispositif",
    "event4",
    "select12",
    "title8",
    "input5",
    "title9",
    "input11",
    "generalDescription5",
    "textAreaInput4",
    "startingTaskDispo",
    "select24",
    "formStartingTaskDispo",
    "dispositifs4",
    "taskDispoId",
    "select35",
    "dateStart4",
    "dateStart5",
    "minBefore3",
    "minBefore4",
    "position3",
    "positionSite",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput3",
    "dateEnd4",
    "dateEnd5",
    "minBefore2",
    "select36",
    "endingTaskDispo",
    "select29",
    "formEndingTaskDispo",
    "dispositifs5",
    "taskDispoId2",
    "select37",
    "dateStart6",
    "dateStart7",
    "minBefore5",
    "minBefore6",
    "position4",
    "positionSite2",
    "libele5",
    "input22",
    "libele6",
    "input23",
    "generalDescription10",
    "textAreaInput5",
    "dateEnd6",
    "dateEnd7",
    "minBefore7",
    "select38",
    "thematic13",
    "select23",
    "detailsTarif",
    "title11",
    "textInput",
    "detailsHours",
    "title10",
    "input12",
    "title12",
    "input14",
    "detailsTarif2",
    "mainMission",
    "select22",
    "thematic15",
    "select25",
    "thematic16",
    "select26",
    "thematic17",
    "select13",
    "thematic18",
    "select27",
    "thematic19",
    "select28",
    "generalDescription6",
    "textAreaInput2",
    "upload4"
  ],
  frame1437254024: ["frame1437254024", "name7", "frame1437254025"],
  name7: ["name7"],
  frame1437254025: ["frame1437254025"],
  hoursCalculator2: ["hoursCalculator2"],
  formUpdateDispositif: [
    "formUpdateDispositif",
    "event4",
    "select12",
    "title8",
    "input5",
    "title9",
    "input11",
    "generalDescription5",
    "textAreaInput4",
    "startingTaskDispo",
    "select24",
    "formStartingTaskDispo",
    "dispositifs4",
    "taskDispoId",
    "select35",
    "dateStart4",
    "dateStart5",
    "minBefore3",
    "minBefore4",
    "position3",
    "positionSite",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput3",
    "dateEnd4",
    "dateEnd5",
    "minBefore2",
    "select36",
    "endingTaskDispo",
    "select29",
    "formEndingTaskDispo",
    "dispositifs5",
    "taskDispoId2",
    "select37",
    "dateStart6",
    "dateStart7",
    "minBefore5",
    "minBefore6",
    "position4",
    "positionSite2",
    "libele5",
    "input22",
    "libele6",
    "input23",
    "generalDescription10",
    "textAreaInput5",
    "dateEnd6",
    "dateEnd7",
    "minBefore7",
    "select38",
    "thematic13",
    "select23",
    "detailsTarif",
    "title11",
    "textInput",
    "detailsHours",
    "title10",
    "input12",
    "title12",
    "input14",
    "detailsTarif2",
    "mainMission",
    "select22",
    "thematic15",
    "select25",
    "thematic16",
    "select26",
    "thematic17",
    "select13",
    "thematic18",
    "select27",
    "thematic19",
    "select28",
    "generalDescription6",
    "textAreaInput2",
    "upload4"
  ],
  event4: ["event4", "select12"],
  select12: ["select12"],
  title8: ["title8", "input5"],
  input5: ["input5"],
  title9: ["title9", "input11"],
  input11: ["input11"],
  generalDescription5: ["generalDescription5", "textAreaInput4"],
  textAreaInput4: ["textAreaInput4"],
  startingTaskDispo: ["startingTaskDispo", "select24"],
  select24: ["select24"],
  formStartingTaskDispo: [
    "formStartingTaskDispo",
    "dispositifs4",
    "taskDispoId",
    "select35",
    "dateStart4",
    "dateStart5",
    "minBefore3",
    "minBefore4",
    "position3",
    "positionSite",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput3",
    "dateEnd4",
    "dateEnd5",
    "minBefore2",
    "select36"
  ],
  dispositifs4: [
    "dispositifs4",
    "taskDispoId",
    "select35",
    "dateStart4",
    "dateStart5",
    "minBefore3",
    "minBefore4",
    "position3",
    "positionSite",
    "libele3",
    "input20",
    "libele4",
    "input21",
    "generalDescription9",
    "textAreaInput3",
    "dateEnd4",
    "dateEnd5",
    "minBefore2",
    "select36"
  ],
  taskDispoId: ["taskDispoId", "select35"],
  select35: ["select35"],
  dateStart4: ["dateStart4", "dateStart5"],
  dateStart5: ["dateStart5"],
  minBefore3: ["minBefore3", "minBefore4"],
  minBefore4: ["minBefore4"],
  position3: ["position3", "positionSite"],
  positionSite: ["positionSite"],
  libele3: ["libele3", "input20"],
  input20: ["input20"],
  libele4: ["libele4", "input21"],
  input21: ["input21"],
  generalDescription9: ["generalDescription9", "textAreaInput3"],
  textAreaInput3: ["textAreaInput3"],
  dateEnd4: ["dateEnd4", "dateEnd5"],
  dateEnd5: ["dateEnd5"],
  minBefore2: ["minBefore2", "select36"],
  select36: ["select36"],
  endingTaskDispo: ["endingTaskDispo", "select29"],
  select29: ["select29"],
  formEndingTaskDispo: [
    "formEndingTaskDispo",
    "dispositifs5",
    "taskDispoId2",
    "select37",
    "dateStart6",
    "dateStart7",
    "minBefore5",
    "minBefore6",
    "position4",
    "positionSite2",
    "libele5",
    "input22",
    "libele6",
    "input23",
    "generalDescription10",
    "textAreaInput5",
    "dateEnd6",
    "dateEnd7",
    "minBefore7",
    "select38"
  ],
  dispositifs5: [
    "dispositifs5",
    "taskDispoId2",
    "select37",
    "dateStart6",
    "dateStart7",
    "minBefore5",
    "minBefore6",
    "position4",
    "positionSite2",
    "libele5",
    "input22",
    "libele6",
    "input23",
    "generalDescription10",
    "textAreaInput5",
    "dateEnd6",
    "dateEnd7",
    "minBefore7",
    "select38"
  ],
  taskDispoId2: ["taskDispoId2", "select37"],
  select37: ["select37"],
  dateStart6: ["dateStart6", "dateStart7"],
  dateStart7: ["dateStart7"],
  minBefore5: ["minBefore5", "minBefore6"],
  minBefore6: ["minBefore6"],
  position4: ["position4", "positionSite2"],
  positionSite2: ["positionSite2"],
  libele5: ["libele5", "input22"],
  input22: ["input22"],
  libele6: ["libele6", "input23"],
  input23: ["input23"],
  generalDescription10: ["generalDescription10", "textAreaInput5"],
  textAreaInput5: ["textAreaInput5"],
  dateEnd6: ["dateEnd6", "dateEnd7"],
  dateEnd7: ["dateEnd7"],
  minBefore7: ["minBefore7", "select38"],
  select38: ["select38"],
  thematic13: ["thematic13", "select23", "detailsTarif"],
  select23: ["select23"],
  detailsTarif: ["detailsTarif"],
  title11: ["title11", "textInput", "detailsHours"],
  textInput: ["textInput"],
  detailsHours: ["detailsHours"],
  title10: ["title10", "input12"],
  input12: ["input12"],
  title12: ["title12", "input14", "detailsTarif2"],
  input14: ["input14"],
  detailsTarif2: ["detailsTarif2"],
  mainMission: ["mainMission", "select22"],
  select22: ["select22"],
  thematic15: ["thematic15", "select25"],
  select25: ["select25"],
  thematic16: ["thematic16", "select26"],
  select26: ["select26"],
  thematic17: ["thematic17", "select13"],
  select13: ["select13"],
  thematic18: ["thematic18", "select27"],
  select27: ["select27"],
  thematic19: ["thematic19", "select28"],
  select28: ["select28"],
  generalDescription6: ["generalDescription6", "textAreaInput2"],
  textAreaInput2: ["textAreaInput2"],
  upload4: ["upload4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modalUpdateDispo: typeof Modal;
  frame1437254024: "div";
  name7: "div";
  frame1437254025: "div";
  hoursCalculator2: typeof HoursCalculator;
  formUpdateDispositif: typeof FormWrapper;
  event4: typeof FormItemWrapper;
  select12: typeof AntdSelect;
  title8: typeof FormItemWrapper;
  input5: typeof AntdInput;
  title9: typeof FormItemWrapper;
  input11: typeof AntdInput;
  generalDescription5: typeof FormItemWrapper;
  textAreaInput4: typeof TextAreaInput;
  startingTaskDispo: typeof FormItemWrapper;
  select24: typeof AntdSelect;
  formStartingTaskDispo: typeof FormWrapper;
  dispositifs4: "div";
  taskDispoId: typeof FormItemWrapper;
  select35: typeof AntdSelect;
  dateStart4: typeof FormItemWrapper;
  dateStart5: typeof AntdDatePicker;
  minBefore3: typeof FormItemWrapper;
  minBefore4: typeof AntdSelect;
  position3: typeof FormItemWrapper;
  positionSite: typeof AntdSelect;
  libele3: typeof FormItemWrapper;
  input20: typeof AntdInput;
  libele4: typeof FormItemWrapper;
  input21: typeof AntdInput;
  generalDescription9: typeof FormItemWrapper;
  textAreaInput3: typeof TextAreaInput;
  dateEnd4: typeof FormItemWrapper;
  dateEnd5: typeof AntdDatePicker;
  minBefore2: typeof FormItemWrapper;
  select36: typeof AntdSelect;
  endingTaskDispo: typeof FormItemWrapper;
  select29: typeof AntdSelect;
  formEndingTaskDispo: typeof FormWrapper;
  dispositifs5: "div";
  taskDispoId2: typeof FormItemWrapper;
  select37: typeof AntdSelect;
  dateStart6: typeof FormItemWrapper;
  dateStart7: typeof AntdDatePicker;
  minBefore5: typeof FormItemWrapper;
  minBefore6: typeof AntdSelect;
  position4: typeof FormItemWrapper;
  positionSite2: typeof AntdSelect;
  libele5: typeof FormItemWrapper;
  input22: typeof AntdInput;
  libele6: typeof FormItemWrapper;
  input23: typeof AntdInput;
  generalDescription10: typeof FormItemWrapper;
  textAreaInput5: typeof TextAreaInput;
  dateEnd6: typeof FormItemWrapper;
  dateEnd7: typeof AntdDatePicker;
  minBefore7: typeof FormItemWrapper;
  select38: typeof AntdSelect;
  thematic13: typeof FormItemWrapper;
  select23: typeof AntdSelect;
  detailsTarif: "div";
  title11: typeof FormItemWrapper;
  textInput: typeof TextInput;
  detailsHours: "div";
  title10: typeof FormItemWrapper;
  input12: typeof AntdInput;
  title12: typeof FormItemWrapper;
  input14: typeof AntdInput;
  detailsTarif2: "div";
  mainMission: typeof FormItemWrapper;
  select22: typeof AntdSelect;
  thematic15: typeof FormItemWrapper;
  select25: typeof AntdSelect;
  thematic16: typeof FormItemWrapper;
  select26: typeof AntdSelect;
  thematic17: typeof FormItemWrapper;
  select13: typeof AntdSelect;
  thematic18: typeof FormItemWrapper;
  select27: typeof AntdSelect;
  thematic19: typeof FormItemWrapper;
  select28: typeof AntdSelect;
  generalDescription6: typeof FormItemWrapper;
  textAreaInput2: typeof TextAreaInput;
  upload4: typeof UploadWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpdateDispo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUpdateDispo__VariantsArgs;
    args?: PlasmicUpdateDispo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUpdateDispo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUpdateDispo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUpdateDispo__ArgProps,
          internalVariantPropNames: PlasmicUpdateDispo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUpdateDispo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modalUpdateDispo") {
    func.displayName = "PlasmicUpdateDispo";
  } else {
    func.displayName = `PlasmicUpdateDispo.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdateDispo = Object.assign(
  // Top-level PlasmicUpdateDispo renders the root element
  makeNodeComponent("modalUpdateDispo"),
  {
    // Helper components rendering sub-elements
    frame1437254024: makeNodeComponent("frame1437254024"),
    name7: makeNodeComponent("name7"),
    frame1437254025: makeNodeComponent("frame1437254025"),
    hoursCalculator2: makeNodeComponent("hoursCalculator2"),
    formUpdateDispositif: makeNodeComponent("formUpdateDispositif"),
    event4: makeNodeComponent("event4"),
    select12: makeNodeComponent("select12"),
    title8: makeNodeComponent("title8"),
    input5: makeNodeComponent("input5"),
    title9: makeNodeComponent("title9"),
    input11: makeNodeComponent("input11"),
    generalDescription5: makeNodeComponent("generalDescription5"),
    textAreaInput4: makeNodeComponent("textAreaInput4"),
    startingTaskDispo: makeNodeComponent("startingTaskDispo"),
    select24: makeNodeComponent("select24"),
    formStartingTaskDispo: makeNodeComponent("formStartingTaskDispo"),
    dispositifs4: makeNodeComponent("dispositifs4"),
    taskDispoId: makeNodeComponent("taskDispoId"),
    select35: makeNodeComponent("select35"),
    dateStart4: makeNodeComponent("dateStart4"),
    dateStart5: makeNodeComponent("dateStart5"),
    minBefore3: makeNodeComponent("minBefore3"),
    minBefore4: makeNodeComponent("minBefore4"),
    position3: makeNodeComponent("position3"),
    positionSite: makeNodeComponent("positionSite"),
    libele3: makeNodeComponent("libele3"),
    input20: makeNodeComponent("input20"),
    libele4: makeNodeComponent("libele4"),
    input21: makeNodeComponent("input21"),
    generalDescription9: makeNodeComponent("generalDescription9"),
    textAreaInput3: makeNodeComponent("textAreaInput3"),
    dateEnd4: makeNodeComponent("dateEnd4"),
    dateEnd5: makeNodeComponent("dateEnd5"),
    minBefore2: makeNodeComponent("minBefore2"),
    select36: makeNodeComponent("select36"),
    endingTaskDispo: makeNodeComponent("endingTaskDispo"),
    select29: makeNodeComponent("select29"),
    formEndingTaskDispo: makeNodeComponent("formEndingTaskDispo"),
    dispositifs5: makeNodeComponent("dispositifs5"),
    taskDispoId2: makeNodeComponent("taskDispoId2"),
    select37: makeNodeComponent("select37"),
    dateStart6: makeNodeComponent("dateStart6"),
    dateStart7: makeNodeComponent("dateStart7"),
    minBefore5: makeNodeComponent("minBefore5"),
    minBefore6: makeNodeComponent("minBefore6"),
    position4: makeNodeComponent("position4"),
    positionSite2: makeNodeComponent("positionSite2"),
    libele5: makeNodeComponent("libele5"),
    input22: makeNodeComponent("input22"),
    libele6: makeNodeComponent("libele6"),
    input23: makeNodeComponent("input23"),
    generalDescription10: makeNodeComponent("generalDescription10"),
    textAreaInput5: makeNodeComponent("textAreaInput5"),
    dateEnd6: makeNodeComponent("dateEnd6"),
    dateEnd7: makeNodeComponent("dateEnd7"),
    minBefore7: makeNodeComponent("minBefore7"),
    select38: makeNodeComponent("select38"),
    thematic13: makeNodeComponent("thematic13"),
    select23: makeNodeComponent("select23"),
    detailsTarif: makeNodeComponent("detailsTarif"),
    title11: makeNodeComponent("title11"),
    textInput: makeNodeComponent("textInput"),
    detailsHours: makeNodeComponent("detailsHours"),
    title10: makeNodeComponent("title10"),
    input12: makeNodeComponent("input12"),
    title12: makeNodeComponent("title12"),
    input14: makeNodeComponent("input14"),
    detailsTarif2: makeNodeComponent("detailsTarif2"),
    mainMission: makeNodeComponent("mainMission"),
    select22: makeNodeComponent("select22"),
    thematic15: makeNodeComponent("thematic15"),
    select25: makeNodeComponent("select25"),
    thematic16: makeNodeComponent("thematic16"),
    select26: makeNodeComponent("select26"),
    thematic17: makeNodeComponent("thematic17"),
    select13: makeNodeComponent("select13"),
    thematic18: makeNodeComponent("thematic18"),
    select27: makeNodeComponent("select27"),
    thematic19: makeNodeComponent("thematic19"),
    select28: makeNodeComponent("select28"),
    generalDescription6: makeNodeComponent("generalDescription6"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    upload4: makeNodeComponent("upload4"),

    // Metadata about props expected for PlasmicUpdateDispo
    internalVariantProps: PlasmicUpdateDispo__VariantProps,
    internalArgProps: PlasmicUpdateDispo__ArgProps
  }
);

export default PlasmicUpdateDispo;
/* prettier-ignore-end */
