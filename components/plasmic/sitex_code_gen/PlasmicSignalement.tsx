/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: yJ0lhUA57Q_F

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicSignalement.module.css"; // plasmic-import: yJ0lhUA57Q_F/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicSignalement__VariantMembers = {};
export type PlasmicSignalement__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignalement__VariantsArgs;
export const PlasmicSignalement__VariantProps = new Array<VariantPropType>();

export type PlasmicSignalement__ArgsType = {};
type ArgPropType = keyof PlasmicSignalement__ArgsType;
export const PlasmicSignalement__ArgProps = new Array<ArgPropType>();

export type PlasmicSignalement__OverridesType = {
  root?: Flex__<"div">;
  formCreate?: Flex__<typeof FormWrapper>;
  event?: Flex__<typeof FormItemWrapper>;
  select2?: Flex__<typeof AntdSelect>;
  title?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  status?: Flex__<typeof FormItemWrapper>;
  select?: Flex__<typeof AntdSelect>;
  dateStart?: Flex__<typeof FormItemWrapper>;
  timePicker2?: Flex__<typeof AntdDatePicker>;
  impactPrio?: Flex__<typeof FormItemWrapper>;
  select4?: Flex__<typeof AntdSelect>;
  generalDescription?: Flex__<typeof FormItemWrapper>;
  textArea?: Flex__<typeof AntdTextArea>;
  precisions?: Flex__<typeof FormItemWrapper>;
  select5?: Flex__<typeof AntdSelect>;
  thematic?: Flex__<typeof FormItemWrapper>;
  select6?: Flex__<typeof AntdSelect>;
  freeBox?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
};

export interface DefaultSignalementProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignalement__RenderFunc(props: {
  variants: PlasmicSignalement__VariantsArgs;
  args: PlasmicSignalement__ArgsType;
  overrides: PlasmicSignalement__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "formCreate.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formCreate",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formCreate.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formCreate",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "refresh",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    sglPositions: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "0ec8b7f9-d429-4c1a-bcd2-b2a331a895ab",
        userArgs: {},
        cacheKey: `plasmic.$.0ec8b7f9-d429-4c1a-bcd2-b2a331a895ab.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    sglOperations: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "9624da84-1d2c-4c53-b290-a5944bd5dfad",
        userArgs: {},
        cacheKey: `plasmic.$.9624da84-1d2c-4c53-b290-a5944bd5dfad.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSignalement.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSignalement.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSignalement.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        {(() => {
          try {
            return $state.refresh;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__raVkZ
            )}
          >
            {"Signalement cr\u00e9\u00e9\nMerci de rafraichir"}
          </div>
        ) : null}
        {(() => {
          try {
            return !$state.refresh;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.formCreate),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["formCreate", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};

                  $steps["supabaseUploadFile"] =
                    $state.upload.files.length > 0
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "m24ybmDtQiMCnPaXvSSHEf",
                              opId: "21b08d1a-e6b8-46c4-ae86-7a9ab821cd88",
                              userArgs: {
                                path: [$state.upload.files[0].name],
                                content: [$state.upload.files[0].contents],
                                contentType: [$state.upload.files[0].type]
                              },
                              cacheKey: null,
                              invalidatedKeys: [],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["supabaseUploadFile"] != null &&
                    typeof $steps["supabaseUploadFile"] === "object" &&
                    typeof $steps["supabaseUploadFile"].then === "function"
                  ) {
                    $steps["supabaseUploadFile"] = await $steps[
                      "supabaseUploadFile"
                    ];
                  }

                  $steps["createFile"] =
                    $state.upload.files.length > 0
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "v6umJuHyep6kPNyCAJjouT",
                              opId: "1a657023-0ec7-4ca4-ae10-d6040074a8ff",
                              userArgs: {
                                variables: [
                                  $steps.supabaseUploadFile?.path,
                                  $state.formCreate.value.associated_operation
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: [],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["createFile"] != null &&
                    typeof $steps["createFile"] === "object" &&
                    typeof $steps["createFile"].then === "function"
                  ) {
                    $steps["createFile"] = await $steps["createFile"];
                  }

                  $steps["createSignalement"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "72bc8b19-f142-476d-8972-a5021f051cfb",
                            userArgs: {
                              variables: [
                                $state.formCreate.value.associated_operation ||
                                  null,
                                $state.upload.files.length > 0
                                  ? $steps.createFile.data[0].id
                                  : null,
                                new Date().toISOString(),
                                $state.formCreate.value.date_start,
                                $state.formCreate.value.general_description,
                                $state.formCreate.value.precisions,
                                $state.formCreate.value.thematic,
                                $state.formCreate.value.title,
                                $state.formCreate.value.status,
                                $state.formCreate.value.priority
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["createSignalement"] != null &&
                    typeof $steps["createSignalement"] === "object" &&
                    typeof $steps["createSignalement"].then === "function"
                  ) {
                    $steps["createSignalement"] = await $steps[
                      "createSignalement"
                    ];
                  }

                  $steps["notif"] = true
                    ? (() => {
                        const actionArgs = {
                          args: ["success", "Signalement cr\u00e9\u00e9"]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["notif"] != null &&
                    typeof $steps["notif"] === "object" &&
                    typeof $steps["notif"].then === "function"
                  ) {
                    $steps["notif"] = await $steps["notif"];
                  }

                  $steps["updateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["refresh"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariable"] != null &&
                    typeof $steps["updateVariable"] === "object" &&
                    typeof $steps["updateVariable"].then === "function"
                  ) {
                    $steps["updateVariable"] = await $steps["updateVariable"];
                  }
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["formCreate", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["formCreate"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "formCreate.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "formCreate.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"formCreate"}
                  data-plasmic-override={overrides.formCreate}
                  {...child$Props}
                >
                  <FormItemWrapper
                    data-plasmic-name={"event"}
                    data-plasmic-override={overrides.event}
                    className={classNames("__wab_instance", sty.event)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bdszJ
                        )}
                      >
                        {"\u00c9v\u00e8nement associ\u00e9"}
                      </div>
                    }
                    name={"associated_operation"}
                    rules={[{ ruleType: "required", message: "Requis" }]}
                  >
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $queries.sglOperations.data.map(item => ({
                            value: item.id,
                            label: item.title
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nMozF
                          )}
                        >
                          {"S\u00e9lectionner"}
                        </div>
                      }
                      popupScopeClassName={sty["select2__popup"]}
                      size={"middle"}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames("__wab_instance", sty.title)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7IYs6
                        )}
                      >
                        {"Titre"}
                      </div>
                    }
                    name={"title"}
                    rules={[{ ruleType: "required", message: "Requis" }]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: "Titre",
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"status"}
                    data-plasmic-override={overrides.status}
                    className={classNames("__wab_instance", sty.status)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qtIe0
                        )}
                      >
                        {"Statut"}
                      </div>
                    }
                    name={"status"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      bordered={true}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return ["EN COURS", "CLASSÉE", "NON FAIT"].map(
                            (text, index) => ({
                              value: text,
                              label: text
                            })
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sbR9T
                          )}
                        >
                          {"S\u00e9lectionner"}
                        </div>
                      }
                      popupScopeClassName={sty["select__popup"]}
                      size={"middle"}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"dateStart"}
                    data-plasmic-override={overrides.dateStart}
                    className={classNames("__wab_instance", sty.dateStart)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wIxEz
                        )}
                      >
                        {"Date et heure de d\u00e9but"}
                      </div>
                    }
                    name={"date_start"}
                  >
                    {(() => {
                      const child$Props = {
                        allowClear: true,
                        className: classNames(
                          "__wab_instance",
                          sty.timePicker2
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["timePicker2", "value"],
                            AntdDatePicker_Helpers
                          ).apply(null, eventArgs);
                        },
                        popupScopeClassName:
                          sty["timePicker2__datePickerPopup"],
                        showNow: false,
                        showTime: true,
                        value: generateStateValueProp($state, [
                          "timePicker2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "timePicker2.value"
                          }
                        ],
                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdDatePicker
                          data-plasmic-name={"timePicker2"}
                          data-plasmic-override={overrides.timePicker2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"impactPrio"}
                    data-plasmic-override={overrides.impactPrio}
                    className={classNames("__wab_instance", sty.impactPrio)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eYe5X
                        )}
                      >
                        {"Impact/Priorit\u00e9"}
                      </div>
                    }
                    name={"priority"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select4"}
                      data-plasmic-override={overrides.select4}
                      bordered={true}
                      className={classNames("__wab_instance", sty.select4)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select4",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return [
                            "5: Crise",
                            "4: Fort",
                            "3: Moyen",
                            "2: Faible",
                            "1: Nul",
                            "SUIVI"
                          ].map((text, index) => ({
                            value: text,
                            label: text
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eSr
                          )}
                        >
                          {"S\u00e9lectionner"}
                        </div>
                      }
                      popupScopeClassName={sty["select4__popup"]}
                      size={"middle"}
                      value={generateStateValueProp($state, [
                        "select4",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"generalDescription"}
                    data-plasmic-override={overrides.generalDescription}
                    className={classNames(
                      "__wab_instance",
                      sty.generalDescription
                    )}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1LiSl
                        )}
                      >
                        {"Description"}
                      </div>
                    }
                    name={"general_description"}
                  >
                    {(() => {
                      const child$Props = {
                        autoSize: true,
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return "Si une situation est en cours d\u2019évolution:\n Heure: commentaire : \n Heure: commentaire";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Si une situation est en cours d\u2019\u00e9volution:Heure: commentaireHeure: commentaire";
                            }
                            throw e;
                          }
                        })(),
                        value: generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"precisions"}
                    data-plasmic-override={overrides.precisions}
                    className={classNames("__wab_instance", sty.precisions)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hbGmv
                        )}
                      >
                        {"Pr\u00e9cisions (Type)"}
                      </div>
                    }
                    name={"precisions"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select5"}
                      data-plasmic-override={overrides.select5}
                      bordered={true}
                      className={classNames("__wab_instance", sty.select5)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select5",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return [
                            {
                              value: "Suivi dispositif (runsheet) [DI]",
                              label: "Suivi dispositif (runsheet) [DI]"
                            },
                            {
                              value: "CODE 51 - Etat supposée d'ivresse [SU]",
                              label: "CODE 51 - Etat supposée d'ivresse [SU]"
                            },
                            {
                              value:
                                "CODE 49 - Altercation - Rixe - Violences [SU]",
                              label:
                                "CODE 49 - Altercation - Rixe - Violences [SU]"
                            },
                            {
                              value: "CODE NRRI - Règlement intérieur [SU]",
                              label: "CODE NRRI - Règlement intérieur [SU]"
                            },
                            {
                              value: "CODE CAPITOLE - Intrusion [SU]",
                              label: "CODE CAPITOLE - Intrusion [SU]"
                            },
                            {
                              value: "CODE OS : réception VIP [SU]",
                              label: "CODE OS : réception VIP [SU]"
                            },
                            {
                              value: "Véhicule interdit et stationnement [SU]",
                              label: "Véhicule interdit et stationnement [SU]"
                            },
                            {
                              value: "Vol [SU]",
                              label: "Vol [SU]"
                            },
                            {
                              value: "Colis suspect [SU]",
                              label: "Colis suspect [SU]"
                            },
                            {
                              value: "Comportement suspect [SU]",
                              label: "Comportement suspect [SU]"
                            },
                            {
                              value: "Dégradation [SU]",
                              label: "Dégradation [SU]"
                            },
                            {
                              value: "Objets interdits [SU]",
                              label: "Objets interdits [SU]"
                            },
                            {
                              value: "VHSS, injures raciales [SU]",
                              label: "VHSS, injures raciales [SU]"
                            },
                            {
                              value: "Vente illégale [SU]",
                              label: "Vente illégale [SU]"
                            },
                            {
                              value:
                                "Accréditations, listings, accès travail [SU]",
                              label:
                                "Accréditations, listings, accès travail [SU]"
                            },
                            {
                              value: "Execution difficile et écarts [DI]",
                              label: "Execution difficile et écarts [DI]"
                            },
                            {
                              value: "CODE Papa Alpha [DI]",
                              label: "CODE Papa Alpha [DI]"
                            },
                            {
                              value:
                                "Modification dispositif et prolongements [DI]",
                              label:
                                "Modification dispositif et prolongements [DI]"
                            },
                            {
                              value: "CODE 112 Malaise/blessure UR [S]",
                              label: "CODE 112 Malaise/blessure UR [S]"
                            },
                            {
                              value: "CODE 15 Malaise/blessure UA [S]",
                              label: "CODE 15 Malaise/blessure UA [S]"
                            },
                            {
                              value: "BI Litiges",
                              label: "BI Litiges"
                            },
                            {
                              value: "Hermeticité et périmètre [MA]",
                              label: "Hermeticité et périmètre [MA]"
                            },
                            {
                              value: "Personne perdue [MA]",
                              label: "Personne perdue [MA]"
                            }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g0B
                          )}
                        >
                          {"S\u00e9lectionner"}
                        </div>
                      }
                      popupScopeClassName={sty["select5__popup"]}
                      size={"middle"}
                      value={generateStateValueProp($state, [
                        "select5",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"thematic"}
                    data-plasmic-override={overrides.thematic}
                    className={classNames("__wab_instance", sty.thematic)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x3Hsw
                        )}
                      >
                        {"Dominante (Th\u00e9matique)"}
                      </div>
                    }
                    name={"thematic"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select6"}
                      data-plasmic-override={overrides.select6}
                      bordered={true}
                      className={classNames("__wab_instance", sty.select6)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select6",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return [
                            {
                              value: "MANIFESTATION [MA]",
                              label: "MANIFESTATION [MA]"
                            },
                            {
                              value: "DISPOSITIF [DI]",
                              label: "DISPOSITIF [DI]"
                            },
                            {
                              value: "SURETE [SU]",
                              label: "SURETE [SU]"
                            },
                            {
                              value: "MULTI TECHNIQUE [MT]",
                              label: "MULTI TECHNIQUE [MT]"
                            },
                            {
                              value: "SANTE-SECOURS [S]",
                              label: "SANTE-SECOURS [S]"
                            },
                            {
                              value: "BILLETTERIE LITIGES [BI]",
                              label: "BILLETTERIE LITIGES [BI]"
                            },
                            {
                              value: "IMAGE REPUTATION RELATIONS [IMR]",
                              label: "IMAGE REPUTATION RELATIONS [IMR]"
                            },
                            {
                              value: "SECURITE [SE]",
                              label: "SECURITE [SE]"
                            },
                            {
                              value: "SUIVI",
                              label: "SUIVI"
                            },
                            {
                              value: "MODELE",
                              label: "MODELE"
                            },
                            {
                              value: "SYNTHESE [NE]",
                              label: "SYNTHESE [NE]"
                            },
                            {
                              value: "SANS SUITE/ INCLASSABLE [SSI]",
                              label: "SANS SUITE/ INCLASSABLE [SSI]"
                            }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kv0Oo
                          )}
                        >
                          {"S\u00e9lectionner"}
                        </div>
                      }
                      popupScopeClassName={sty["select6__popup"]}
                      size={"middle"}
                      value={generateStateValueProp($state, [
                        "select6",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nBcDd
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Fichier attach\u00e9"}
                        </span>
                      </React.Fragment>
                    </div>
                    <UploadWrapper
                      data-plasmic-name={"upload"}
                      data-plasmic-override={overrides.upload}
                      accept={""}
                      className={classNames("__wab_instance", sty.upload)}
                      dragAndDropFiles={true}
                      files={generateStateValueProp($state, [
                        "upload",
                        "files"
                      ])}
                      maxCount={1}
                      onFilesChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "upload",
                          "files"
                        ]).apply(null, eventArgs);
                      }}
                      showUploadList={true}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__dNcC6
                        )}
                        size={"large"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5NEtf
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Importer ou d\u00e9poser un fichier"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ko74P
                          )}
                        >
                          {"Importer ou d\u00e9poser un fichier"}
                        </div>
                      </AntdButton>
                    </UploadWrapper>
                  </Stack__>
                  <Button
                    className={classNames("__wab_instance", sty.button___7YjOh)}
                    label={"Cr\u00e9er"}
                    submitsForm={true}
                  />
                </FormWrapper>
              );
            })()
          : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "formCreate",
    "event",
    "select2",
    "title",
    "input",
    "status",
    "select",
    "dateStart",
    "timePicker2",
    "impactPrio",
    "select4",
    "generalDescription",
    "textArea",
    "precisions",
    "select5",
    "thematic",
    "select6",
    "freeBox",
    "upload"
  ],
  formCreate: [
    "formCreate",
    "event",
    "select2",
    "title",
    "input",
    "status",
    "select",
    "dateStart",
    "timePicker2",
    "impactPrio",
    "select4",
    "generalDescription",
    "textArea",
    "precisions",
    "select5",
    "thematic",
    "select6",
    "freeBox",
    "upload"
  ],
  event: ["event", "select2"],
  select2: ["select2"],
  title: ["title", "input"],
  input: ["input"],
  status: ["status", "select"],
  select: ["select"],
  dateStart: ["dateStart", "timePicker2"],
  timePicker2: ["timePicker2"],
  impactPrio: ["impactPrio", "select4"],
  select4: ["select4"],
  generalDescription: ["generalDescription", "textArea"],
  textArea: ["textArea"],
  precisions: ["precisions", "select5"],
  select5: ["select5"],
  thematic: ["thematic", "select6"],
  select6: ["select6"],
  freeBox: ["freeBox", "upload"],
  upload: ["upload"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  formCreate: typeof FormWrapper;
  event: typeof FormItemWrapper;
  select2: typeof AntdSelect;
  title: typeof FormItemWrapper;
  input: typeof AntdInput;
  status: typeof FormItemWrapper;
  select: typeof AntdSelect;
  dateStart: typeof FormItemWrapper;
  timePicker2: typeof AntdDatePicker;
  impactPrio: typeof FormItemWrapper;
  select4: typeof AntdSelect;
  generalDescription: typeof FormItemWrapper;
  textArea: typeof AntdTextArea;
  precisions: typeof FormItemWrapper;
  select5: typeof AntdSelect;
  thematic: typeof FormItemWrapper;
  select6: typeof AntdSelect;
  freeBox: "div";
  upload: typeof UploadWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignalement__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignalement__VariantsArgs;
    args?: PlasmicSignalement__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignalement__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignalement__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignalement__ArgProps,
          internalVariantPropNames: PlasmicSignalement__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignalement__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignalement";
  } else {
    func.displayName = `PlasmicSignalement.${nodeName}`;
  }
  return func;
}

export const PlasmicSignalement = Object.assign(
  // Top-level PlasmicSignalement renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    formCreate: makeNodeComponent("formCreate"),
    event: makeNodeComponent("event"),
    select2: makeNodeComponent("select2"),
    title: makeNodeComponent("title"),
    input: makeNodeComponent("input"),
    status: makeNodeComponent("status"),
    select: makeNodeComponent("select"),
    dateStart: makeNodeComponent("dateStart"),
    timePicker2: makeNodeComponent("timePicker2"),
    impactPrio: makeNodeComponent("impactPrio"),
    select4: makeNodeComponent("select4"),
    generalDescription: makeNodeComponent("generalDescription"),
    textArea: makeNodeComponent("textArea"),
    precisions: makeNodeComponent("precisions"),
    select5: makeNodeComponent("select5"),
    thematic: makeNodeComponent("thematic"),
    select6: makeNodeComponent("select6"),
    freeBox: makeNodeComponent("freeBox"),
    upload: makeNodeComponent("upload"),

    // Metadata about props expected for PlasmicSignalement
    internalVariantProps: PlasmicSignalement__VariantProps,
    internalArgProps: PlasmicSignalement__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Signalement | Sitex",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignalement;
/* prettier-ignore-end */
