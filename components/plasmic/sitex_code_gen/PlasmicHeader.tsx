/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: 2eAt6bzh0iAt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import TextInput from "../../TextInput"; // plasmic-import: lm9M4C5ynpU1/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 2eAt6bzh0iAt/css

import PhBellFillIcon from "./icons/PlasmicIcon__PhBellFill"; // plasmic-import: bb9KpXgYTNxa/icon
import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: mPYk0ZEUw6Wc/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  operationId?: number;
  onOperationIdChange2?: (val: string) => void;
  runsheet?: string;
  onRunsheetChange?: (val: string) => void;
  onMoisChange?: (val: string) => void;
  onUserClientIdChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "operationId",
  "onOperationIdChange2",
  "runsheet",
  "onRunsheetChange",
  "onMoisChange",
  "onUserClientIdChange"
);

export type PlasmicHeader__OverridesType = {
  header?: Flex__<"div">;
  logo?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  breadcrumbLvl1?: Flex__<"div">;
  timePicker?: Flex__<typeof AntdDatePicker>;
  select2?: Flex__<typeof AntdSelect>;
  expandTab?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderProps {
  operationId?: number;
  onOperationIdChange2?: (val: string) => void;
  runsheet?: string;
  onRunsheetChange?: (val: string) => void;
  onMoisChange?: (val: string) => void;
  onUserClientIdChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "operationId",
        type: "writable",
        variableType: "number",

        valueProp: "operationId",
        onChangeProp: "onOperationIdChange2"
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "runsheet",
        type: "writable",
        variableType: "text",

        valueProp: "runsheet",
        onChangeProp: "onRunsheetChange"
      },
      {
        path: "mois",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",

        onChangeProp: "onMoisChange"
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "userClientId",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getUserClientId.data[0].client_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })(),

        onChangeProp: "onUserClientIdChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    operations: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "00a62fef-8abc-499f-a876-9b64261642c3",
        userArgs: {
          filters: [$state.userClientId]
        },
        cacheKey: `plasmic.$.00a62fef-8abc-499f-a876-9b64261642c3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUserClientId: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "908410ba-d4d2-466f-bf40-683059a494c1",
        userArgs: {
          query: [$ctx.SupabaseUser.user ? $ctx.SupabaseUser.user.id : 0]
        },
        cacheKey: `plasmic.$.908410ba-d4d2-466f-bf40-683059a494c1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.header
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          hasGap={true}
          className={classNames(projectcss.all, sty.logo)}
          onClick={async event => {
            const $steps = {};

            $steps["goToMainCourante"] = true
              ? (() => {
                  const actionArgs = { destination: `/main_courante` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToMainCourante"] != null &&
              typeof $steps["goToMainCourante"] === "object" &&
              typeof $steps["goToMainCourante"].then === "function"
            ) {
              $steps["goToMainCourante"] = await $steps["goToMainCourante"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zetUw
            )}
          >
            {"Sitex"}
          </div>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"33px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"14px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/sitex_code_gen/images/pictoSvg.svg",
              fullWidth: 19,
              fullHeight: 35,
              aspectRatio: 0.542857
            }}
          />
        </Stack__>
      ) : null}
      <Stack__
        as={"div"}
        data-plasmic-name={"breadcrumbLvl1"}
        data-plasmic-override={overrides.breadcrumbLvl1}
        hasGap={true}
        className={classNames(projectcss.all, sty.breadcrumbLvl1)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___90M6E
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $ctx.pagePath.includes("runsheet")
                  ? "Operation"
                  : $ctx.pagePath
                      .replace(/^\//, "")
                      .replace(/\b\w/g, char => char.toUpperCase())
                      .replace(/_/g, " ")
                      .split("/")[0]
                      .toUpperCase();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Dashboard";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? true
            : (() => {
                try {
                  return (
                    $ctx.pagePath.includes("runsheet") &&
                    $state.operationId != null
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jOkni
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "> " +
                    $queries.operations.data.find(
                      x => x.id == $state.operationId
                    ).title
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Dashboard";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? true
            : (() => {
                try {
                  return $ctx.pagePath === "/bilan_retex_general";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h9UYi
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return "> Général > ";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Dashboard";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        {(() => {
          try {
            return $ctx.pagePath === "/bilan_retex_general";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.timePicker),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["timePicker", "value"],
                    AntdDatePicker_Helpers
                  ).apply(null, eventArgs);

                  (async value => {
                    const $steps = {};

                    $steps["updateMois"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["mois"]
                            },
                            operation: 0,
                            value: new Date(value).toISOString().slice(0, 7)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMois"] != null &&
                      typeof $steps["updateMois"] === "object" &&
                      typeof $steps["updateMois"].then === "function"
                    ) {
                      $steps["updateMois"] = await $steps["updateMois"];
                    }
                  }).apply(null, eventArgs);
                },
                picker: "month",
                popupScopeClassName: sty["timePicker__datePickerPopup"],
                value: generateStateValueProp($state, ["timePicker", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "timePicker.value"
                  }
                ],
                [],
                AntdDatePicker_Helpers ?? {},
                child$Props
              );

              return (
                <AntdDatePicker
                  data-plasmic-name={"timePicker"}
                  data-plasmic-override={overrides.timePicker}
                  {...child$Props}
                />
              );
            })()
          : null}
        {(() => {
          try {
            return (
              $ctx.pagePath.includes("main_courante") ||
              $ctx.pagePath.includes("/bilan_retex_operations") ||
              $ctx.pagePath.includes("/bilan_retex_analytics") ||
              $ctx.pagePath.includes("bilan_retex_synthese")
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <AntdSelect
            data-plasmic-name={"select2"}
            data-plasmic-override={overrides.select2}
            allowClear={true}
            bordered={false}
            className={classNames("__wab_instance", sty.select2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens
            )}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["select2", "value"]).apply(
                null,
                eventArgs
              );

              (async (value, option) => {
                const $steps = {};

                $steps["updateOperationId"] =
                  value != null
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["operationId"]
                          },
                          operation: 0,
                          value: value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateOperationId"] != null &&
                  typeof $steps["updateOperationId"] === "object" &&
                  typeof $steps["updateOperationId"].then === "function"
                ) {
                  $steps["updateOperationId"] = await $steps[
                    "updateOperationId"
                  ];
                }

                $steps["updateOperationId2"] =
                  value == null
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["operationId"]
                          },
                          operation: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, undefined);
                          return undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateOperationId2"] != null &&
                  typeof $steps["updateOperationId2"] === "object" &&
                  typeof $steps["updateOperationId2"].then === "function"
                ) {
                  $steps["updateOperationId2"] = await $steps[
                    "updateOperationId2"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            options={(() => {
              try {
                return $queries.operations.data.map(op => ({
                  value: op.id,
                  label: op.title
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    { value: "option1", label: "Option 1", type: "option" },
                    { value: "option2", label: "Option 2", type: "option" }
                  ];
                }
                throw e;
              }
            })()}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pjmmA
                )}
              >
                {"Tous"}
              </div>
            }
            placeholderClassName={classNames({
              [sty["pcls_5MDOrO5_fWcG"]]: true
            })}
            popupScopeClassName={sty["select2__popup"]}
            showSearch={true}
            value={generateStateValueProp($state, ["select2", "value"])}
          />
        ) : null}
      </Stack__>
      {(
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : (() => {
              try {
                return !$ctx.pagePath === "/parametres";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"expandTab"}
          data-plasmic-override={overrides.expandTab}
          hasGap={true}
          className={classNames(projectcss.all, sty.expandTab)}
        >
          <PhBellFillIcon
            className={classNames(projectcss.all, sty.svg___1PTb7)}
            role={"img"}
          />

          <div className={classNames(projectcss.all, sty.freeBox___8Ehpm)}>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              inputMode={"search"}
              inputType={"search"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["textInput", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"Rechercher"}
            />

            {(() => {
              try {
                return $state.textInput.value.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.operations.data.filter(item =>
                        item.title
                          .toLowerCase()
                          .includes($state.textInput.value)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___49JWy
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jgTvO
                        )}
                      >
                        <PlasmicLink__
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link
                          )}
                          component={Link}
                          href={`/runsheet/${(() => {
                            try {
                              return currentItem.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`}
                          platform={"nextjs"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Some link text";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </PlasmicLink__>
                      </div>
                    </div>
                  );
                })
              : null}
          </div>
        </Stack__>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div className={classNames(projectcss.all, sty.freeBox__dZzH6)}>
          <PhGearFillIcon
            className={classNames(projectcss.all, sty.svg__lKun)}
            onClick={async event => {
              const $steps = {};

              $steps["goToParametres"] = true
                ? (() => {
                    const actionArgs = { destination: `/parametres` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToParametres"] != null &&
                typeof $steps["goToParametres"] === "object" &&
                typeof $steps["goToParametres"].then === "function"
              ) {
                $steps["goToParametres"] = await $steps["goToParametres"];
              }
            }}
            role={"img"}
          />
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "logo",
    "img",
    "breadcrumbLvl1",
    "timePicker",
    "select2",
    "expandTab",
    "textInput",
    "link"
  ],
  logo: ["logo", "img"],
  img: ["img"],
  breadcrumbLvl1: ["breadcrumbLvl1", "timePicker", "select2"],
  timePicker: ["timePicker"],
  select2: ["select2"],
  expandTab: ["expandTab", "textInput", "link"],
  textInput: ["textInput"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  logo: "div";
  img: typeof PlasmicImg__;
  breadcrumbLvl1: "div";
  timePicker: typeof AntdDatePicker;
  select2: typeof AntdSelect;
  expandTab: "div";
  textInput: typeof TextInput;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    breadcrumbLvl1: makeNodeComponent("breadcrumbLvl1"),
    timePicker: makeNodeComponent("timePicker"),
    select2: makeNodeComponent("select2"),
    expandTab: makeNodeComponent("expandTab"),
    textInput: makeNodeComponent("textInput"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
