/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: fWjlLt6IwrU8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonLeftMenu from "../../ButtonLeftMenu"; // plasmic-import: ksk0caXhHiA4/component

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicLeftMenu2.module.css"; // plasmic-import: fWjlLt6IwrU8/css

import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: mPYk0ZEUw6Wc/icon
import PlayCircleIcon from "./icons/PlasmicIcon__PlayCircle"; // plasmic-import: 3xbs9uQMOSa-/icon
import PhCalendarCheckFillIcon from "./icons/PlasmicIcon__PhCalendarCheckFill"; // plasmic-import: NYzYvDEBOieQ/icon
import PhChartDonutFillIcon from "./icons/PlasmicIcon__PhChartDonutFill"; // plasmic-import: CxVtPFpWDYul/icon
import MapPinIcon from "./icons/PlasmicIcon__MapPin"; // plasmic-import: PK3EVUNkQ_At/icon
import AddressBookIcon from "./icons/PlasmicIcon__AddressBook"; // plasmic-import: Ckm62y44qvwo/icon
import PhSignOutBoldIcon from "./icons/PlasmicIcon__PhSignOutBold"; // plasmic-import: qz78GVJjinVL/icon
import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: vxoLwbtBRoIB/icon

createPlasmicElementProxy;

export type PlasmicLeftMenu2__VariantMembers = {};
export type PlasmicLeftMenu2__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeftMenu2__VariantsArgs;
export const PlasmicLeftMenu2__VariantProps = new Array<VariantPropType>();

export type PlasmicLeftMenu2__ArgsType = { currentPage?: string };
type ArgPropType = keyof PlasmicLeftMenu2__ArgsType;
export const PlasmicLeftMenu2__ArgProps = new Array<ArgPropType>("currentPage");

export type PlasmicLeftMenu2__OverridesType = {
  root?: Flex__<"div">;
  sidebarMenu?: Flex__<"div">;
  logo?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  menu?: Flex__<"div">;
  buttonMainCourante?: Flex__<typeof ButtonLeftMenu>;
  buttonOperations?: Flex__<typeof ButtonLeftMenu>;
  buttonBilan?: Flex__<typeof ButtonLeftMenu>;
  deconnection?: Flex__<"div">;
  urgenceWrapper?: Flex__<"div">;
  statusBadge?: Flex__<"div">;
  statusBadge2?: Flex__<"div">;
};

export interface DefaultLeftMenu2Props {
  currentPage?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeftMenu2__RenderFunc(props: {
  variants: PlasmicLeftMenu2__VariantsArgs;
  args: PlasmicLeftMenu2__ArgsType;
  overrides: PlasmicLeftMenu2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"sidebarMenu"}
        data-plasmic-override={overrides.sidebarMenu}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebarMenu)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          hasGap={true}
          className={classNames(projectcss.all, sty.logo)}
          onClick={async event => {
            const $steps = {};

            $steps["goToMainCourante"] = true
              ? (() => {
                  const actionArgs = { destination: `/main_courante` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToMainCourante"] != null &&
              typeof $steps["goToMainCourante"] === "object" &&
              typeof $steps["goToMainCourante"].then === "function"
            ) {
              $steps["goToMainCourante"] = await $steps["goToMainCourante"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fNrj
            )}
          >
            {"Sitex"}
          </div>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"33px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"14px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/sitex_code_gen/images/pictoSvg.svg",
              fullWidth: 19,
              fullHeight: 35,
              aspectRatio: 0.542857
            }}
          />
        </Stack__>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <PhGearFillIcon
            className={classNames(projectcss.all, sty.svg__azn23)}
            onClick={async event => {
              const $steps = {};

              $steps["goToParametres"] = true
                ? (() => {
                    const actionArgs = { destination: `/parametres` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToParametres"] != null &&
                typeof $steps["goToParametres"] === "object" &&
                typeof $steps["goToParametres"].then === "function"
              ) {
                $steps["goToParametres"] = await $steps["goToParametres"];
              }
            }}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"menu"}
          data-plasmic-override={overrides.menu}
          hasGap={true}
          className={classNames(projectcss.all, sty.menu)}
        >
          <ButtonLeftMenu
            data-plasmic-name={"buttonMainCourante"}
            data-plasmic-override={overrides.buttonMainCourante}
            className={classNames("__wab_instance", sty.buttonMainCourante)}
            content={"main courante"}
            isActive={(() => {
              try {
                return $props.currentPage === "/main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={(() => {
              try {
                return "/main_courante";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <PlayCircleIcon
              className={classNames(projectcss.all, sty.svg__usT20)}
              role={"img"}
            />
          </ButtonLeftMenu>
          <ButtonLeftMenu
            data-plasmic-name={"buttonOperations"}
            data-plasmic-override={overrides.buttonOperations}
            className={classNames("__wab_instance", sty.buttonOperations)}
            content={"op\u00e9rations"}
            isActive={(() => {
              try {
                return $props.currentPage === "/operations";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={(() => {
              try {
                return "/operations";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <PhCalendarCheckFillIcon
              className={classNames(projectcss.all, sty.svg__aqk)}
              role={"img"}
            />
          </ButtonLeftMenu>
          <ButtonLeftMenu
            data-plasmic-name={"buttonBilan"}
            data-plasmic-override={overrides.buttonBilan}
            className={classNames("__wab_instance", sty.buttonBilan)}
            content={"bilan/retex"}
            isActive={(() => {
              try {
                return $props.currentPage === "/bilan";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={(() => {
              try {
                return "/bilan";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <PhChartDonutFillIcon
              className={classNames(projectcss.all, sty.svg__nWDs)}
              role={"img"}
            />
          </ButtonLeftMenu>
          <ButtonLeftMenu
            className={classNames("__wab_instance", sty.buttonLeftMenu___9R3Nq)}
            content={"positions site"}
            isActive={(() => {
              try {
                return $props.currentPage === "/positions";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={(() => {
              try {
                return "/positions";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <MapPinIcon
              className={classNames(projectcss.all, sty.svg___4D4Xo)}
              role={"img"}
            />
          </ButtonLeftMenu>
          <ButtonLeftMenu
            className={classNames("__wab_instance", sty.buttonLeftMenu__qhiEw)}
            content={"annuaire"}
            isActive={(() => {
              try {
                return $props.currentPage === "/annuaire";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={(() => {
              try {
                return "/annuaire";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <AddressBookIcon
              className={classNames(projectcss.all, sty.svg__yy5Po)}
              role={"img"}
            />
          </ButtonLeftMenu>
          <ButtonLeftMenu
            className={classNames("__wab_instance", sty.buttonLeftMenu__aPjN)}
            content={"param\u00e8tres"}
            isActive={(() => {
              try {
                return $props.currentPage === "/parametres";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={(() => {
              try {
                return "/parametres";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <PhGearFillIcon
              className={classNames(projectcss.all, sty.svg__kzdX)}
              role={"img"}
            />
          </ButtonLeftMenu>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"deconnection"}
          data-plasmic-override={overrides.deconnection}
          hasGap={true}
          className={classNames(projectcss.all, sty.deconnection)}
        >
          <ButtonLeftMenu
            className={classNames("__wab_instance", sty.buttonLeftMenu__fZwZz)}
            content={"d\u00e9connexion"}
          >
            <PhSignOutBoldIcon
              className={classNames(projectcss.all, sty.svg__fweL)}
              role={"img"}
            />
          </ButtonLeftMenu>
        </Stack__>
        {false ? (
          <div
            data-plasmic-name={"urgenceWrapper"}
            data-plasmic-override={overrides.urgenceWrapper}
            className={classNames(projectcss.all, sty.urgenceWrapper)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge"}
              data-plasmic-override={overrides.statusBadge}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg___7O0Qr)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kAe5B
                )}
              >
                {"0"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"statusBadge2"}
              data-plasmic-override={overrides.statusBadge2}
              hasGap={true}
              className={classNames(projectcss.all, sty.statusBadge2)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__pw5VS)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mt1Q
                )}
              >
                {"0"}
              </div>
            </Stack__>
          </div>
        ) : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebarMenu",
    "logo",
    "img",
    "freeBox",
    "menu",
    "buttonMainCourante",
    "buttonOperations",
    "buttonBilan",
    "deconnection",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  sidebarMenu: [
    "sidebarMenu",
    "logo",
    "img",
    "freeBox",
    "menu",
    "buttonMainCourante",
    "buttonOperations",
    "buttonBilan",
    "deconnection",
    "urgenceWrapper",
    "statusBadge",
    "statusBadge2"
  ],
  logo: ["logo", "img"],
  img: ["img"],
  freeBox: ["freeBox"],
  menu: ["menu", "buttonMainCourante", "buttonOperations", "buttonBilan"],
  buttonMainCourante: ["buttonMainCourante"],
  buttonOperations: ["buttonOperations"],
  buttonBilan: ["buttonBilan"],
  deconnection: ["deconnection"],
  urgenceWrapper: ["urgenceWrapper", "statusBadge", "statusBadge2"],
  statusBadge: ["statusBadge"],
  statusBadge2: ["statusBadge2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebarMenu: "div";
  logo: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
  menu: "div";
  buttonMainCourante: typeof ButtonLeftMenu;
  buttonOperations: typeof ButtonLeftMenu;
  buttonBilan: typeof ButtonLeftMenu;
  deconnection: "div";
  urgenceWrapper: "div";
  statusBadge: "div";
  statusBadge2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftMenu2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftMenu2__VariantsArgs;
    args?: PlasmicLeftMenu2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftMenu2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeftMenu2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftMenu2__ArgProps,
          internalVariantPropNames: PlasmicLeftMenu2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeftMenu2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftMenu2";
  } else {
    func.displayName = `PlasmicLeftMenu2.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftMenu2 = Object.assign(
  // Top-level PlasmicLeftMenu2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebarMenu: makeNodeComponent("sidebarMenu"),
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    menu: makeNodeComponent("menu"),
    buttonMainCourante: makeNodeComponent("buttonMainCourante"),
    buttonOperations: makeNodeComponent("buttonOperations"),
    buttonBilan: makeNodeComponent("buttonBilan"),
    deconnection: makeNodeComponent("deconnection"),
    urgenceWrapper: makeNodeComponent("urgenceWrapper"),
    statusBadge: makeNodeComponent("statusBadge"),
    statusBadge2: makeNodeComponent("statusBadge2"),

    // Metadata about props expected for PlasmicLeftMenu2
    internalVariantProps: PlasmicLeftMenu2__VariantProps,
    internalArgProps: PlasmicLeftMenu2__ArgProps
  }
);

export default PlasmicLeftMenu2;
/* prettier-ignore-end */
