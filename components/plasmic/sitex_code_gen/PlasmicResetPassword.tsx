/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: i_IQHyStABS0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ResetPassword } from "../../../plasmic-library/authentication/ResetPassword"; // plasmic-import: TXg-uzxKFtbD/codeComponent

import { useScreenVariants as useScreenVariantsjdkNhxaWnKvk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JdkNHXAWnKVK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicResetPassword.module.css"; // plasmic-import: i_IQHyStABS0/css

import Ellipse187Icon from "./icons/PlasmicIcon__Ellipse187"; // plasmic-import: HCPsunS-fmP6/icon
import Ellipse192Icon from "./icons/PlasmicIcon__Ellipse192"; // plasmic-import: RdQSueESMBau/icon

createPlasmicElementProxy;

export type PlasmicResetPassword__VariantMembers = {};
export type PlasmicResetPassword__VariantsArgs = {};
type VariantPropType = keyof PlasmicResetPassword__VariantsArgs;
export const PlasmicResetPassword__VariantProps = new Array<VariantPropType>();

export type PlasmicResetPassword__ArgsType = {};
type ArgPropType = keyof PlasmicResetPassword__ArgsType;
export const PlasmicResetPassword__ArgProps = new Array<ArgPropType>();

export type PlasmicResetPassword__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  logo?: Flex__<"div">;
  imageLogo?: Flex__<"div">;
  frame65?: Flex__<"div">;
  rectangle136?: Flex__<"div">;
  frame67?: Flex__<"div">;
  rectangle137?: Flex__<"div">;
  text?: Flex__<"div">;
  resetPasswordForm?: Flex__<typeof ResetPassword>;
};

export interface DefaultResetPasswordProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResetPassword__RenderFunc(props: {
  variants: PlasmicResetPassword__VariantsArgs;
  args: PlasmicResetPassword__ArgsType;
  overrides: PlasmicResetPassword__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "resetPasswordForm.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "resetPasswordForm.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjdkNhxaWnKvk()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicResetPassword.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicResetPassword.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicResetPassword.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
            >
              <div
                data-plasmic-name={"imageLogo"}
                data-plasmic-override={overrides.imageLogo}
                className={classNames(projectcss.all, sty.imageLogo)}
              >
                <div
                  data-plasmic-name={"frame65"}
                  data-plasmic-override={overrides.frame65}
                  className={classNames(projectcss.all, sty.frame65)}
                >
                  <div
                    data-plasmic-name={"rectangle136"}
                    data-plasmic-override={overrides.rectangle136}
                    className={classNames(projectcss.all, sty.rectangle136)}
                  />
                </div>
                <div
                  data-plasmic-name={"frame67"}
                  data-plasmic-override={overrides.frame67}
                  className={classNames(projectcss.all, sty.frame67)}
                >
                  <div
                    data-plasmic-name={"rectangle137"}
                    data-plasmic-override={overrides.rectangle137}
                    className={classNames(projectcss.all, sty.rectangle137)}
                  />

                  <Ellipse187Icon
                    className={classNames(projectcss.all, sty.svg__pi7Zq)}
                    role={"img"}
                  />

                  <Ellipse192Icon
                    className={classNames(projectcss.all, sty.svg__f3F8A)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Sitex"}
              </div>
            </div>
            <ResetPassword
              data-plasmic-name={"resetPasswordForm"}
              data-plasmic-override={overrides.resetPasswordForm}
              alertPosition={"top"}
              cancelButtonStyle={"tertiary"}
              cancelButtonText={"Annuler"}
              className={classNames("__wab_instance", sty.resetPasswordForm)}
              confirmPassword={generateStateValueProp($state, [
                "resetPasswordForm",
                "confirmPassword"
              ])}
              confirmPasswordLabel={"Répétez le mot de passe*"}
              confirmPasswordPlaceholder={"Confirmez votre mot de passe"}
              eyeIconColor={"#666"}
              inputStyle={"simple"}
              maxAlerts={3}
              onConfirmPasswordChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "resetPasswordForm",
                  "confirmPassword"
                ]).apply(null, eventArgs);
              }}
              onPasswordChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "resetPasswordForm",
                  "password"
                ]).apply(null, eventArgs);
              }}
              onSubmit={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $state.resetPasswordForm.password;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions[
                        "SupabaseUserGlobalContext.updateUserPassword"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["goToLogin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/login` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLogin"] != null &&
                  typeof $steps["goToLogin"] === "object" &&
                  typeof $steps["goToLogin"].then === "function"
                ) {
                  $steps["goToLogin"] = await $steps["goToLogin"];
                }
              }}
              password={generateStateValueProp($state, [
                "resetPasswordForm",
                "password"
              ])}
              passwordLabel={"Nouveau mot de passe*"}
              passwordPlaceholder={"Entrez votre nouveau mot de passe"}
              resetSuccessMessage={
                "Votre mot de passe a été réinitialisé avec succès!"
              }
              showAlerts={true}
              showPasswordStrength={true}
              showPasswordToggle={true}
              submitButtonStyle={"primary"}
              submitButtonText={"Réinitialiser"}
              title={"Réinitialiser le mot de passe"}
              titleHeading={"h1"}
              wrapperStyle={"card"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "logo",
    "imageLogo",
    "frame65",
    "rectangle136",
    "frame67",
    "rectangle137",
    "text",
    "resetPasswordForm"
  ],
  freeBox: [
    "freeBox",
    "logo",
    "imageLogo",
    "frame65",
    "rectangle136",
    "frame67",
    "rectangle137",
    "text",
    "resetPasswordForm"
  ],
  logo: [
    "logo",
    "imageLogo",
    "frame65",
    "rectangle136",
    "frame67",
    "rectangle137",
    "text"
  ],
  imageLogo: [
    "imageLogo",
    "frame65",
    "rectangle136",
    "frame67",
    "rectangle137"
  ],
  frame65: ["frame65", "rectangle136"],
  rectangle136: ["rectangle136"],
  frame67: ["frame67", "rectangle137"],
  rectangle137: ["rectangle137"],
  text: ["text"],
  resetPasswordForm: ["resetPasswordForm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  logo: "div";
  imageLogo: "div";
  frame65: "div";
  rectangle136: "div";
  frame67: "div";
  rectangle137: "div";
  text: "div";
  resetPasswordForm: typeof ResetPassword;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResetPassword__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResetPassword__VariantsArgs;
    args?: PlasmicResetPassword__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResetPassword__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResetPassword__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResetPassword__ArgProps,
          internalVariantPropNames: PlasmicResetPassword__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResetPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResetPassword";
  } else {
    func.displayName = `PlasmicResetPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicResetPassword = Object.assign(
  // Top-level PlasmicResetPassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    logo: makeNodeComponent("logo"),
    imageLogo: makeNodeComponent("imageLogo"),
    frame65: makeNodeComponent("frame65"),
    rectangle136: makeNodeComponent("rectangle136"),
    frame67: makeNodeComponent("frame67"),
    rectangle137: makeNodeComponent("rectangle137"),
    text: makeNodeComponent("text"),
    resetPasswordForm: makeNodeComponent("resetPasswordForm"),

    // Metadata about props expected for PlasmicResetPassword
    internalVariantProps: PlasmicResetPassword__VariantProps,
    internalArgProps: PlasmicResetPassword__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Réinitialiser le mot de passe",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResetPassword;
/* prettier-ignore-end */
