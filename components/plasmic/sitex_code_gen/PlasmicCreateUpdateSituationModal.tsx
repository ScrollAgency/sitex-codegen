/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: mlofZlsjTvgi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import CreateUpdateSituation from "../../CreateUpdateSituation"; // plasmic-import: ifRw-0-06-Dn/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicCreateUpdateSituationModal.module.css"; // plasmic-import: mlofZlsjTvgi/css

createPlasmicElementProxy;

export type PlasmicCreateUpdateSituationModal__VariantMembers = {};
export type PlasmicCreateUpdateSituationModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateUpdateSituationModal__VariantsArgs;
export const PlasmicCreateUpdateSituationModal__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCreateUpdateSituationModal__ArgsType = {
  onDataObjectChange2?: (val: string) => void;
  clientId?: number;
  operationId?: number;
  dataObject?: any;
  isOpen?: boolean;
  onIsOpenChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicCreateUpdateSituationModal__ArgsType;
export const PlasmicCreateUpdateSituationModal__ArgProps =
  new Array<ArgPropType>(
    "onDataObjectChange2",
    "clientId",
    "operationId",
    "dataObject",
    "isOpen",
    "onIsOpenChange"
  );

export type PlasmicCreateUpdateSituationModal__OverridesType = {
  modal?: Flex__<typeof Modal>;
  createUpdateSituation?: Flex__<typeof CreateUpdateSituation>;
};

export interface DefaultCreateUpdateSituationModalProps {
  onDataObjectChange2?: (val: string) => void;
  clientId?: number;
  operationId?: number;
  dataObject?: any;
  isOpen?: boolean;
  onIsOpenChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateUpdateSituationModal__RenderFunc(props: {
  variants: PlasmicCreateUpdateSituationModal__VariantsArgs;
  args: PlasmicCreateUpdateSituationModal__ArgsType;
  overrides: PlasmicCreateUpdateSituationModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          operationId: 7
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "dataObject",
        type: "writable",
        variableType: "object",

        valueProp: "dataObject",
        onChangeProp: "onDataObjectChange2"
      },
      {
        path: "isOpen",
        type: "writable",
        variableType: "boolean",

        valueProp: "isOpen",
        onChangeProp: "onIsOpenChange"
      },
      {
        path: "createUpdateSituation.situationId",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    operationFiles: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "619361eb-b0ff-458f-831f-1328e2aea245",
        userArgs: {},
        cacheKey: `plasmic.$.619361eb-b0ff-458f-831f-1328e2aea245.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    clients: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "e4de2eff-e6b7-4ba8-a532-6e7be48ab5cd",
        userArgs: {},
        cacheKey: `plasmic.$.e4de2eff-e6b7-4ba8-a532-6e7be48ab5cd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    crisis: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "14a41269-b144-44a0-8aab-0f0b5f937566",
        userArgs: {
          filters: [$state.dataObject.id]
        },
        cacheKey: `plasmic.$.14a41269-b144-44a0-8aab-0f0b5f937566.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Modal
      data-plasmic-name={"modal"}
      data-plasmic-override={overrides.modal}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modal)}
      closeOnBackdropClick={false}
      content={
        <CreateUpdateSituation
          data-plasmic-name={"createUpdateSituation"}
          data-plasmic-override={overrides.createUpdateSituation}
          className={classNames("__wab_instance", sty.createUpdateSituation)}
          onSituationIdChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "createUpdateSituation",
              "situationId"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          situationId={generateStateValueProp($state, [
            "createUpdateSituation",
            "situationId"
          ])}
        />
      }
      footer={
        <div className={classNames(projectcss.all, sty.freeBox__zRoOc)} />
      }
      heading={
        <div className={classNames(projectcss.all, sty.freeBox__oN8SJ)} />
      }
      isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modal", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={true}
      showHeader={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modal: ["modal", "createUpdateSituation"],
  createUpdateSituation: ["createUpdateSituation"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modal: typeof Modal;
  createUpdateSituation: typeof CreateUpdateSituation;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateUpdateSituationModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateUpdateSituationModal__VariantsArgs;
    args?: PlasmicCreateUpdateSituationModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateUpdateSituationModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCreateUpdateSituationModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateUpdateSituationModal__ArgProps,
          internalVariantPropNames:
            PlasmicCreateUpdateSituationModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateUpdateSituationModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modal") {
    func.displayName = "PlasmicCreateUpdateSituationModal";
  } else {
    func.displayName = `PlasmicCreateUpdateSituationModal.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateUpdateSituationModal = Object.assign(
  // Top-level PlasmicCreateUpdateSituationModal renders the root element
  makeNodeComponent("modal"),
  {
    // Helper components rendering sub-elements
    createUpdateSituation: makeNodeComponent("createUpdateSituation"),

    // Metadata about props expected for PlasmicCreateUpdateSituationModal
    internalVariantProps: PlasmicCreateUpdateSituationModal__VariantProps,
    internalArgProps: PlasmicCreateUpdateSituationModal__ArgProps
  }
);

export default PlasmicCreateUpdateSituationModal;
/* prettier-ignore-end */
