/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: HIAFNqDo02dY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: 2dhqWpUZxzEb/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdColorPicker } from "@plasmicpkgs/antd5/skinny/registerColorPicker";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { TextInput } from "../../../plasmic-library/forms/TextInput"; // plasmic-import: L-RrflTRMMhf/codeComponent
import { SitexTextInput } from "../../../plasmic-library/forms/SitexTextInput"; // plasmic-import: FXhuSzutgVdR/codeComponent
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { DropDown } from "../../../plasmic-library/forms/DropDown"; // plasmic-import: iAtbmaEieqny/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicCreateUpdateVariable.module.css"; // plasmic-import: HIAFNqDo02dY/css

import LinkSimpleIcon from "./icons/PlasmicIcon__LinkSimple"; // plasmic-import: j1hFSwL8QFW8/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: Ciiq3-41nfH3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon
import OutlinedIcon from "./icons/PlasmicIcon__Outlined"; // plasmic-import: KSDVg8pxipFP/icon
import FilledIcon from "./icons/PlasmicIcon__Filled"; // plasmic-import: hf9VaFZryDjW/icon
import Outlined2Icon from "./icons/PlasmicIcon__Outlined2"; // plasmic-import: KUj1hb82lL9p/icon
import Filled2Icon from "./icons/PlasmicIcon__Filled2"; // plasmic-import: bV2Rhoi89Nbo/icon
import Outlined3Icon from "./icons/PlasmicIcon__Outlined3"; // plasmic-import: F-p0hJ-0w6np/icon
import Outlined4Icon from "./icons/PlasmicIcon__Outlined4"; // plasmic-import: 0betudEa-qOp/icon
import Filled3Icon from "./icons/PlasmicIcon__Filled3"; // plasmic-import: 0fyEdXS8b5qB/icon
import Outlined5Icon from "./icons/PlasmicIcon__Outlined5"; // plasmic-import: KELtri34ORgp/icon
import Filled4Icon from "./icons/PlasmicIcon__Filled4"; // plasmic-import: 8jxFG1oHtkw2/icon
import Outlined6Icon from "./icons/PlasmicIcon__Outlined6"; // plasmic-import: vsSe2R3hqp-H/icon
import Outlined7Icon from "./icons/PlasmicIcon__Outlined7"; // plasmic-import: 9CfLC5ZQ7veK/icon
import Outlined8Icon from "./icons/PlasmicIcon__Outlined8"; // plasmic-import: 4UmaWISAaqWp/icon
import Outlined9Icon from "./icons/PlasmicIcon__Outlined9"; // plasmic-import: PWnzGUKO-rFw/icon
import IcRoundPlusIcon from "./icons/PlasmicIcon__IcRoundPlus"; // plasmic-import: 8J79OcNmiVuF/icon
import Line9Icon from "./icons/PlasmicIcon__Line9"; // plasmic-import: IdP8XmyKAA75/icon
import IcTwotoneAppleIcon from "./icons/PlasmicIcon__IcTwotoneApple"; // plasmic-import: EW8lvp8Rllk4/icon
import MdiFacebookIcon from "./icons/PlasmicIcon__MdiFacebook"; // plasmic-import: b-hWlWAZSFUh/icon

createPlasmicElementProxy;

export type PlasmicCreateUpdateVariable__VariantMembers = {};
export type PlasmicCreateUpdateVariable__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateUpdateVariable__VariantsArgs;
export const PlasmicCreateUpdateVariable__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCreateUpdateVariable__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: string) => void;
  variableId?: any;
  onVariableIdChange?: (val: string) => void;
  mode?: string;
  onModeChange?: (val: string) => void;
  companies?: any;
  clientId?: number;
};
type ArgPropType = keyof PlasmicCreateUpdateVariable__ArgsType;
export const PlasmicCreateUpdateVariable__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "variableId",
  "onVariableIdChange",
  "mode",
  "onModeChange",
  "companies",
  "clientId"
);

export type PlasmicCreateUpdateVariable__OverridesType = {
  modal?: Flex__<typeof Modal>;
  frame1437254016?: Flex__<"div">;
  name?: Flex__<"div">;
  frame1437254019?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  select2?: Flex__<typeof AntdSelect>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  colorPicker?: Flex__<typeof AntdColorPicker>;
  content?: Flex__<"div">;
  titre?: Flex__<typeof TextInput>;
  texinput2?: Flex__<typeof SitexTextInput>;
  date?: Flex__<"div">;
  label6?: Flex__<"div">;
  timePicker?: Flex__<typeof AntdDatePicker>;
  type?: Flex__<typeof DropDown>;
  budget?: Flex__<typeof TextInput>;
  comments?: Flex__<typeof TextInput>;
  input5?: Flex__<"div">;
  name2?: Flex__<"div">;
  datePickerWeb?: Flex__<"div">;
  inputSelect?: Flex__<"div">;
  signedByBaseFieldGroupSmall?: Flex__<"div">;
  endDateCalendar?: Flex__<"div">;
  inputElementTextField?: Flex__<"div">;
  signedByBaseInputElementTextFieldSmallEnabled?: Flex__<"div">;
  leadingArtworkContainer?: Flex__<"div">;
  leadingArtwork?: Flex__<"div">;
  leadingLabelContainer?: Flex__<"div">;
  leadingLabel?: Flex__<"div">;
  signedByBaseTypographyLabelSmall?: Flex__<"div">;
  text5?: Flex__<"div">;
  spacer?: Flex__<"div">;
  inputElementContentText?: Flex__<"div">;
  signedByBaseInputElementContentTextSmallOff?: Flex__<"div">;
  text6?: Flex__<"div">;
  trailingLabelEnhancer?: Flex__<"div">;
  trailingLabel?: Flex__<"div">;
  signedByBaseTypographyLabelSmall2?: Flex__<"div">;
  text7?: Flex__<"div">;
  spacer2?: Flex__<"div">;
  trailingArtworkContainer?: Flex__<"div">;
  trailingArtwork?: Flex__<"div">;
  calendar?: Flex__<"div">;
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled?: Flex__<"div">;
  leadingArtworkContainer2?: Flex__<"div">;
  text8?: Flex__<"div">;
  leadingLabelContainer2?: Flex__<"div">;
  leadingLabel2?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall?: Flex__<"div">;
  text9?: Flex__<"div">;
  spacer3?: Flex__<"div">;
  inputElementContentText2?: Flex__<"div">;
  signedByBaseInputElementContentTextXSmallWebOff?: Flex__<"div">;
  text10?: Flex__<"div">;
  trailingLabelEnhancer2?: Flex__<"div">;
  trailingLabel2?: Flex__<"div">;
  signedByBaseTypographyLabelXSmall2?: Flex__<"div">;
  text11?: Flex__<"div">;
  spacer4?: Flex__<"div">;
  trailingArtworkContainer2?: Flex__<"div">;
  trailingArtwork2?: Flex__<"div">;
  selectIndicatorContainer?: Flex__<"div">;
  chevronIcon?: Flex__<"div">;
  inputElementHint?: Flex__<"div">;
  heart?: Flex__<"div">;
  hint?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall?: Flex__<"div">;
  text12?: Flex__<"div">;
  spacer28?: Flex__<"div">;
  inputElementSelect?: Flex__<"div">;
  signedByBaseInputElementSelectMediumSingleDefaultActive?: Flex__<"div">;
  selectFrame?: Flex__<"div">;
  leadingArtworkContainer3?: Flex__<"div">;
  leadingArtwork2?: Flex__<"div">;
  leadingLabelContainer3?: Flex__<"div">;
  leadingLabel3?: Flex__<"div">;
  signedByBaseTypographyLabelMedium?: Flex__<"div">;
  text13?: Flex__<"div">;
  spacer5?: Flex__<"div">;
  inputElementContentText3?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff?: Flex__<"div">;
  text14?: Flex__<"div">;
  trailingLabelEnhancer3?: Flex__<"div">;
  trailingLabel3?: Flex__<"div">;
  signedByBaseTypographyLabelMedium2?: Flex__<"div">;
  text15?: Flex__<"div">;
  spacer6?: Flex__<"div">;
  trailingArtworkContainer3?: Flex__<"div">;
  trailingArtwork3?: Flex__<"div">;
  selectIndicatorContainer2?: Flex__<"div">;
  chevronIcon2?: Flex__<"div">;
  menu?: Flex__<"div">;
  signedByBaseMenuListMedium?: Flex__<"div">;
  menuItem?: Flex__<"div">;
  signedByBaseMenuItemSearchMediumNoneEnabled?: Flex__<"div">;
  searchField?: Flex__<"div">;
  signedByBaseSearchFieldMediumEnabled?: Flex__<"div">;
  inputElementLabel?: Flex__<"div">;
  signedByBaseInputElementLabelMedium?: Flex__<"div">;
  typography?: Flex__<"div">;
  signedByBaseTypographyLabelMedium3?: Flex__<"div">;
  text16?: Flex__<"div">;
  spacer7?: Flex__<"div">;
  characterCountFrame?: Flex__<"div">;
  heart2?: Flex__<"div">;
  typography2?: Flex__<"div">;
  signedByBaseTypographyLabelMedium4?: Flex__<"div">;
  text17?: Flex__<"div">;
  spacer8?: Flex__<"div">;
  inputElementTextField2?: Flex__<"div">;
  signedByBaseInputElementTextFieldMediumEnabled?: Flex__<"div">;
  leadingArtworkContainer4?: Flex__<"div">;
  search?: Flex__<"div">;
  leadingLabelContainer4?: Flex__<"div">;
  leadingLabel4?: Flex__<"div">;
  signedByBaseTypographyLabelMedium5?: Flex__<"div">;
  text18?: Flex__<"div">;
  spacer9?: Flex__<"div">;
  inputElementContentText4?: Flex__<"div">;
  signedByBaseInputElementContentTextMediumOff2?: Flex__<"div">;
  text19?: Flex__<"div">;
  trailingLabelEnhancer4?: Flex__<"div">;
  trailingLabel4?: Flex__<"div">;
  signedByBaseTypographyLabelMedium6?: Flex__<"div">;
  text20?: Flex__<"div">;
  spacer10?: Flex__<"div">;
  trailingArtworkContainer4?: Flex__<"div">;
  trailingArtwork4?: Flex__<"div">;
  inputElementHint2?: Flex__<"div">;
  heart3?: Flex__<"div">;
  hint2?: Flex__<"div">;
  signedByBaseTypographyParagraphSmall2?: Flex__<"div">;
  text21?: Flex__<"div">;
  spacer29?: Flex__<"div">;
  menuItem2?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked?: Flex__<"div">;
  icon?: Flex__<"div">;
  leadingEnhancer?: Flex__<"div">;
  heart4?: Flex__<"div">;
  textFrame?: Flex__<"div">;
  leadingText?: Flex__<"div">;
  typography3?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium?: Flex__<"div">;
  text22?: Flex__<"div">;
  spacer11?: Flex__<"div">;
  typography4?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium2?: Flex__<"div">;
  text23?: Flex__<"div">;
  spacer12?: Flex__<"div">;
  typography5?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium3?: Flex__<"div">;
  spacer13?: Flex__<"div">;
  trailingEnhancer?: Flex__<"div">;
  heart5?: Flex__<"div">;
  menuItem3?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled2?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked2?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked2?: Flex__<"div">;
  icon2?: Flex__<"div">;
  leadingEnhancer2?: Flex__<"div">;
  heart6?: Flex__<"div">;
  textFrame2?: Flex__<"div">;
  leadingText2?: Flex__<"div">;
  typography6?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium4?: Flex__<"div">;
  text24?: Flex__<"div">;
  spacer14?: Flex__<"div">;
  typography7?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium5?: Flex__<"div">;
  text25?: Flex__<"div">;
  spacer15?: Flex__<"div">;
  typography8?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium6?: Flex__<"div">;
  spacer16?: Flex__<"div">;
  trailingEnhancer2?: Flex__<"div">;
  checkmarkSmall?: Flex__<"div">;
  menuItem4?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled3?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked3?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked3?: Flex__<"div">;
  icon3?: Flex__<"div">;
  leadingEnhancer3?: Flex__<"div">;
  heart7?: Flex__<"div">;
  textFrame3?: Flex__<"div">;
  leadingText3?: Flex__<"div">;
  typography9?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium7?: Flex__<"div">;
  text26?: Flex__<"div">;
  spacer17?: Flex__<"div">;
  typography10?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium8?: Flex__<"div">;
  text27?: Flex__<"div">;
  spacer18?: Flex__<"div">;
  typography11?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium9?: Flex__<"div">;
  spacer19?: Flex__<"div">;
  trailingEnhancer3?: Flex__<"div">;
  heart8?: Flex__<"div">;
  menuItem5?: Flex__<"div">;
  signedByBaseMenuItemOptionMediumStandardEnabled4?: Flex__<"div">;
  menuItemControlMediumCheckboxUnchecked4?: Flex__<"div">;
  signedByBaseMenuItemControlMediumCheckboxUnchecked4?: Flex__<"div">;
  icon4?: Flex__<"div">;
  leadingEnhancer4?: Flex__<"div">;
  heart9?: Flex__<"div">;
  textFrame4?: Flex__<"div">;
  leadingText4?: Flex__<"div">;
  typography12?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium10?: Flex__<"div">;
  text28?: Flex__<"div">;
  spacer20?: Flex__<"div">;
  typography13?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium11?: Flex__<"div">;
  text29?: Flex__<"div">;
  spacer21?: Flex__<"div">;
  typography14?: Flex__<"div">;
  signedByBaseTypographyParagraphMedium12?: Flex__<"div">;
  spacer22?: Flex__<"div">;
  trailingEnhancer4?: Flex__<"div">;
  heart10?: Flex__<"div">;
  scrollBar?: Flex__<"div">;
  model?: Flex__<typeof DropDown>;
  buttons?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  frame1073713924?: Flex__<"div">;
  frame1073713930?: Flex__<"div">;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<"div">;
  button4?: Flex__<"div">;
};

export interface DefaultCreateUpdateVariableProps {
  open?: boolean;
  onOpenChange?: (val: string) => void;
  variableId?: any;
  onVariableIdChange?: (val: string) => void;
  mode?: string;
  onModeChange?: (val: string) => void;
  companies?: any;
  clientId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateUpdateVariable__RenderFunc(props: {
  variants: PlasmicCreateUpdateVariable__VariantsArgs;
  args: PlasmicCreateUpdateVariable__ArgsType;
  overrides: PlasmicCreateUpdateVariable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "texinput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "texinput2.isInputValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "variableId",
        type: "writable",
        variableType: "object",

        valueProp: "variableId",
        onChangeProp: "onVariableIdChange"
      },
      {
        path: "mode",
        type: "writable",
        variableType: "text",

        valueProp: "mode",
        onChangeProp: "onModeChange"
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "colorPicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <Modal
      data-plasmic-name={"modal"}
      data-plasmic-override={overrides.modal}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.modal)}
      closeOnBackdropClick={false}
      content={
        <React.Fragment>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              initialValues: (() => {
                try {
                  return $state.mode === "update" ? $state.variableId : null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["create"] =
                  $state.mode === "create"
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "36068db1-443b-4c5c-b616-5a67f808e6d8",
                            userArgs: {
                              variables: [
                                $state.form.value.category,
                                $ctx.SupabaseUser.user == undefined
                                  ? null
                                  : $ctx.SupabaseUser.user.id,
                                $state.form.value.name,
                                $state.form.value.category === "precisions"
                                  ? $state.form.value.name
                                  : $state.form.value.name_macro,
                                $state.form.value.color,
                                $props.clientId
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["create"] != null &&
                  typeof $steps["create"] === "object" &&
                  typeof $steps["create"].then === "function"
                ) {
                  $steps["create"] = await $steps["create"];
                }

                $steps["update"] =
                  $state.mode === "update"
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "v6umJuHyep6kPNyCAJjouT",
                            opId: "48e16943-e4da-4d85-b460-a4c1ba5c7926",
                            userArgs: {
                              keys: [$props.variableId.id],
                              variables: [
                                $state.form.value.color,
                                $state.form.value.name,
                                $state.form.value.name_macro
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["update"] != null &&
                  typeof $steps["update"] === "object" &&
                  typeof $steps["update"].then === "function"
                ) {
                  $steps["update"] = await $steps["update"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          (() => {
                            try {
                              return $state.mode === "update"
                                ? "Variable mise à jour"
                                : "Variable créée";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          undefined,
                          "bottom"
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }
              },
              onFinishFailed: async data => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: ["error", "Erreur", ``, undefined, "bottom"]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["form", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__yk3Se)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Ifg9
                      )}
                    >
                      {"Cat\u00e9gorie"}
                    </div>
                  }
                  name={"category"}
                  rules={[
                    { ruleType: "required", message: "Entreprise requise" }
                  ]}
                >
                  <AntdSelect
                    data-plasmic-name={"select2"}
                    data-plasmic-override={overrides.select2}
                    bordered={true}
                    className={classNames("__wab_instance", sty.select2)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select2",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    optionClassName={classNames({
                      [sty["pcls_0WQvgSodE_zl"]]: true
                    })}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null, type: "option" },
                        { value: null, label: null, type: "option" },
                        { type: "option", value: null, label: null },
                        { type: "option", value: null, label: null }
                      ];
                      __composite["0"]["value"] = "priority";
                      __composite["0"]["label"] = "Priorit\u00e9";
                      __composite["1"]["value"] = "precisions";
                      __composite["1"]["label"] = "Pr\u00e9cisions (type)";
                      __composite["2"]["value"] = "implied";
                      __composite["2"]["label"] = "Impliqu\u00e9s";
                      __composite["3"]["value"] = "thematic";
                      __composite["3"]["label"] = "Dominante (th\u00e9matique)";
                      return __composite;
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c1Mi4
                        )}
                      >
                        {"S\u00e9lectionner"}
                      </div>
                    }
                    placeholderClassName={classNames({
                      [sty["pcls_ekMtAWCwKdxN"]]: true
                    })}
                    popupClassName={classNames({
                      [sty["pcls_n7l2v6mALekX"]]: true
                    })}
                    popupScopeClassName={sty["select2__popup"]}
                    size={"middle"}
                    triggerClassName={classNames({
                      [sty["pcls_S4QMwykB5ZED"]]: true
                    })}
                    value={generateStateValueProp($state, ["select2", "value"])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField___4EFu)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lvbXd
                      )}
                    >
                      {"Nom"}
                    </div>
                  }
                  name={"name"}
                  rules={[
                    { ruleType: "required", message: "R\u00f4le requis" }
                  ]}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input2),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input2", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      size: "large",
                      value: generateStateValueProp($state, ["input2", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input2.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input2"}
                        data-plasmic-override={overrides.input2}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.form.value.category === "precisions";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___6SkBp
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kp5Cy
                        )}
                      >
                        {"Nom macro"}
                      </div>
                    }
                    name={"name_macro"}
                    rules={[
                      { ruleType: "required", message: "R\u00f4le requis" }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input3),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                ) : null}
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__ygZ38)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bS0Mr
                      )}
                    >
                      {"Couleur"}
                    </div>
                  }
                  name={"color"}
                >
                  <AntdColorPicker
                    data-plasmic-name={"colorPicker"}
                    data-plasmic-override={overrides.colorPicker}
                    className={classNames("__wab_instance", sty.colorPicker)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "colorPicker",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    value={generateStateValueProp($state, [
                      "colorPicker",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <Button
                  className={classNames("__wab_instance", sty.button__aVskQ)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wmfcr
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.mode === "update"
                              ? "Mettre à jour"
                              : "Créer";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Cr\u00e9er";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  submitsForm={true}
                />
              </FormWrapper>
            );
          })()}
          <Stack__
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            <TextInput
              data-plasmic-name={"titre"}
              data-plasmic-override={overrides.titre}
              className={classNames("__wab_instance", sty.titre)}
              isMulti={false}
              label={"Titre*"}
              placeholder={"Titre*"}
              showIcon={false}
              showLabel={true}
              state={"default"}
              text={``}
              type={"text"}
            />

            <SitexTextInput
              data-plasmic-name={"texinput2"}
              data-plasmic-override={overrides.texinput2}
              className={classNames("__wab_instance", sty.texinput2)}
              initialValue={generateStateValueProp($state, [
                "texinput2",
                "value"
              ])}
              inputClassName={classNames({ [sty["pcls_3Lzt7WBAFZaW"]]: true })}
              onTextChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["texinput2", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              onValidationChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "texinput2",
                  "isInputValid"
                ]).apply(null, eventArgs);
              }}
              placeholder={"Titre*"}
              prefixedText={"Titre*"}
              required={true}
              type={"text"}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"date"}
              data-plasmic-override={overrides.date}
              hasGap={true}
              className={classNames(projectcss.all, sty.date)}
            >
              <div
                data-plasmic-name={"label6"}
                data-plasmic-override={overrides.label6}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label6
                )}
              >
                {"Date et heure de d\u00e9but"}
              </div>
              {(() => {
                const child$Props = {
                  allowClear: true,
                  className: classNames("__wab_instance", sty.timePicker),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["timePicker", "value"],
                      AntdDatePicker_Helpers
                    ).apply(null, eventArgs);
                  },
                  popupScopeClassName: sty["timePicker__datePickerPopup"],
                  showTime: true,
                  value: generateStateValueProp($state, ["timePicker", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "timePicker.value"
                    }
                  ],
                  [],
                  AntdDatePicker_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdDatePicker
                    data-plasmic-name={"timePicker"}
                    data-plasmic-override={overrides.timePicker}
                    {...child$Props}
                  />
                );
              })()}
            </Stack__>
            <DropDown
              data-plasmic-name={"type"}
              data-plasmic-override={overrides.type}
              check={false}
              className={classNames("__wab_instance", sty.type)}
              label={"Type"}
              options={["Default", "Special"]}
              showLabel={true}
              state={"default"}
              type={"default"}
            />

            <TextInput
              data-plasmic-name={"budget"}
              data-plasmic-override={overrides.budget}
              className={classNames("__wab_instance", sty.budget)}
              isMulti={false}
              label={"Budget"}
              placeholder={"\u20ac"}
              showIcon={false}
              showLabel={true}
              state={"default"}
              text={""}
              type={"text"}
            />

            <TextInput
              data-plasmic-name={"comments"}
              data-plasmic-override={overrides.comments}
              className={classNames("__wab_instance", sty.comments)}
              isMulti={false}
              label={"Commentaires"}
              placeholder={"Commentaires"}
              showIcon={false}
              showLabel={true}
              state={"Placeholder"}
              text={""}
              type={"TextArea"}
            />

            {false ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"input5"}
                data-plasmic-override={overrides.input5}
                hasGap={true}
                className={classNames(projectcss.all, sty.input5)}
              >
                <div
                  data-plasmic-name={"name2"}
                  data-plasmic-override={overrides.name2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name2
                  )}
                >
                  {"Dispositif"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"datePickerWeb"}
                  data-plasmic-override={overrides.datePickerWeb}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.datePickerWeb)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputSelect"}
                    data-plasmic-override={overrides.inputSelect}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputSelect)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"signedByBaseFieldGroupSmall"}
                        data-plasmic-override={
                          overrides.signedByBaseFieldGroupSmall
                        }
                        className={classNames(
                          projectcss.all,
                          sty.signedByBaseFieldGroupSmall
                        )}
                      />
                    ) : null}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"endDateCalendar"}
                      data-plasmic-override={overrides.endDateCalendar}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.endDateCalendar
                      )}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"inputElementTextField"}
                          data-plasmic-override={
                            overrides.inputElementTextField
                          }
                          className={classNames(
                            projectcss.all,
                            sty.inputElementTextField
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={
                                "signedByBaseInputElementTextFieldSmallEnabled"
                              }
                              data-plasmic-override={
                                overrides.signedByBaseInputElementTextFieldSmallEnabled
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseInputElementTextFieldSmallEnabled
                              )}
                            />
                          ) : null}
                          {false ? (
                            <div
                              data-plasmic-name={"leadingArtworkContainer"}
                              data-plasmic-override={
                                overrides.leadingArtworkContainer
                              }
                              className={classNames(
                                projectcss.all,
                                sty.leadingArtworkContainer
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingArtwork"}
                                data-plasmic-override={overrides.leadingArtwork}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingArtwork
                                )}
                              >
                                {false ? (
                                  <OutlinedIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___7YXwf
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <FilledIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0HeC
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}
                          {false ? (
                            <div
                              data-plasmic-name={"leadingLabelContainer"}
                              data-plasmic-override={
                                overrides.leadingLabelContainer
                              }
                              className={classNames(
                                projectcss.all,
                                sty.leadingLabelContainer
                              )}
                            >
                              <div
                                data-plasmic-name={"leadingLabel"}
                                data-plasmic-override={overrides.leadingLabel}
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingLabel
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyLabelSmall"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyLabelSmall
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyLabelSmall
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text5"}
                                  data-plasmic-override={overrides.text5}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text5
                                  )}
                                >
                                  {"$"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer"}
                                    data-plasmic-override={overrides.spacer}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer
                                    )}
                                  />
                                ) : null}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"inputElementContentText"}
                            data-plasmic-override={
                              overrides.inputElementContentText
                            }
                            className={classNames(
                              projectcss.all,
                              sty.inputElementContentText
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseInputElementContentTextSmallOff"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseInputElementContentTextSmallOff
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseInputElementContentTextSmallOff
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text6"}
                              data-plasmic-override={overrides.text6}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text6
                              )}
                            >
                              {"MM/DD/YYYY"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"trailingLabelEnhancer"}
                              data-plasmic-override={
                                overrides.trailingLabelEnhancer
                              }
                              className={classNames(
                                projectcss.all,
                                sty.trailingLabelEnhancer
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={"trailingLabel"}
                                  data-plasmic-override={
                                    overrides.trailingLabel
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.trailingLabel
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={
                                        "signedByBaseTypographyLabelSmall2"
                                      }
                                      data-plasmic-override={
                                        overrides.signedByBaseTypographyLabelSmall2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.signedByBaseTypographyLabelSmall2
                                      )}
                                    />
                                  ) : null}
                                  <div
                                    data-plasmic-name={"text7"}
                                    data-plasmic-override={overrides.text7}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text7
                                    )}
                                  >
                                    {"USD"}
                                  </div>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"spacer2"}
                                      data-plasmic-override={overrides.spacer2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.spacer2
                                      )}
                                    />
                                  ) : null}
                                </div>
                              ) : null}
                            </div>
                          ) : null}
                          {false ? (
                            <div
                              data-plasmic-name={"trailingArtworkContainer"}
                              data-plasmic-override={
                                overrides.trailingArtworkContainer
                              }
                              className={classNames(
                                projectcss.all,
                                sty.trailingArtworkContainer
                              )}
                            >
                              <div
                                data-plasmic-name={"trailingArtwork"}
                                data-plasmic-override={
                                  overrides.trailingArtwork
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingArtwork
                                )}
                              >
                                {false ? (
                                  <OutlinedIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___2OL0Y
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <FilledIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nDlrU
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                      <div
                        data-plasmic-name={"calendar"}
                        data-plasmic-override={overrides.calendar}
                        className={classNames(projectcss.all, sty.calendar)}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled
                            )}
                          />
                        ) : null}
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"leadingArtworkContainer2"}
                          data-plasmic-override={
                            overrides.leadingArtworkContainer2
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.leadingArtworkContainer2
                          )}
                        >
                          <div
                            data-plasmic-name={"text8"}
                            data-plasmic-override={overrides.text8}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text8
                            )}
                          >
                            {"S\u00e9lectionner..."}
                          </div>
                        </Stack__>
                        {false ? (
                          <div
                            data-plasmic-name={"leadingLabelContainer2"}
                            data-plasmic-override={
                              overrides.leadingLabelContainer2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.leadingLabelContainer2
                            )}
                          >
                            <div
                              data-plasmic-name={"leadingLabel2"}
                              data-plasmic-override={overrides.leadingLabel2}
                              className={classNames(
                                projectcss.all,
                                sty.leadingLabel2
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyLabelXSmall"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyLabelXSmall
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyLabelXSmall
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text9"}
                                data-plasmic-override={overrides.text9}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text9
                                )}
                              >
                                {"$"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer3"}
                                  data-plasmic-override={overrides.spacer3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer3
                                  )}
                                />
                              ) : null}
                            </div>
                          </div>
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"inputElementContentText2"}
                            data-plasmic-override={
                              overrides.inputElementContentText2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.inputElementContentText2
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseInputElementContentTextXSmallWebOff"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseInputElementContentTextXSmallWebOff
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseInputElementContentTextXSmallWebOff
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text10"}
                              data-plasmic-override={overrides.text10}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text10
                              )}
                            >
                              {"Jr"}
                            </div>
                          </div>
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"trailingLabelEnhancer2"}
                            data-plasmic-override={
                              overrides.trailingLabelEnhancer2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.trailingLabelEnhancer2
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"trailingLabel2"}
                                data-plasmic-override={overrides.trailingLabel2}
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingLabel2
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyLabelXSmall2"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyLabelXSmall2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyLabelXSmall2
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text11"}
                                  data-plasmic-override={overrides.text11}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text11
                                  )}
                                >
                                  {"USD"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer4"}
                                    data-plasmic-override={overrides.spacer4}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer4
                                    )}
                                  />
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"trailingArtworkContainer2"}
                            data-plasmic-override={
                              overrides.trailingArtworkContainer2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.trailingArtworkContainer2
                            )}
                          >
                            <div
                              data-plasmic-name={"trailingArtwork2"}
                              data-plasmic-override={overrides.trailingArtwork2}
                              className={classNames(
                                projectcss.all,
                                sty.trailingArtwork2
                              )}
                            >
                              {false ? (
                                <Outlined2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___32PiE
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <Filled2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__x9P4X
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"selectIndicatorContainer"}
                          data-plasmic-override={
                            overrides.selectIndicatorContainer
                          }
                          className={classNames(
                            projectcss.all,
                            sty.selectIndicatorContainer
                          )}
                        >
                          <div
                            data-plasmic-name={"chevronIcon"}
                            data-plasmic-override={overrides.chevronIcon}
                            className={classNames(
                              projectcss.all,
                              sty.chevronIcon
                            )}
                          >
                            {false ? (
                              <Outlined3Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ikkCq
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Outlined3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hyJiu
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      </div>
                    </Stack__>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputElementHint"}
                        data-plasmic-override={overrides.inputElementHint}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputElementHint
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"heart"}
                            data-plasmic-override={overrides.heart}
                            className={classNames(projectcss.all, sty.heart)}
                          >
                            {false ? (
                              <Outlined4Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uX2Bd
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__d0WUt
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"hint"}
                          data-plasmic-override={overrides.hint}
                          className={classNames(projectcss.all, sty.hint)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={
                                "signedByBaseTypographyParagraphSmall"
                              }
                              data-plasmic-override={
                                overrides.signedByBaseTypographyParagraphSmall
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseTypographyParagraphSmall
                              )}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"text12"}
                            data-plasmic-override={overrides.text12}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text12
                            )}
                          >
                            {"MM/DD/YYYY"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"spacer28"}
                              data-plasmic-override={overrides.spacer28}
                              className={classNames(
                                projectcss.all,
                                sty.spacer28
                              )}
                            />
                          ) : null}
                        </div>
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
                <div
                  data-plasmic-name={"inputElementSelect"}
                  data-plasmic-override={overrides.inputElementSelect}
                  className={classNames(projectcss.all, sty.inputElementSelect)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={
                        "signedByBaseInputElementSelectMediumSingleDefaultActive"
                      }
                      data-plasmic-override={
                        overrides.signedByBaseInputElementSelectMediumSingleDefaultActive
                      }
                      className={classNames(
                        projectcss.all,
                        sty.signedByBaseInputElementSelectMediumSingleDefaultActive
                      )}
                    />
                  ) : null}
                  {false ? (
                    <div
                      data-plasmic-name={"selectFrame"}
                      data-plasmic-override={overrides.selectFrame}
                      className={classNames(projectcss.all, sty.selectFrame)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"leadingArtworkContainer3"}
                          data-plasmic-override={
                            overrides.leadingArtworkContainer3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.leadingArtworkContainer3
                          )}
                        >
                          <div
                            data-plasmic-name={"leadingArtwork2"}
                            data-plasmic-override={overrides.leadingArtwork2}
                            className={classNames(
                              projectcss.all,
                              sty.leadingArtwork2
                            )}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___51Lkk
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pAf29
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"leadingLabelContainer3"}
                          data-plasmic-override={
                            overrides.leadingLabelContainer3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.leadingLabelContainer3
                          )}
                        >
                          <div
                            data-plasmic-name={"leadingLabel3"}
                            data-plasmic-override={overrides.leadingLabel3}
                            className={classNames(
                              projectcss.all,
                              sty.leadingLabel3
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyLabelMedium"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyLabelMedium
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyLabelMedium
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text13"}
                              data-plasmic-override={overrides.text13}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text13
                              )}
                            >
                              {"$"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer5"}
                                data-plasmic-override={overrides.spacer5}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer5
                                )}
                              />
                            ) : null}
                          </div>
                        </div>
                      ) : null}
                      <div
                        data-plasmic-name={"inputElementContentText3"}
                        data-plasmic-override={
                          overrides.inputElementContentText3
                        }
                        className={classNames(
                          projectcss.all,
                          sty.inputElementContentText3
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseInputElementContentTextMediumOff"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseInputElementContentTextMediumOff
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseInputElementContentTextMediumOff
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"text14"}
                            data-plasmic-override={overrides.text14}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text14
                            )}
                          >
                            {"S\u00e9lectionner..."}
                          </div>
                        ) : null}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"trailingLabelEnhancer3"}
                          data-plasmic-override={
                            overrides.trailingLabelEnhancer3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.trailingLabelEnhancer3
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"trailingLabel3"}
                              data-plasmic-override={overrides.trailingLabel3}
                              className={classNames(
                                projectcss.all,
                                sty.trailingLabel3
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyLabelMedium2"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyLabelMedium2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyLabelMedium2
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text15"}
                                data-plasmic-override={overrides.text15}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text15
                                )}
                              >
                                {"USD"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer6"}
                                  data-plasmic-override={overrides.spacer6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer6
                                  )}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"trailingArtworkContainer3"}
                          data-plasmic-override={
                            overrides.trailingArtworkContainer3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.trailingArtworkContainer3
                          )}
                        >
                          <div
                            data-plasmic-name={"trailingArtwork3"}
                            data-plasmic-override={overrides.trailingArtwork3}
                            className={classNames(
                              projectcss.all,
                              sty.trailingArtwork3
                            )}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rXlfa
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dWr83
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"selectIndicatorContainer2"}
                          data-plasmic-override={
                            overrides.selectIndicatorContainer2
                          }
                          className={classNames(
                            projectcss.all,
                            sty.selectIndicatorContainer2
                          )}
                        >
                          <div
                            data-plasmic-name={"chevronIcon2"}
                            data-plasmic-override={overrides.chevronIcon2}
                            className={classNames(
                              projectcss.all,
                              sty.chevronIcon2
                            )}
                          >
                            {false ? (
                              <Outlined6Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tdciw
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Outlined6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4YeP
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"menu"}
                    data-plasmic-override={overrides.menu}
                    className={classNames(projectcss.all, sty.menu)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"signedByBaseMenuListMedium"}
                        data-plasmic-override={
                          overrides.signedByBaseMenuListMedium
                        }
                        className={classNames(
                          projectcss.all,
                          sty.signedByBaseMenuListMedium
                        )}
                      />
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"menuItem"}
                        data-plasmic-override={overrides.menuItem}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.menuItem)}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseMenuItemSearchMediumNoneEnabled"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseMenuItemSearchMediumNoneEnabled
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseMenuItemSearchMediumNoneEnabled
                            )}
                          />
                        ) : null}
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"searchField"}
                          data-plasmic-override={overrides.searchField}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.searchField
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={
                                "signedByBaseSearchFieldMediumEnabled"
                              }
                              data-plasmic-override={
                                overrides.signedByBaseSearchFieldMediumEnabled
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseSearchFieldMediumEnabled
                              )}
                            />
                          ) : null}
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputElementLabel"}
                              data-plasmic-override={
                                overrides.inputElementLabel
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputElementLabel
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementLabelMedium"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementLabelMedium
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementLabelMedium
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"typography"}
                                data-plasmic-override={overrides.typography}
                                className={classNames(
                                  projectcss.all,
                                  sty.typography
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyLabelMedium3"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyLabelMedium3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyLabelMedium3
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text16"}
                                  data-plasmic-override={overrides.text16}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text16
                                  )}
                                >
                                  {"Label"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer7"}
                                    data-plasmic-override={overrides.spacer7}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer7
                                    )}
                                  />
                                ) : null}
                              </div>
                              {false ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"characterCountFrame"}
                                  data-plasmic-override={
                                    overrides.characterCountFrame
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.characterCountFrame
                                  )}
                                >
                                  {false ? (
                                    <div
                                      data-plasmic-name={"heart2"}
                                      data-plasmic-override={overrides.heart2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.heart2
                                      )}
                                    >
                                      {false ? (
                                        <OutlinedIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__zs2E0
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      <FilledIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__tBziQ
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  ) : null}
                                  <div
                                    data-plasmic-name={"typography2"}
                                    data-plasmic-override={
                                      overrides.typography2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.typography2
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelMedium4"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelMedium4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelMedium4
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text17"}
                                      data-plasmic-override={overrides.text17}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text17
                                      )}
                                    >
                                      {"0/100"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer8"}
                                        data-plasmic-override={
                                          overrides.spacer8
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer8
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                </Stack__>
                              ) : null}
                            </Stack__>
                          ) : null}
                          <div
                            data-plasmic-name={"inputElementTextField2"}
                            data-plasmic-override={
                              overrides.inputElementTextField2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.inputElementTextField2
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseInputElementTextFieldMediumEnabled"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseInputElementTextFieldMediumEnabled
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseInputElementTextFieldMediumEnabled
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"leadingArtworkContainer4"}
                              data-plasmic-override={
                                overrides.leadingArtworkContainer4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.leadingArtworkContainer4
                              )}
                            >
                              <div
                                data-plasmic-name={"search"}
                                data-plasmic-override={overrides.search}
                                className={classNames(
                                  projectcss.all,
                                  sty.search
                                )}
                              >
                                {false ? (
                                  <Outlined7Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__oyybm
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <Outlined7Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___4Ue7
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"leadingLabelContainer4"}
                                data-plasmic-override={
                                  overrides.leadingLabelContainer4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.leadingLabelContainer4
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={"leadingLabel4"}
                                    data-plasmic-override={
                                      overrides.leadingLabel4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.leadingLabel4
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelMedium5"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelMedium5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelMedium5
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text18"}
                                      data-plasmic-override={overrides.text18}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text18
                                      )}
                                    >
                                      {"$"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer9"}
                                        data-plasmic-override={
                                          overrides.spacer9
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer9
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"inputElementContentText4"}
                              data-plasmic-override={
                                overrides.inputElementContentText4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.inputElementContentText4
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseInputElementContentTextMediumOff2"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseInputElementContentTextMediumOff2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseInputElementContentTextMediumOff2
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text19"}
                                data-plasmic-override={overrides.text19}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text19
                                )}
                              >
                                {"Placeholder"}
                              </div>
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"trailingLabelEnhancer4"}
                                data-plasmic-override={
                                  overrides.trailingLabelEnhancer4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingLabelEnhancer4
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingLabel4"}
                                    data-plasmic-override={
                                      overrides.trailingLabel4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingLabel4
                                    )}
                                  >
                                    {false ? (
                                      <div
                                        data-plasmic-name={
                                          "signedByBaseTypographyLabelMedium6"
                                        }
                                        data-plasmic-override={
                                          overrides.signedByBaseTypographyLabelMedium6
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.signedByBaseTypographyLabelMedium6
                                        )}
                                      />
                                    ) : null}
                                    <div
                                      data-plasmic-name={"text20"}
                                      data-plasmic-override={overrides.text20}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text20
                                      )}
                                    >
                                      {"USD"}
                                    </div>
                                    {false ? (
                                      <div
                                        data-plasmic-name={"spacer10"}
                                        data-plasmic-override={
                                          overrides.spacer10
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.spacer10
                                        )}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"trailingArtworkContainer4"}
                                data-plasmic-override={
                                  overrides.trailingArtworkContainer4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.trailingArtworkContainer4
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={"trailingArtwork4"}
                                    data-plasmic-override={
                                      overrides.trailingArtwork4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.trailingArtwork4
                                    )}
                                  >
                                    {false ? (
                                      <Outlined5Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__qnLwU
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    <Filled4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__g8YCs
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputElementHint2"}
                              data-plasmic-override={
                                overrides.inputElementHint2
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputElementHint2
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={"heart3"}
                                  data-plasmic-override={overrides.heart3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.heart3
                                  )}
                                >
                                  {false ? (
                                    <Outlined4Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__rNfPx
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  <Filled3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__h0EBs
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}
                              <div
                                data-plasmic-name={"hint2"}
                                data-plasmic-override={overrides.hint2}
                                className={classNames(
                                  projectcss.all,
                                  sty.hint2
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyParagraphSmall2"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyParagraphSmall2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyParagraphSmall2
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text21"}
                                  data-plasmic-override={overrides.text21}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text21
                                  )}
                                >
                                  {"Hint"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer29"}
                                    data-plasmic-override={overrides.spacer29}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer29
                                    )}
                                  />
                                ) : null}
                              </div>
                            </Stack__>
                          ) : null}
                        </Stack__>
                      </Stack__>
                    ) : null}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"menuItem2"}
                      data-plasmic-override={overrides.menuItem2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.menuItem2)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseMenuItemOptionMediumStandardEnabled"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseMenuItemOptionMediumStandardEnabled
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseMenuItemOptionMediumStandardEnabled
                          )}
                        />
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={
                            "menuItemControlMediumCheckboxUnchecked"
                          }
                          data-plasmic-override={
                            overrides.menuItemControlMediumCheckboxUnchecked
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.menuItemControlMediumCheckboxUnchecked
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={
                                "signedByBaseMenuItemControlMediumCheckboxUnchecked"
                              }
                              data-plasmic-override={
                                overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseMenuItemControlMediumCheckboxUnchecked
                              )}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"icon"}
                            data-plasmic-override={overrides.icon}
                            className={classNames(projectcss.all, sty.icon)}
                          >
                            {false ? (
                              <Outlined8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___9Y9Rk
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Outlined8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mno6Y
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"leadingEnhancer"}
                          data-plasmic-override={overrides.leadingEnhancer}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.leadingEnhancer
                          )}
                        >
                          <div
                            data-plasmic-name={"heart4"}
                            data-plasmic-override={overrides.heart4}
                            className={classNames(projectcss.all, sty.heart4)}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__x6JK2
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kEhc2
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"textFrame"}
                        data-plasmic-override={overrides.textFrame}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.textFrame)}
                      >
                        <div
                          data-plasmic-name={"leadingText"}
                          data-plasmic-override={overrides.leadingText}
                          className={classNames(
                            projectcss.all,
                            sty.leadingText
                          )}
                        >
                          <div
                            data-plasmic-name={"typography3"}
                            data-plasmic-override={overrides.typography3}
                            className={classNames(
                              projectcss.all,
                              sty.typography3
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyParagraphMedium"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyParagraphMedium
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyParagraphMedium
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text22"}
                              data-plasmic-override={overrides.text22}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text22
                              )}
                            >
                              {"Mod\u00e8le de concert 20h"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer11"}
                                data-plasmic-override={overrides.spacer11}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer11
                                )}
                              />
                            ) : null}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typography4"}
                              data-plasmic-override={overrides.typography4}
                              className={classNames(
                                projectcss.all,
                                sty.typography4
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyParagraphMedium2"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyParagraphMedium2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyParagraphMedium2
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text23"}
                                data-plasmic-override={overrides.text23}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text23
                                )}
                              >
                                {"Supporting text"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer12"}
                                  data-plasmic-override={overrides.spacer12}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer12
                                  )}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"typography5"}
                            data-plasmic-override={overrides.typography5}
                            className={classNames(
                              projectcss.all,
                              sty.typography5
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyParagraphMedium3"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyParagraphMedium3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyParagraphMedium3
                                )}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ym6C5
                              )}
                            >
                              {"Text"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer13"}
                                data-plasmic-override={overrides.spacer13}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer13
                                )}
                              />
                            ) : null}
                          </div>
                        ) : null}
                      </Stack__>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"trailingEnhancer"}
                          data-plasmic-override={overrides.trailingEnhancer}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.trailingEnhancer
                          )}
                        >
                          <div
                            data-plasmic-name={"heart5"}
                            data-plasmic-override={overrides.heart5}
                            className={classNames(projectcss.all, sty.heart5)}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gwGYu
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__cpOrA
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"menuItem3"}
                      data-plasmic-override={overrides.menuItem3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.menuItem3)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseMenuItemOptionMediumStandardEnabled2"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseMenuItemOptionMediumStandardEnabled2
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseMenuItemOptionMediumStandardEnabled2
                          )}
                        />
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={
                            "menuItemControlMediumCheckboxUnchecked2"
                          }
                          data-plasmic-override={
                            overrides.menuItemControlMediumCheckboxUnchecked2
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.menuItemControlMediumCheckboxUnchecked2
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={
                                "signedByBaseMenuItemControlMediumCheckboxUnchecked2"
                              }
                              data-plasmic-override={
                                overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseMenuItemControlMediumCheckboxUnchecked2
                              )}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"icon2"}
                            data-plasmic-override={overrides.icon2}
                            className={classNames(projectcss.all, sty.icon2)}
                          >
                            {false ? (
                              <Outlined8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___4IN28
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Outlined8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__k6A0F
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"leadingEnhancer2"}
                          data-plasmic-override={overrides.leadingEnhancer2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.leadingEnhancer2
                          )}
                        >
                          <div
                            data-plasmic-name={"heart6"}
                            data-plasmic-override={overrides.heart6}
                            className={classNames(projectcss.all, sty.heart6)}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__iZUe
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xLiO
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"textFrame2"}
                        data-plasmic-override={overrides.textFrame2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.textFrame2)}
                      >
                        <div
                          data-plasmic-name={"leadingText2"}
                          data-plasmic-override={overrides.leadingText2}
                          className={classNames(
                            projectcss.all,
                            sty.leadingText2
                          )}
                        >
                          <div
                            data-plasmic-name={"typography6"}
                            data-plasmic-override={overrides.typography6}
                            className={classNames(
                              projectcss.all,
                              sty.typography6
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyParagraphMedium4"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyParagraphMedium4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyParagraphMedium4
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text24"}
                              data-plasmic-override={overrides.text24}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text24
                              )}
                            >
                              {"Mod\u00e8le de match 21h"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer14"}
                                data-plasmic-override={overrides.spacer14}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer14
                                )}
                              />
                            ) : null}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typography7"}
                              data-plasmic-override={overrides.typography7}
                              className={classNames(
                                projectcss.all,
                                sty.typography7
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyParagraphMedium5"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyParagraphMedium5
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyParagraphMedium5
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text25"}
                                data-plasmic-override={overrides.text25}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text25
                                )}
                              >
                                {"Supporting text"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer15"}
                                  data-plasmic-override={overrides.spacer15}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer15
                                  )}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"typography8"}
                            data-plasmic-override={overrides.typography8}
                            className={classNames(
                              projectcss.all,
                              sty.typography8
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyParagraphMedium6"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyParagraphMedium6
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyParagraphMedium6
                                )}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lIjm
                              )}
                            >
                              {"Text"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer16"}
                                data-plasmic-override={overrides.spacer16}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer16
                                )}
                              />
                            ) : null}
                          </div>
                        ) : null}
                      </Stack__>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"trailingEnhancer2"}
                          data-plasmic-override={overrides.trailingEnhancer2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.trailingEnhancer2
                          )}
                        >
                          <div
                            data-plasmic-name={"checkmarkSmall"}
                            data-plasmic-override={overrides.checkmarkSmall}
                            className={classNames(
                              projectcss.all,
                              sty.checkmarkSmall
                            )}
                          >
                            {false ? (
                              <Outlined9Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gI1Pj
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Outlined9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9ENkz
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"menuItem4"}
                      data-plasmic-override={overrides.menuItem4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.menuItem4)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseMenuItemOptionMediumStandardEnabled3"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseMenuItemOptionMediumStandardEnabled3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseMenuItemOptionMediumStandardEnabled3
                          )}
                        />
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={
                            "menuItemControlMediumCheckboxUnchecked3"
                          }
                          data-plasmic-override={
                            overrides.menuItemControlMediumCheckboxUnchecked3
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.menuItemControlMediumCheckboxUnchecked3
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={
                                "signedByBaseMenuItemControlMediumCheckboxUnchecked3"
                              }
                              data-plasmic-override={
                                overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.signedByBaseMenuItemControlMediumCheckboxUnchecked3
                              )}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"icon3"}
                            data-plasmic-override={overrides.icon3}
                            className={classNames(projectcss.all, sty.icon3)}
                          >
                            {false ? (
                              <Outlined8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lQz4
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Outlined8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__aTBiv
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"leadingEnhancer3"}
                          data-plasmic-override={overrides.leadingEnhancer3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.leadingEnhancer3
                          )}
                        >
                          <div
                            data-plasmic-name={"heart7"}
                            data-plasmic-override={overrides.heart7}
                            className={classNames(projectcss.all, sty.heart7)}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xmNaD
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uvbE
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                      <IcRoundPlusIcon
                        className={classNames(projectcss.all, sty.svg__bu4Dt)}
                        role={"img"}
                      />

                      <Stack__
                        as={"div"}
                        data-plasmic-name={"textFrame3"}
                        data-plasmic-override={overrides.textFrame3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.textFrame3)}
                      >
                        <div
                          data-plasmic-name={"leadingText3"}
                          data-plasmic-override={overrides.leadingText3}
                          className={classNames(
                            projectcss.all,
                            sty.leadingText3
                          )}
                        >
                          <div
                            data-plasmic-name={"typography9"}
                            data-plasmic-override={overrides.typography9}
                            className={classNames(
                              projectcss.all,
                              sty.typography9
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyParagraphMedium7"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyParagraphMedium7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyParagraphMedium7
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text26"}
                              data-plasmic-override={overrides.text26}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text26
                              )}
                            >
                              {"Dispositif vierge"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer17"}
                                data-plasmic-override={overrides.spacer17}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer17
                                )}
                              />
                            ) : null}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typography10"}
                              data-plasmic-override={overrides.typography10}
                              className={classNames(
                                projectcss.all,
                                sty.typography10
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyParagraphMedium8"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyParagraphMedium8
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyParagraphMedium8
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text27"}
                                data-plasmic-override={overrides.text27}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text27
                                )}
                              >
                                {"Supporting text"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer18"}
                                  data-plasmic-override={overrides.spacer18}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer18
                                  )}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"typography11"}
                            data-plasmic-override={overrides.typography11}
                            className={classNames(
                              projectcss.all,
                              sty.typography11
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseTypographyParagraphMedium9"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseTypographyParagraphMedium9
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseTypographyParagraphMedium9
                                )}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sv3Nc
                              )}
                            >
                              {"Text"}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"spacer19"}
                                data-plasmic-override={overrides.spacer19}
                                className={classNames(
                                  projectcss.all,
                                  sty.spacer19
                                )}
                              />
                            ) : null}
                          </div>
                        ) : null}
                      </Stack__>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"trailingEnhancer3"}
                          data-plasmic-override={overrides.trailingEnhancer3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.trailingEnhancer3
                          )}
                        >
                          <div
                            data-plasmic-name={"heart8"}
                            data-plasmic-override={overrides.heart8}
                            className={classNames(projectcss.all, sty.heart8)}
                          >
                            {false ? (
                              <Outlined5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__aTim3
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Filled4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__p7Xtx
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                      ) : null}
                    </Stack__>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"menuItem5"}
                        data-plasmic-override={overrides.menuItem5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.menuItem5)}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseMenuItemOptionMediumStandardEnabled4"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseMenuItemOptionMediumStandardEnabled4
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseMenuItemOptionMediumStandardEnabled4
                            )}
                          />
                        ) : null}
                        {false ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={
                              "menuItemControlMediumCheckboxUnchecked4"
                            }
                            data-plasmic-override={
                              overrides.menuItemControlMediumCheckboxUnchecked4
                            }
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.menuItemControlMediumCheckboxUnchecked4
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={
                                  "signedByBaseMenuItemControlMediumCheckboxUnchecked4"
                                }
                                data-plasmic-override={
                                  overrides.signedByBaseMenuItemControlMediumCheckboxUnchecked4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.signedByBaseMenuItemControlMediumCheckboxUnchecked4
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"icon4"}
                              data-plasmic-override={overrides.icon4}
                              className={classNames(projectcss.all, sty.icon4)}
                            >
                              {false ? (
                                <Outlined8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__uTVpv
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <Outlined8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__x4RK
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        ) : null}
                        {false ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"leadingEnhancer4"}
                            data-plasmic-override={overrides.leadingEnhancer4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.leadingEnhancer4
                            )}
                          >
                            <div
                              data-plasmic-name={"heart9"}
                              data-plasmic-override={overrides.heart9}
                              className={classNames(projectcss.all, sty.heart9)}
                            >
                              {false ? (
                                <Outlined5Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vTRaI
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <Filled4Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xjqUq
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        ) : null}
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"textFrame4"}
                          data-plasmic-override={overrides.textFrame4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.textFrame4)}
                        >
                          <div
                            data-plasmic-name={"leadingText4"}
                            data-plasmic-override={overrides.leadingText4}
                            className={classNames(
                              projectcss.all,
                              sty.leadingText4
                            )}
                          >
                            <div
                              data-plasmic-name={"typography12"}
                              data-plasmic-override={overrides.typography12}
                              className={classNames(
                                projectcss.all,
                                sty.typography12
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyParagraphMedium10"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyParagraphMedium10
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyParagraphMedium10
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"text28"}
                                data-plasmic-override={overrides.text28}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text28
                                )}
                              >
                                {"Options"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer20"}
                                  data-plasmic-override={overrides.spacer20}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer20
                                  )}
                                />
                              ) : null}
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"typography13"}
                                data-plasmic-override={overrides.typography13}
                                className={classNames(
                                  projectcss.all,
                                  sty.typography13
                                )}
                              >
                                {false ? (
                                  <div
                                    data-plasmic-name={
                                      "signedByBaseTypographyParagraphMedium11"
                                    }
                                    data-plasmic-override={
                                      overrides.signedByBaseTypographyParagraphMedium11
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.signedByBaseTypographyParagraphMedium11
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"text29"}
                                  data-plasmic-override={overrides.text29}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text29
                                  )}
                                >
                                  {"Supporting text"}
                                </div>
                                {false ? (
                                  <div
                                    data-plasmic-name={"spacer21"}
                                    data-plasmic-override={overrides.spacer21}
                                    className={classNames(
                                      projectcss.all,
                                      sty.spacer21
                                    )}
                                  />
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typography14"}
                              data-plasmic-override={overrides.typography14}
                              className={classNames(
                                projectcss.all,
                                sty.typography14
                              )}
                            >
                              {false ? (
                                <div
                                  data-plasmic-name={
                                    "signedByBaseTypographyParagraphMedium12"
                                  }
                                  data-plasmic-override={
                                    overrides.signedByBaseTypographyParagraphMedium12
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.signedByBaseTypographyParagraphMedium12
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zruvC
                                )}
                              >
                                {"Text"}
                              </div>
                              {false ? (
                                <div
                                  data-plasmic-name={"spacer22"}
                                  data-plasmic-override={overrides.spacer22}
                                  className={classNames(
                                    projectcss.all,
                                    sty.spacer22
                                  )}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </Stack__>
                        {false ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"trailingEnhancer4"}
                            data-plasmic-override={overrides.trailingEnhancer4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.trailingEnhancer4
                            )}
                          >
                            <div
                              data-plasmic-name={"heart10"}
                              data-plasmic-override={overrides.heart10}
                              className={classNames(
                                projectcss.all,
                                sty.heart10
                              )}
                            >
                              {false ? (
                                <Outlined5Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__rTWV
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <Filled4Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__s3H
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        ) : null}
                      </Stack__>
                    ) : null}
                    <div
                      data-plasmic-name={"scrollBar"}
                      data-plasmic-override={overrides.scrollBar}
                      className={classNames(projectcss.all, sty.scrollBar)}
                    />
                  </div>
                </div>
              </Stack__>
            ) : null}
            <DropDown
              data-plasmic-name={"model"}
              data-plasmic-override={overrides.model}
              check={false}
              className={classNames("__wab_instance", sty.model)}
              label={"Mod\u00e8le de Runsheet & Dispositif*"}
              options={["Default", "Special"]}
              showLabel={true}
              state={"default"}
              type={"default"}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"buttons"}
              data-plasmic-override={overrides.buttons}
              hasGap={true}
              className={classNames(projectcss.all, sty.buttons)}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y3NmC
                    )}
                  >
                    {"Cr\u00e9er"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["useIntegration"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["useIntegration"] != null &&
                    typeof $steps["useIntegration"] === "object" &&
                    typeof $steps["useIntegration"].then === "function"
                  ) {
                    $steps["useIntegration"] = await $steps["useIntegration"];
                  }
                }}
              />

              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1073713924"}
                  data-plasmic-override={overrides.frame1073713924}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1073713924)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__s8CG5)}
                  >
                    <Line9Icon
                      className={classNames(projectcss.all, sty.svg__kn5)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fJqca
                    )}
                  >
                    {"OU"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zthq2)}
                  >
                    <Line9Icon
                      className={classNames(projectcss.all, sty.svg__y5CHp)}
                      role={"img"}
                    />
                  </div>
                </Stack__>
              ) : null}
              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1073713930"}
                  data-plasmic-override={overrides.frame1073713930}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1073713930)}
                >
                  <Button
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button3)}
                  >
                    <IcTwotoneAppleIcon
                      className={classNames(projectcss.all, sty.svg__ykZtl)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bJc0M
                      )}
                    >
                      {"Apple"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button4)}
                  >
                    <MdiFacebookIcon
                      className={classNames(projectcss.all, sty.svg__igJc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cPIbk
                      )}
                    >
                      {"Facebook"}
                    </div>
                  </Stack__>
                </Stack__>
              ) : null}
            </Stack__>
          </Stack__>
        </React.Fragment>
      }
      footer={
        <div className={classNames(projectcss.all, sty.freeBox__jBhPp)} />
      }
      heading={
        <div
          data-plasmic-name={"frame1437254016"}
          data-plasmic-override={overrides.frame1437254016}
          className={classNames(projectcss.all, sty.frame1437254016)}
        >
          <div
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.mode === "update"
                    ? "Mettre à jour variable"
                    : "Nouvelle variable";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Nouvelle prestation";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame1437254019"}
            data-plasmic-override={overrides.frame1437254019}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1437254019)}
          >
            <LinkSimpleIcon
              className={classNames(projectcss.all, sty.svg__rAxUu)}
              role={"img"}
            />

            <XIcon
              className={classNames(projectcss.all, sty.svg__t1A0)}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewOperation"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: false,
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewOperation"] != null &&
                  typeof $steps["updateNewOperation"] === "object" &&
                  typeof $steps["updateNewOperation"].then === "function"
                ) {
                  $steps["updateNewOperation"] = await $steps[
                    "updateNewOperation"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      }
      isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
      noTrigger={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modal", "isOpen"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      showFooter={false}
      trigger={null}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modal: [
    "modal",
    "frame1437254016",
    "name",
    "frame1437254019",
    "form",
    "select2",
    "input2",
    "input3",
    "colorPicker",
    "content",
    "titre",
    "texinput2",
    "date",
    "label6",
    "timePicker",
    "type",
    "budget",
    "comments",
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar",
    "model",
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4"
  ],
  frame1437254016: ["frame1437254016", "name", "frame1437254019"],
  name: ["name"],
  frame1437254019: ["frame1437254019"],
  form: ["form", "select2", "input2", "input3", "colorPicker"],
  select2: ["select2"],
  input2: ["input2"],
  input3: ["input3"],
  colorPicker: ["colorPicker"],
  content: [
    "content",
    "titre",
    "texinput2",
    "date",
    "label6",
    "timePicker",
    "type",
    "budget",
    "comments",
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar",
    "model",
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4"
  ],
  titre: ["titre"],
  texinput2: ["texinput2"],
  date: ["date", "label6", "timePicker"],
  label6: ["label6"],
  timePicker: ["timePicker"],
  type: ["type"],
  budget: ["budget"],
  comments: ["comments"],
  input5: [
    "input5",
    "name2",
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28",
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar"
  ],
  name2: ["name2"],
  datePickerWeb: [
    "datePickerWeb",
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28"
  ],
  inputSelect: [
    "inputSelect",
    "signedByBaseFieldGroupSmall",
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon",
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28"
  ],
  signedByBaseFieldGroupSmall: ["signedByBaseFieldGroupSmall"],
  endDateCalendar: [
    "endDateCalendar",
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork",
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon"
  ],
  inputElementTextField: [
    "inputElementTextField",
    "signedByBaseInputElementTextFieldSmallEnabled",
    "leadingArtworkContainer",
    "leadingArtwork",
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer",
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6",
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2",
    "trailingArtworkContainer",
    "trailingArtwork"
  ],
  signedByBaseInputElementTextFieldSmallEnabled: [
    "signedByBaseInputElementTextFieldSmallEnabled"
  ],
  leadingArtworkContainer: ["leadingArtworkContainer", "leadingArtwork"],
  leadingArtwork: ["leadingArtwork"],
  leadingLabelContainer: [
    "leadingLabelContainer",
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer"
  ],
  leadingLabel: [
    "leadingLabel",
    "signedByBaseTypographyLabelSmall",
    "text5",
    "spacer"
  ],
  signedByBaseTypographyLabelSmall: ["signedByBaseTypographyLabelSmall"],
  text5: ["text5"],
  spacer: ["spacer"],
  inputElementContentText: [
    "inputElementContentText",
    "signedByBaseInputElementContentTextSmallOff",
    "text6"
  ],
  signedByBaseInputElementContentTextSmallOff: [
    "signedByBaseInputElementContentTextSmallOff"
  ],
  text6: ["text6"],
  trailingLabelEnhancer: [
    "trailingLabelEnhancer",
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2"
  ],
  trailingLabel: [
    "trailingLabel",
    "signedByBaseTypographyLabelSmall2",
    "text7",
    "spacer2"
  ],
  signedByBaseTypographyLabelSmall2: ["signedByBaseTypographyLabelSmall2"],
  text7: ["text7"],
  spacer2: ["spacer2"],
  trailingArtworkContainer: ["trailingArtworkContainer", "trailingArtwork"],
  trailingArtwork: ["trailingArtwork"],
  calendar: [
    "calendar",
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled",
    "leadingArtworkContainer2",
    "text8",
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3",
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10",
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4",
    "trailingArtworkContainer2",
    "trailingArtwork2",
    "selectIndicatorContainer",
    "chevronIcon"
  ],
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled: [
    "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled"
  ],
  leadingArtworkContainer2: ["leadingArtworkContainer2", "text8"],
  text8: ["text8"],
  leadingLabelContainer2: [
    "leadingLabelContainer2",
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3"
  ],
  leadingLabel2: [
    "leadingLabel2",
    "signedByBaseTypographyLabelXSmall",
    "text9",
    "spacer3"
  ],
  signedByBaseTypographyLabelXSmall: ["signedByBaseTypographyLabelXSmall"],
  text9: ["text9"],
  spacer3: ["spacer3"],
  inputElementContentText2: [
    "inputElementContentText2",
    "signedByBaseInputElementContentTextXSmallWebOff",
    "text10"
  ],
  signedByBaseInputElementContentTextXSmallWebOff: [
    "signedByBaseInputElementContentTextXSmallWebOff"
  ],
  text10: ["text10"],
  trailingLabelEnhancer2: [
    "trailingLabelEnhancer2",
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4"
  ],
  trailingLabel2: [
    "trailingLabel2",
    "signedByBaseTypographyLabelXSmall2",
    "text11",
    "spacer4"
  ],
  signedByBaseTypographyLabelXSmall2: ["signedByBaseTypographyLabelXSmall2"],
  text11: ["text11"],
  spacer4: ["spacer4"],
  trailingArtworkContainer2: ["trailingArtworkContainer2", "trailingArtwork2"],
  trailingArtwork2: ["trailingArtwork2"],
  selectIndicatorContainer: ["selectIndicatorContainer", "chevronIcon"],
  chevronIcon: ["chevronIcon"],
  inputElementHint: [
    "inputElementHint",
    "heart",
    "hint",
    "signedByBaseTypographyParagraphSmall",
    "text12",
    "spacer28"
  ],
  heart: ["heart"],
  hint: ["hint", "signedByBaseTypographyParagraphSmall", "text12", "spacer28"],
  signedByBaseTypographyParagraphSmall: [
    "signedByBaseTypographyParagraphSmall"
  ],
  text12: ["text12"],
  spacer28: ["spacer28"],
  inputElementSelect: [
    "inputElementSelect",
    "signedByBaseInputElementSelectMediumSingleDefaultActive",
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2",
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar"
  ],
  signedByBaseInputElementSelectMediumSingleDefaultActive: [
    "signedByBaseInputElementSelectMediumSingleDefaultActive"
  ],
  selectFrame: [
    "selectFrame",
    "leadingArtworkContainer3",
    "leadingArtwork2",
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5",
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14",
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6",
    "trailingArtworkContainer3",
    "trailingArtwork3",
    "selectIndicatorContainer2",
    "chevronIcon2"
  ],
  leadingArtworkContainer3: ["leadingArtworkContainer3", "leadingArtwork2"],
  leadingArtwork2: ["leadingArtwork2"],
  leadingLabelContainer3: [
    "leadingLabelContainer3",
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5"
  ],
  leadingLabel3: [
    "leadingLabel3",
    "signedByBaseTypographyLabelMedium",
    "text13",
    "spacer5"
  ],
  signedByBaseTypographyLabelMedium: ["signedByBaseTypographyLabelMedium"],
  text13: ["text13"],
  spacer5: ["spacer5"],
  inputElementContentText3: [
    "inputElementContentText3",
    "signedByBaseInputElementContentTextMediumOff",
    "text14"
  ],
  signedByBaseInputElementContentTextMediumOff: [
    "signedByBaseInputElementContentTextMediumOff"
  ],
  text14: ["text14"],
  trailingLabelEnhancer3: [
    "trailingLabelEnhancer3",
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6"
  ],
  trailingLabel3: [
    "trailingLabel3",
    "signedByBaseTypographyLabelMedium2",
    "text15",
    "spacer6"
  ],
  signedByBaseTypographyLabelMedium2: ["signedByBaseTypographyLabelMedium2"],
  text15: ["text15"],
  spacer6: ["spacer6"],
  trailingArtworkContainer3: ["trailingArtworkContainer3", "trailingArtwork3"],
  trailingArtwork3: ["trailingArtwork3"],
  selectIndicatorContainer2: ["selectIndicatorContainer2", "chevronIcon2"],
  chevronIcon2: ["chevronIcon2"],
  menu: [
    "menu",
    "signedByBaseMenuListMedium",
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29",
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5",
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall",
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8",
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10",
    "scrollBar"
  ],
  signedByBaseMenuListMedium: ["signedByBaseMenuListMedium"],
  menuItem: [
    "menuItem",
    "signedByBaseMenuItemSearchMediumNoneEnabled",
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  signedByBaseMenuItemSearchMediumNoneEnabled: [
    "signedByBaseMenuItemSearchMediumNoneEnabled"
  ],
  searchField: [
    "searchField",
    "signedByBaseSearchFieldMediumEnabled",
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8",
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4",
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  signedByBaseSearchFieldMediumEnabled: [
    "signedByBaseSearchFieldMediumEnabled"
  ],
  inputElementLabel: [
    "inputElementLabel",
    "signedByBaseInputElementLabelMedium",
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7",
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8"
  ],
  signedByBaseInputElementLabelMedium: ["signedByBaseInputElementLabelMedium"],
  typography: [
    "typography",
    "signedByBaseTypographyLabelMedium3",
    "text16",
    "spacer7"
  ],
  signedByBaseTypographyLabelMedium3: ["signedByBaseTypographyLabelMedium3"],
  text16: ["text16"],
  spacer7: ["spacer7"],
  characterCountFrame: [
    "characterCountFrame",
    "heart2",
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8"
  ],
  heart2: ["heart2"],
  typography2: [
    "typography2",
    "signedByBaseTypographyLabelMedium4",
    "text17",
    "spacer8"
  ],
  signedByBaseTypographyLabelMedium4: ["signedByBaseTypographyLabelMedium4"],
  text17: ["text17"],
  spacer8: ["spacer8"],
  inputElementTextField2: [
    "inputElementTextField2",
    "signedByBaseInputElementTextFieldMediumEnabled",
    "leadingArtworkContainer4",
    "search",
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9",
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19",
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10",
    "trailingArtworkContainer4",
    "trailingArtwork4"
  ],
  signedByBaseInputElementTextFieldMediumEnabled: [
    "signedByBaseInputElementTextFieldMediumEnabled"
  ],
  leadingArtworkContainer4: ["leadingArtworkContainer4", "search"],
  search: ["search"],
  leadingLabelContainer4: [
    "leadingLabelContainer4",
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9"
  ],
  leadingLabel4: [
    "leadingLabel4",
    "signedByBaseTypographyLabelMedium5",
    "text18",
    "spacer9"
  ],
  signedByBaseTypographyLabelMedium5: ["signedByBaseTypographyLabelMedium5"],
  text18: ["text18"],
  spacer9: ["spacer9"],
  inputElementContentText4: [
    "inputElementContentText4",
    "signedByBaseInputElementContentTextMediumOff2",
    "text19"
  ],
  signedByBaseInputElementContentTextMediumOff2: [
    "signedByBaseInputElementContentTextMediumOff2"
  ],
  text19: ["text19"],
  trailingLabelEnhancer4: [
    "trailingLabelEnhancer4",
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10"
  ],
  trailingLabel4: [
    "trailingLabel4",
    "signedByBaseTypographyLabelMedium6",
    "text20",
    "spacer10"
  ],
  signedByBaseTypographyLabelMedium6: ["signedByBaseTypographyLabelMedium6"],
  text20: ["text20"],
  spacer10: ["spacer10"],
  trailingArtworkContainer4: ["trailingArtworkContainer4", "trailingArtwork4"],
  trailingArtwork4: ["trailingArtwork4"],
  inputElementHint2: [
    "inputElementHint2",
    "heart3",
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  heart3: ["heart3"],
  hint2: [
    "hint2",
    "signedByBaseTypographyParagraphSmall2",
    "text21",
    "spacer29"
  ],
  signedByBaseTypographyParagraphSmall2: [
    "signedByBaseTypographyParagraphSmall2"
  ],
  text21: ["text21"],
  spacer29: ["spacer29"],
  menuItem2: [
    "menuItem2",
    "signedByBaseMenuItemOptionMediumStandardEnabled",
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon",
    "leadingEnhancer",
    "heart4",
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13",
    "trailingEnhancer",
    "heart5"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled: [
    "signedByBaseMenuItemOptionMediumStandardEnabled"
  ],
  menuItemControlMediumCheckboxUnchecked: [
    "menuItemControlMediumCheckboxUnchecked",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked",
    "icon"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked"
  ],
  icon: ["icon"],
  leadingEnhancer: ["leadingEnhancer", "heart4"],
  heart4: ["heart4"],
  textFrame: [
    "textFrame",
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12",
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13"
  ],
  leadingText: [
    "leadingText",
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11",
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12"
  ],
  typography3: [
    "typography3",
    "signedByBaseTypographyParagraphMedium",
    "text22",
    "spacer11"
  ],
  signedByBaseTypographyParagraphMedium: [
    "signedByBaseTypographyParagraphMedium"
  ],
  text22: ["text22"],
  spacer11: ["spacer11"],
  typography4: [
    "typography4",
    "signedByBaseTypographyParagraphMedium2",
    "text23",
    "spacer12"
  ],
  signedByBaseTypographyParagraphMedium2: [
    "signedByBaseTypographyParagraphMedium2"
  ],
  text23: ["text23"],
  spacer12: ["spacer12"],
  typography5: [
    "typography5",
    "signedByBaseTypographyParagraphMedium3",
    "spacer13"
  ],
  signedByBaseTypographyParagraphMedium3: [
    "signedByBaseTypographyParagraphMedium3"
  ],
  spacer13: ["spacer13"],
  trailingEnhancer: ["trailingEnhancer", "heart5"],
  heart5: ["heart5"],
  menuItem3: [
    "menuItem3",
    "signedByBaseMenuItemOptionMediumStandardEnabled2",
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2",
    "leadingEnhancer2",
    "heart6",
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16",
    "trailingEnhancer2",
    "checkmarkSmall"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled2: [
    "signedByBaseMenuItemOptionMediumStandardEnabled2"
  ],
  menuItemControlMediumCheckboxUnchecked2: [
    "menuItemControlMediumCheckboxUnchecked2",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2",
    "icon2"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked2: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked2"
  ],
  icon2: ["icon2"],
  leadingEnhancer2: ["leadingEnhancer2", "heart6"],
  heart6: ["heart6"],
  textFrame2: [
    "textFrame2",
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15",
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16"
  ],
  leadingText2: [
    "leadingText2",
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14",
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15"
  ],
  typography6: [
    "typography6",
    "signedByBaseTypographyParagraphMedium4",
    "text24",
    "spacer14"
  ],
  signedByBaseTypographyParagraphMedium4: [
    "signedByBaseTypographyParagraphMedium4"
  ],
  text24: ["text24"],
  spacer14: ["spacer14"],
  typography7: [
    "typography7",
    "signedByBaseTypographyParagraphMedium5",
    "text25",
    "spacer15"
  ],
  signedByBaseTypographyParagraphMedium5: [
    "signedByBaseTypographyParagraphMedium5"
  ],
  text25: ["text25"],
  spacer15: ["spacer15"],
  typography8: [
    "typography8",
    "signedByBaseTypographyParagraphMedium6",
    "spacer16"
  ],
  signedByBaseTypographyParagraphMedium6: [
    "signedByBaseTypographyParagraphMedium6"
  ],
  spacer16: ["spacer16"],
  trailingEnhancer2: ["trailingEnhancer2", "checkmarkSmall"],
  checkmarkSmall: ["checkmarkSmall"],
  menuItem4: [
    "menuItem4",
    "signedByBaseMenuItemOptionMediumStandardEnabled3",
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3",
    "leadingEnhancer3",
    "heart7",
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19",
    "trailingEnhancer3",
    "heart8"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled3: [
    "signedByBaseMenuItemOptionMediumStandardEnabled3"
  ],
  menuItemControlMediumCheckboxUnchecked3: [
    "menuItemControlMediumCheckboxUnchecked3",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3",
    "icon3"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked3: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked3"
  ],
  icon3: ["icon3"],
  leadingEnhancer3: ["leadingEnhancer3", "heart7"],
  heart7: ["heart7"],
  textFrame3: [
    "textFrame3",
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18",
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19"
  ],
  leadingText3: [
    "leadingText3",
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17",
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18"
  ],
  typography9: [
    "typography9",
    "signedByBaseTypographyParagraphMedium7",
    "text26",
    "spacer17"
  ],
  signedByBaseTypographyParagraphMedium7: [
    "signedByBaseTypographyParagraphMedium7"
  ],
  text26: ["text26"],
  spacer17: ["spacer17"],
  typography10: [
    "typography10",
    "signedByBaseTypographyParagraphMedium8",
    "text27",
    "spacer18"
  ],
  signedByBaseTypographyParagraphMedium8: [
    "signedByBaseTypographyParagraphMedium8"
  ],
  text27: ["text27"],
  spacer18: ["spacer18"],
  typography11: [
    "typography11",
    "signedByBaseTypographyParagraphMedium9",
    "spacer19"
  ],
  signedByBaseTypographyParagraphMedium9: [
    "signedByBaseTypographyParagraphMedium9"
  ],
  spacer19: ["spacer19"],
  trailingEnhancer3: ["trailingEnhancer3", "heart8"],
  heart8: ["heart8"],
  menuItem5: [
    "menuItem5",
    "signedByBaseMenuItemOptionMediumStandardEnabled4",
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4",
    "leadingEnhancer4",
    "heart9",
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22",
    "trailingEnhancer4",
    "heart10"
  ],
  signedByBaseMenuItemOptionMediumStandardEnabled4: [
    "signedByBaseMenuItemOptionMediumStandardEnabled4"
  ],
  menuItemControlMediumCheckboxUnchecked4: [
    "menuItemControlMediumCheckboxUnchecked4",
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4",
    "icon4"
  ],
  signedByBaseMenuItemControlMediumCheckboxUnchecked4: [
    "signedByBaseMenuItemControlMediumCheckboxUnchecked4"
  ],
  icon4: ["icon4"],
  leadingEnhancer4: ["leadingEnhancer4", "heart9"],
  heart9: ["heart9"],
  textFrame4: [
    "textFrame4",
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21",
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22"
  ],
  leadingText4: [
    "leadingText4",
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20",
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21"
  ],
  typography12: [
    "typography12",
    "signedByBaseTypographyParagraphMedium10",
    "text28",
    "spacer20"
  ],
  signedByBaseTypographyParagraphMedium10: [
    "signedByBaseTypographyParagraphMedium10"
  ],
  text28: ["text28"],
  spacer20: ["spacer20"],
  typography13: [
    "typography13",
    "signedByBaseTypographyParagraphMedium11",
    "text29",
    "spacer21"
  ],
  signedByBaseTypographyParagraphMedium11: [
    "signedByBaseTypographyParagraphMedium11"
  ],
  text29: ["text29"],
  spacer21: ["spacer21"],
  typography14: [
    "typography14",
    "signedByBaseTypographyParagraphMedium12",
    "spacer22"
  ],
  signedByBaseTypographyParagraphMedium12: [
    "signedByBaseTypographyParagraphMedium12"
  ],
  spacer22: ["spacer22"],
  trailingEnhancer4: ["trailingEnhancer4", "heart10"],
  heart10: ["heart10"],
  scrollBar: ["scrollBar"],
  model: ["model"],
  buttons: [
    "buttons",
    "button",
    "frame1073713924",
    "frame1073713930",
    "button2",
    "button3",
    "button4"
  ],
  button: ["button"],
  frame1073713924: ["frame1073713924"],
  frame1073713930: ["frame1073713930", "button2", "button3", "button4"],
  button2: ["button2"],
  button3: ["button3"],
  button4: ["button4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modal: typeof Modal;
  frame1437254016: "div";
  name: "div";
  frame1437254019: "div";
  form: typeof FormWrapper;
  select2: typeof AntdSelect;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  colorPicker: typeof AntdColorPicker;
  content: "div";
  titre: typeof TextInput;
  texinput2: typeof SitexTextInput;
  date: "div";
  label6: "div";
  timePicker: typeof AntdDatePicker;
  type: typeof DropDown;
  budget: typeof TextInput;
  comments: typeof TextInput;
  input5: "div";
  name2: "div";
  datePickerWeb: "div";
  inputSelect: "div";
  signedByBaseFieldGroupSmall: "div";
  endDateCalendar: "div";
  inputElementTextField: "div";
  signedByBaseInputElementTextFieldSmallEnabled: "div";
  leadingArtworkContainer: "div";
  leadingArtwork: "div";
  leadingLabelContainer: "div";
  leadingLabel: "div";
  signedByBaseTypographyLabelSmall: "div";
  text5: "div";
  spacer: "div";
  inputElementContentText: "div";
  signedByBaseInputElementContentTextSmallOff: "div";
  text6: "div";
  trailingLabelEnhancer: "div";
  trailingLabel: "div";
  signedByBaseTypographyLabelSmall2: "div";
  text7: "div";
  spacer2: "div";
  trailingArtworkContainer: "div";
  trailingArtwork: "div";
  calendar: "div";
  signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled: "div";
  leadingArtworkContainer2: "div";
  text8: "div";
  leadingLabelContainer2: "div";
  leadingLabel2: "div";
  signedByBaseTypographyLabelXSmall: "div";
  text9: "div";
  spacer3: "div";
  inputElementContentText2: "div";
  signedByBaseInputElementContentTextXSmallWebOff: "div";
  text10: "div";
  trailingLabelEnhancer2: "div";
  trailingLabel2: "div";
  signedByBaseTypographyLabelXSmall2: "div";
  text11: "div";
  spacer4: "div";
  trailingArtworkContainer2: "div";
  trailingArtwork2: "div";
  selectIndicatorContainer: "div";
  chevronIcon: "div";
  inputElementHint: "div";
  heart: "div";
  hint: "div";
  signedByBaseTypographyParagraphSmall: "div";
  text12: "div";
  spacer28: "div";
  inputElementSelect: "div";
  signedByBaseInputElementSelectMediumSingleDefaultActive: "div";
  selectFrame: "div";
  leadingArtworkContainer3: "div";
  leadingArtwork2: "div";
  leadingLabelContainer3: "div";
  leadingLabel3: "div";
  signedByBaseTypographyLabelMedium: "div";
  text13: "div";
  spacer5: "div";
  inputElementContentText3: "div";
  signedByBaseInputElementContentTextMediumOff: "div";
  text14: "div";
  trailingLabelEnhancer3: "div";
  trailingLabel3: "div";
  signedByBaseTypographyLabelMedium2: "div";
  text15: "div";
  spacer6: "div";
  trailingArtworkContainer3: "div";
  trailingArtwork3: "div";
  selectIndicatorContainer2: "div";
  chevronIcon2: "div";
  menu: "div";
  signedByBaseMenuListMedium: "div";
  menuItem: "div";
  signedByBaseMenuItemSearchMediumNoneEnabled: "div";
  searchField: "div";
  signedByBaseSearchFieldMediumEnabled: "div";
  inputElementLabel: "div";
  signedByBaseInputElementLabelMedium: "div";
  typography: "div";
  signedByBaseTypographyLabelMedium3: "div";
  text16: "div";
  spacer7: "div";
  characterCountFrame: "div";
  heart2: "div";
  typography2: "div";
  signedByBaseTypographyLabelMedium4: "div";
  text17: "div";
  spacer8: "div";
  inputElementTextField2: "div";
  signedByBaseInputElementTextFieldMediumEnabled: "div";
  leadingArtworkContainer4: "div";
  search: "div";
  leadingLabelContainer4: "div";
  leadingLabel4: "div";
  signedByBaseTypographyLabelMedium5: "div";
  text18: "div";
  spacer9: "div";
  inputElementContentText4: "div";
  signedByBaseInputElementContentTextMediumOff2: "div";
  text19: "div";
  trailingLabelEnhancer4: "div";
  trailingLabel4: "div";
  signedByBaseTypographyLabelMedium6: "div";
  text20: "div";
  spacer10: "div";
  trailingArtworkContainer4: "div";
  trailingArtwork4: "div";
  inputElementHint2: "div";
  heart3: "div";
  hint2: "div";
  signedByBaseTypographyParagraphSmall2: "div";
  text21: "div";
  spacer29: "div";
  menuItem2: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled: "div";
  menuItemControlMediumCheckboxUnchecked: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked: "div";
  icon: "div";
  leadingEnhancer: "div";
  heart4: "div";
  textFrame: "div";
  leadingText: "div";
  typography3: "div";
  signedByBaseTypographyParagraphMedium: "div";
  text22: "div";
  spacer11: "div";
  typography4: "div";
  signedByBaseTypographyParagraphMedium2: "div";
  text23: "div";
  spacer12: "div";
  typography5: "div";
  signedByBaseTypographyParagraphMedium3: "div";
  spacer13: "div";
  trailingEnhancer: "div";
  heart5: "div";
  menuItem3: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled2: "div";
  menuItemControlMediumCheckboxUnchecked2: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked2: "div";
  icon2: "div";
  leadingEnhancer2: "div";
  heart6: "div";
  textFrame2: "div";
  leadingText2: "div";
  typography6: "div";
  signedByBaseTypographyParagraphMedium4: "div";
  text24: "div";
  spacer14: "div";
  typography7: "div";
  signedByBaseTypographyParagraphMedium5: "div";
  text25: "div";
  spacer15: "div";
  typography8: "div";
  signedByBaseTypographyParagraphMedium6: "div";
  spacer16: "div";
  trailingEnhancer2: "div";
  checkmarkSmall: "div";
  menuItem4: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled3: "div";
  menuItemControlMediumCheckboxUnchecked3: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked3: "div";
  icon3: "div";
  leadingEnhancer3: "div";
  heart7: "div";
  textFrame3: "div";
  leadingText3: "div";
  typography9: "div";
  signedByBaseTypographyParagraphMedium7: "div";
  text26: "div";
  spacer17: "div";
  typography10: "div";
  signedByBaseTypographyParagraphMedium8: "div";
  text27: "div";
  spacer18: "div";
  typography11: "div";
  signedByBaseTypographyParagraphMedium9: "div";
  spacer19: "div";
  trailingEnhancer3: "div";
  heart8: "div";
  menuItem5: "div";
  signedByBaseMenuItemOptionMediumStandardEnabled4: "div";
  menuItemControlMediumCheckboxUnchecked4: "div";
  signedByBaseMenuItemControlMediumCheckboxUnchecked4: "div";
  icon4: "div";
  leadingEnhancer4: "div";
  heart9: "div";
  textFrame4: "div";
  leadingText4: "div";
  typography12: "div";
  signedByBaseTypographyParagraphMedium10: "div";
  text28: "div";
  spacer20: "div";
  typography13: "div";
  signedByBaseTypographyParagraphMedium11: "div";
  text29: "div";
  spacer21: "div";
  typography14: "div";
  signedByBaseTypographyParagraphMedium12: "div";
  spacer22: "div";
  trailingEnhancer4: "div";
  heart10: "div";
  scrollBar: "div";
  model: typeof DropDown;
  buttons: "div";
  button: typeof Button;
  frame1073713924: "div";
  frame1073713930: "div";
  button2: typeof Button;
  button3: "div";
  button4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateUpdateVariable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateUpdateVariable__VariantsArgs;
    args?: PlasmicCreateUpdateVariable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateUpdateVariable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCreateUpdateVariable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateUpdateVariable__ArgProps,
          internalVariantPropNames: PlasmicCreateUpdateVariable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateUpdateVariable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modal") {
    func.displayName = "PlasmicCreateUpdateVariable";
  } else {
    func.displayName = `PlasmicCreateUpdateVariable.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateUpdateVariable = Object.assign(
  // Top-level PlasmicCreateUpdateVariable renders the root element
  makeNodeComponent("modal"),
  {
    // Helper components rendering sub-elements
    frame1437254016: makeNodeComponent("frame1437254016"),
    _name: makeNodeComponent("name"),
    frame1437254019: makeNodeComponent("frame1437254019"),
    form: makeNodeComponent("form"),
    select2: makeNodeComponent("select2"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    colorPicker: makeNodeComponent("colorPicker"),
    content: makeNodeComponent("content"),
    titre: makeNodeComponent("titre"),
    texinput2: makeNodeComponent("texinput2"),
    date: makeNodeComponent("date"),
    label6: makeNodeComponent("label6"),
    timePicker: makeNodeComponent("timePicker"),
    type: makeNodeComponent("type"),
    budget: makeNodeComponent("budget"),
    comments: makeNodeComponent("comments"),
    input5: makeNodeComponent("input5"),
    name2: makeNodeComponent("name2"),
    datePickerWeb: makeNodeComponent("datePickerWeb"),
    inputSelect: makeNodeComponent("inputSelect"),
    signedByBaseFieldGroupSmall: makeNodeComponent(
      "signedByBaseFieldGroupSmall"
    ),
    endDateCalendar: makeNodeComponent("endDateCalendar"),
    inputElementTextField: makeNodeComponent("inputElementTextField"),
    signedByBaseInputElementTextFieldSmallEnabled: makeNodeComponent(
      "signedByBaseInputElementTextFieldSmallEnabled"
    ),
    leadingArtworkContainer: makeNodeComponent("leadingArtworkContainer"),
    leadingArtwork: makeNodeComponent("leadingArtwork"),
    leadingLabelContainer: makeNodeComponent("leadingLabelContainer"),
    leadingLabel: makeNodeComponent("leadingLabel"),
    signedByBaseTypographyLabelSmall: makeNodeComponent(
      "signedByBaseTypographyLabelSmall"
    ),
    text5: makeNodeComponent("text5"),
    spacer: makeNodeComponent("spacer"),
    inputElementContentText: makeNodeComponent("inputElementContentText"),
    signedByBaseInputElementContentTextSmallOff: makeNodeComponent(
      "signedByBaseInputElementContentTextSmallOff"
    ),
    text6: makeNodeComponent("text6"),
    trailingLabelEnhancer: makeNodeComponent("trailingLabelEnhancer"),
    trailingLabel: makeNodeComponent("trailingLabel"),
    signedByBaseTypographyLabelSmall2: makeNodeComponent(
      "signedByBaseTypographyLabelSmall2"
    ),
    text7: makeNodeComponent("text7"),
    spacer2: makeNodeComponent("spacer2"),
    trailingArtworkContainer: makeNodeComponent("trailingArtworkContainer"),
    trailingArtwork: makeNodeComponent("trailingArtwork"),
    calendar: makeNodeComponent("calendar"),
    signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled:
      makeNodeComponent(
        "signedByBaseInputElementSelectXSmallWebSingleDefaultEnabled"
      ),
    leadingArtworkContainer2: makeNodeComponent("leadingArtworkContainer2"),
    text8: makeNodeComponent("text8"),
    leadingLabelContainer2: makeNodeComponent("leadingLabelContainer2"),
    leadingLabel2: makeNodeComponent("leadingLabel2"),
    signedByBaseTypographyLabelXSmall: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall"
    ),
    text9: makeNodeComponent("text9"),
    spacer3: makeNodeComponent("spacer3"),
    inputElementContentText2: makeNodeComponent("inputElementContentText2"),
    signedByBaseInputElementContentTextXSmallWebOff: makeNodeComponent(
      "signedByBaseInputElementContentTextXSmallWebOff"
    ),
    text10: makeNodeComponent("text10"),
    trailingLabelEnhancer2: makeNodeComponent("trailingLabelEnhancer2"),
    trailingLabel2: makeNodeComponent("trailingLabel2"),
    signedByBaseTypographyLabelXSmall2: makeNodeComponent(
      "signedByBaseTypographyLabelXSmall2"
    ),
    text11: makeNodeComponent("text11"),
    spacer4: makeNodeComponent("spacer4"),
    trailingArtworkContainer2: makeNodeComponent("trailingArtworkContainer2"),
    trailingArtwork2: makeNodeComponent("trailingArtwork2"),
    selectIndicatorContainer: makeNodeComponent("selectIndicatorContainer"),
    chevronIcon: makeNodeComponent("chevronIcon"),
    inputElementHint: makeNodeComponent("inputElementHint"),
    heart: makeNodeComponent("heart"),
    hint: makeNodeComponent("hint"),
    signedByBaseTypographyParagraphSmall: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall"
    ),
    text12: makeNodeComponent("text12"),
    spacer28: makeNodeComponent("spacer28"),
    inputElementSelect: makeNodeComponent("inputElementSelect"),
    signedByBaseInputElementSelectMediumSingleDefaultActive: makeNodeComponent(
      "signedByBaseInputElementSelectMediumSingleDefaultActive"
    ),
    selectFrame: makeNodeComponent("selectFrame"),
    leadingArtworkContainer3: makeNodeComponent("leadingArtworkContainer3"),
    leadingArtwork2: makeNodeComponent("leadingArtwork2"),
    leadingLabelContainer3: makeNodeComponent("leadingLabelContainer3"),
    leadingLabel3: makeNodeComponent("leadingLabel3"),
    signedByBaseTypographyLabelMedium: makeNodeComponent(
      "signedByBaseTypographyLabelMedium"
    ),
    text13: makeNodeComponent("text13"),
    spacer5: makeNodeComponent("spacer5"),
    inputElementContentText3: makeNodeComponent("inputElementContentText3"),
    signedByBaseInputElementContentTextMediumOff: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff"
    ),
    text14: makeNodeComponent("text14"),
    trailingLabelEnhancer3: makeNodeComponent("trailingLabelEnhancer3"),
    trailingLabel3: makeNodeComponent("trailingLabel3"),
    signedByBaseTypographyLabelMedium2: makeNodeComponent(
      "signedByBaseTypographyLabelMedium2"
    ),
    text15: makeNodeComponent("text15"),
    spacer6: makeNodeComponent("spacer6"),
    trailingArtworkContainer3: makeNodeComponent("trailingArtworkContainer3"),
    trailingArtwork3: makeNodeComponent("trailingArtwork3"),
    selectIndicatorContainer2: makeNodeComponent("selectIndicatorContainer2"),
    chevronIcon2: makeNodeComponent("chevronIcon2"),
    menu: makeNodeComponent("menu"),
    signedByBaseMenuListMedium: makeNodeComponent("signedByBaseMenuListMedium"),
    menuItem: makeNodeComponent("menuItem"),
    signedByBaseMenuItemSearchMediumNoneEnabled: makeNodeComponent(
      "signedByBaseMenuItemSearchMediumNoneEnabled"
    ),
    searchField: makeNodeComponent("searchField"),
    signedByBaseSearchFieldMediumEnabled: makeNodeComponent(
      "signedByBaseSearchFieldMediumEnabled"
    ),
    inputElementLabel: makeNodeComponent("inputElementLabel"),
    signedByBaseInputElementLabelMedium: makeNodeComponent(
      "signedByBaseInputElementLabelMedium"
    ),
    typography: makeNodeComponent("typography"),
    signedByBaseTypographyLabelMedium3: makeNodeComponent(
      "signedByBaseTypographyLabelMedium3"
    ),
    text16: makeNodeComponent("text16"),
    spacer7: makeNodeComponent("spacer7"),
    characterCountFrame: makeNodeComponent("characterCountFrame"),
    heart2: makeNodeComponent("heart2"),
    typography2: makeNodeComponent("typography2"),
    signedByBaseTypographyLabelMedium4: makeNodeComponent(
      "signedByBaseTypographyLabelMedium4"
    ),
    text17: makeNodeComponent("text17"),
    spacer8: makeNodeComponent("spacer8"),
    inputElementTextField2: makeNodeComponent("inputElementTextField2"),
    signedByBaseInputElementTextFieldMediumEnabled: makeNodeComponent(
      "signedByBaseInputElementTextFieldMediumEnabled"
    ),
    leadingArtworkContainer4: makeNodeComponent("leadingArtworkContainer4"),
    search: makeNodeComponent("search"),
    leadingLabelContainer4: makeNodeComponent("leadingLabelContainer4"),
    leadingLabel4: makeNodeComponent("leadingLabel4"),
    signedByBaseTypographyLabelMedium5: makeNodeComponent(
      "signedByBaseTypographyLabelMedium5"
    ),
    text18: makeNodeComponent("text18"),
    spacer9: makeNodeComponent("spacer9"),
    inputElementContentText4: makeNodeComponent("inputElementContentText4"),
    signedByBaseInputElementContentTextMediumOff2: makeNodeComponent(
      "signedByBaseInputElementContentTextMediumOff2"
    ),
    text19: makeNodeComponent("text19"),
    trailingLabelEnhancer4: makeNodeComponent("trailingLabelEnhancer4"),
    trailingLabel4: makeNodeComponent("trailingLabel4"),
    signedByBaseTypographyLabelMedium6: makeNodeComponent(
      "signedByBaseTypographyLabelMedium6"
    ),
    text20: makeNodeComponent("text20"),
    spacer10: makeNodeComponent("spacer10"),
    trailingArtworkContainer4: makeNodeComponent("trailingArtworkContainer4"),
    trailingArtwork4: makeNodeComponent("trailingArtwork4"),
    inputElementHint2: makeNodeComponent("inputElementHint2"),
    heart3: makeNodeComponent("heart3"),
    hint2: makeNodeComponent("hint2"),
    signedByBaseTypographyParagraphSmall2: makeNodeComponent(
      "signedByBaseTypographyParagraphSmall2"
    ),
    text21: makeNodeComponent("text21"),
    spacer29: makeNodeComponent("spacer29"),
    menuItem2: makeNodeComponent("menuItem2"),
    signedByBaseMenuItemOptionMediumStandardEnabled: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled"
    ),
    menuItemControlMediumCheckboxUnchecked: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked"
    ),
    icon: makeNodeComponent("icon"),
    leadingEnhancer: makeNodeComponent("leadingEnhancer"),
    heart4: makeNodeComponent("heart4"),
    textFrame: makeNodeComponent("textFrame"),
    leadingText: makeNodeComponent("leadingText"),
    typography3: makeNodeComponent("typography3"),
    signedByBaseTypographyParagraphMedium: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium"
    ),
    text22: makeNodeComponent("text22"),
    spacer11: makeNodeComponent("spacer11"),
    typography4: makeNodeComponent("typography4"),
    signedByBaseTypographyParagraphMedium2: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium2"
    ),
    text23: makeNodeComponent("text23"),
    spacer12: makeNodeComponent("spacer12"),
    typography5: makeNodeComponent("typography5"),
    signedByBaseTypographyParagraphMedium3: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium3"
    ),
    spacer13: makeNodeComponent("spacer13"),
    trailingEnhancer: makeNodeComponent("trailingEnhancer"),
    heart5: makeNodeComponent("heart5"),
    menuItem3: makeNodeComponent("menuItem3"),
    signedByBaseMenuItemOptionMediumStandardEnabled2: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled2"
    ),
    menuItemControlMediumCheckboxUnchecked2: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked2"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked2: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked2"
    ),
    icon2: makeNodeComponent("icon2"),
    leadingEnhancer2: makeNodeComponent("leadingEnhancer2"),
    heart6: makeNodeComponent("heart6"),
    textFrame2: makeNodeComponent("textFrame2"),
    leadingText2: makeNodeComponent("leadingText2"),
    typography6: makeNodeComponent("typography6"),
    signedByBaseTypographyParagraphMedium4: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium4"
    ),
    text24: makeNodeComponent("text24"),
    spacer14: makeNodeComponent("spacer14"),
    typography7: makeNodeComponent("typography7"),
    signedByBaseTypographyParagraphMedium5: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium5"
    ),
    text25: makeNodeComponent("text25"),
    spacer15: makeNodeComponent("spacer15"),
    typography8: makeNodeComponent("typography8"),
    signedByBaseTypographyParagraphMedium6: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium6"
    ),
    spacer16: makeNodeComponent("spacer16"),
    trailingEnhancer2: makeNodeComponent("trailingEnhancer2"),
    checkmarkSmall: makeNodeComponent("checkmarkSmall"),
    menuItem4: makeNodeComponent("menuItem4"),
    signedByBaseMenuItemOptionMediumStandardEnabled3: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled3"
    ),
    menuItemControlMediumCheckboxUnchecked3: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked3"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked3: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked3"
    ),
    icon3: makeNodeComponent("icon3"),
    leadingEnhancer3: makeNodeComponent("leadingEnhancer3"),
    heart7: makeNodeComponent("heart7"),
    textFrame3: makeNodeComponent("textFrame3"),
    leadingText3: makeNodeComponent("leadingText3"),
    typography9: makeNodeComponent("typography9"),
    signedByBaseTypographyParagraphMedium7: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium7"
    ),
    text26: makeNodeComponent("text26"),
    spacer17: makeNodeComponent("spacer17"),
    typography10: makeNodeComponent("typography10"),
    signedByBaseTypographyParagraphMedium8: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium8"
    ),
    text27: makeNodeComponent("text27"),
    spacer18: makeNodeComponent("spacer18"),
    typography11: makeNodeComponent("typography11"),
    signedByBaseTypographyParagraphMedium9: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium9"
    ),
    spacer19: makeNodeComponent("spacer19"),
    trailingEnhancer3: makeNodeComponent("trailingEnhancer3"),
    heart8: makeNodeComponent("heart8"),
    menuItem5: makeNodeComponent("menuItem5"),
    signedByBaseMenuItemOptionMediumStandardEnabled4: makeNodeComponent(
      "signedByBaseMenuItemOptionMediumStandardEnabled4"
    ),
    menuItemControlMediumCheckboxUnchecked4: makeNodeComponent(
      "menuItemControlMediumCheckboxUnchecked4"
    ),
    signedByBaseMenuItemControlMediumCheckboxUnchecked4: makeNodeComponent(
      "signedByBaseMenuItemControlMediumCheckboxUnchecked4"
    ),
    icon4: makeNodeComponent("icon4"),
    leadingEnhancer4: makeNodeComponent("leadingEnhancer4"),
    heart9: makeNodeComponent("heart9"),
    textFrame4: makeNodeComponent("textFrame4"),
    leadingText4: makeNodeComponent("leadingText4"),
    typography12: makeNodeComponent("typography12"),
    signedByBaseTypographyParagraphMedium10: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium10"
    ),
    text28: makeNodeComponent("text28"),
    spacer20: makeNodeComponent("spacer20"),
    typography13: makeNodeComponent("typography13"),
    signedByBaseTypographyParagraphMedium11: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium11"
    ),
    text29: makeNodeComponent("text29"),
    spacer21: makeNodeComponent("spacer21"),
    typography14: makeNodeComponent("typography14"),
    signedByBaseTypographyParagraphMedium12: makeNodeComponent(
      "signedByBaseTypographyParagraphMedium12"
    ),
    spacer22: makeNodeComponent("spacer22"),
    trailingEnhancer4: makeNodeComponent("trailingEnhancer4"),
    heart10: makeNodeComponent("heart10"),
    scrollBar: makeNodeComponent("scrollBar"),
    model: makeNodeComponent("model"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    frame1073713924: makeNodeComponent("frame1073713924"),
    frame1073713930: makeNodeComponent("frame1073713930"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    button4: makeNodeComponent("button4"),

    // Metadata about props expected for PlasmicCreateUpdateVariable
    internalVariantProps: PlasmicCreateUpdateVariable__VariantProps,
    internalArgProps: PlasmicCreateUpdateVariable__ArgProps
  }
);

export default PlasmicCreateUpdateVariable;
/* prettier-ignore-end */
