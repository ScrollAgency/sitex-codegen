/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 341WB3S6fAjbZggAzyKhr1
// Component: ifRw-0-06-Dn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import Select from "../../Select"; // plasmic-import: a2MEYF-CO9nX/component
import MenuItem from "../../MenuItem"; // plasmic-import: 8tg49zFadB9H/component
import TextInput from "../../TextInput"; // plasmic-import: lm9M4C5ynpU1/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: lhUOZcKCH_AK/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: lcnlii-Mi9bF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 341WB3S6fAjbZggAzyKhr1/projectcss
import sty from "./PlasmicCreateUpdateSituation.module.css"; // plasmic-import: ifRw-0-06-Dn/css

import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: 7-eqbUfgKU33/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: BdqZ9CLeT--a/icon
import MinusIcon from "./icons/PlasmicIcon__Minus"; // plasmic-import: qfj7sKbgl-Bu/icon
import FloppyDiskBackIcon from "./icons/PlasmicIcon__FloppyDiskBack"; // plasmic-import: sUrFG1LgJyYB/icon
import PhPaperclipFillIcon from "./icons/PlasmicIcon__PhPaperclipFill"; // plasmic-import: n_4uuRS96-Zr/icon
import IconPhTrashIcon from "./icons/PlasmicIcon__IconPhTrash"; // plasmic-import: ieZKa4cQud1_/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GXxwbmvNEgwq/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: t_DMhjzzg7u-/icon

createPlasmicElementProxy;

export type PlasmicCreateUpdateSituation__VariantMembers = {};
export type PlasmicCreateUpdateSituation__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateUpdateSituation__VariantsArgs;
export const PlasmicCreateUpdateSituation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCreateUpdateSituation__ArgsType = {
  operationId?: number;
  situationId?: any;
  onSituationIdChange?: (val: string) => void;
  operations?: any;
};
type ArgPropType = keyof PlasmicCreateUpdateSituation__ArgsType;
export const PlasmicCreateUpdateSituation__ArgProps = new Array<ArgPropType>(
  "operationId",
  "situationId",
  "onSituationIdChange",
  "operations"
);

export type PlasmicCreateUpdateSituation__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  select?: Flex__<typeof Select>;
  menuItem?: Flex__<typeof MenuItem>;
  textInput?: Flex__<typeof TextInput>;
  dateStart?: Flex__<typeof FormItemWrapper>;
  timePicker2?: Flex__<typeof AntdDatePicker>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  dispo?: Flex__<typeof FormItemWrapper>;
  button?: Flex__<"button">;
  add?: Flex__<"div">;
  ddDispo?: Flex__<typeof AntdSelect>;
  crisisForm?: Flex__<"div">;
  formCrisis?: Flex__<typeof FormWrapper>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  timePicker?: Flex__<typeof AntdDatePicker>;
  textAreaInput5?: Flex__<typeof TextAreaInput>;
  textAreaInput6?: Flex__<typeof TextAreaInput>;
  textAreaInput7?: Flex__<typeof TextAreaInput>;
  textAreaInput8?: Flex__<typeof TextAreaInput>;
  minus?: Flex__<"div">;
  save?: Flex__<"div">;
  textAreaInput2?: Flex__<typeof TextAreaInput>;
  textAreaInput4?: Flex__<typeof TextAreaInput>;
  textAreaInput3?: Flex__<typeof TextAreaInput>;
  upload?: Flex__<typeof UploadWrapper>;
  uploadedFile?: Flex__<"div">;
  frame1437254079?: Flex__<"div">;
};

export interface DefaultCreateUpdateSituationProps {
  operationId?: number;
  situationId?: any;
  onSituationIdChange?: (val: string) => void;
  operations?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateUpdateSituation__RenderFunc(props: {
  variants: PlasmicCreateUpdateSituation__VariantsArgs;
  args: PlasmicCreateUpdateSituation__ArgsType;
  overrides: PlasmicCreateUpdateSituation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ddDispo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formCrisis[].value",
        type: "private",
        variableType: "object",

        refName: "formCrisis",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formCrisis[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "formCrisis",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "timePicker[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textAreaInput5[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textAreaInput6[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textAreaInput7[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textAreaInput8[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "crisis",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "situationId",
        type: "writable",
        variableType: "object",

        valueProp: "situationId",
        onChangeProp: "onSituationIdChange"
      },
      {
        path: "newId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    crisis: usePlasmicDataOp(() => {
      return {
        sourceId: "v6umJuHyep6kPNyCAJjouT",
        opId: "14a41269-b144-44a0-8aab-0f0b5f937566",
        userArgs: {
          filters: [$state.situationId.id]
        },
        cacheKey: `plasmic.$.14a41269-b144-44a0-8aab-0f0b5f937566.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___9AkiD
        )}
      >
        {"Point de situation"}
      </div>
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["form", "value"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          initialValues: (() => {
            try {
              return $state.situationId[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["postgresUpdateById"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "v6umJuHyep6kPNyCAJjouT",
                      opId: "c89510ec-eb01-4746-ac6e-064dea6c7b26",
                      userArgs: {
                        keys: [$state.situationId.id],
                        variables: [
                          $state.form.value.anticipation,
                          $state.form.value.current_actions,
                          $state.form.value.general_situation,
                          $ctx.SupabaseUser.user == undefined
                            ? null
                            : $ctx.SupabaseUser.user.id,
                          $state.form.value.main_facts,
                          $state.form.value.title,
                          new Date().toISOString()
                        ]
                      },
                      cacheKey: null,
                      invalidatedKeys: [],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["postgresUpdateById"] != null &&
              typeof $steps["postgresUpdateById"] === "object" &&
              typeof $steps["postgresUpdateById"].then === "function"
            ) {
              $steps["postgresUpdateById"] = await $steps["postgresUpdateById"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: ["success", "Point de situation mis \u00e0 jour"]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          },
          onIsSubmittingChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "isSubmitting",
              ["form", "isSubmitting"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          ref: ref => {
            $refs["form"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__h4Agq)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cy4Ve
                  )}
                >
                  {"\u00c9v\u00e8nement associ\u00e9"}
                </div>
              }
              name={"operation_id"}
              rules={[{ ruleType: "required", message: "Requis" }]}
            >
              <Select
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                className={classNames("__wab_instance", sty.select)}
                disabled={(() => {
                  try {
                    return $props.operationId ? true : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                initialSelectedValue={(() => {
                  try {
                    return $props.operationId ? $props.operationId : null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "7";
                    }
                    throw e;
                  }
                })()}
                items={(_par =>
                  !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                  (() => {
                    try {
                      return $props.operations.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <MenuItem
                      data-plasmic-name={"menuItem"}
                      data-plasmic-override={overrides.menuItem}
                      key={currentIndex}
                      label={(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      value={(() => {
                        try {
                          return Number(currentItem.id);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["select", "value"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"S\u00e9lectionner"}
                showLabel={false}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__akSC)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uU2XU
                  )}
                >
                  {"Titre"}
                </div>
              }
              name={"title"}
            >
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textInput",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"Titre"}
              />
            </FormItemWrapper>
            <FormItemWrapper
              data-plasmic-name={"dateStart"}
              data-plasmic-override={overrides.dateStart}
              className={classNames("__wab_instance", sty.dateStart)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ktzYp
                  )}
                >
                  {"Date et heure de d\u00e9but"}
                </div>
              }
              name={"created_at"}
              shouldUpdate={true}
            >
              {(() => {
                const child$Props = {
                  allowClear: true,
                  className: classNames("__wab_instance", sty.timePicker2),
                  disabled: false,
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["timePicker2", "value"],
                      AntdDatePicker_Helpers
                    ).apply(null, eventArgs);
                  },
                  popupScopeClassName: sty["timePicker2__datePickerPopup"],
                  showNow: true,
                  showTime: true,
                  value: generateStateValueProp($state, [
                    "timePicker2",
                    "value"
                  ])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "timePicker2.value"
                    }
                  ],
                  [],
                  AntdDatePicker_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdDatePicker
                    data-plasmic-name={"timePicker2"}
                    data-plasmic-override={overrides.timePicker2}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__lzB9)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mb26S
                  )}
                >
                  {"Situation g\u00e9n\u00e9rale"}
                </div>
              }
              name={"general_situation"}
            >
              <TextAreaInput
                data-plasmic-name={"textAreaInput"}
                data-plasmic-override={overrides.textAreaInput}
                className={classNames("__wab_instance", sty.textAreaInput)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textAreaInput",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"Situation g\u00e9n\u00e9rale"}
              />
            </FormItemWrapper>
            <FormItemWrapper
              data-plasmic-name={"dispo"}
              data-plasmic-override={overrides.dispo}
              className={classNames("__wab_instance", sty.dispo)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nGr7Y
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Crises : " + $state.crisis.length;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Crises";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              name={"crisis"}
            >
              <Stack__
                as={"button"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button
                )}
                ref={ref => {
                  $refs["button"] = ref;
                }}
              >
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__cqo5D)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___44Uib
                  )}
                >
                  {"Ajouter"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"add"}
                data-plasmic-override={overrides.add}
                hasGap={true}
                className={classNames(projectcss.all, sty.add)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateCrisis"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["crisis"]
                          },
                          operation: 5,
                          value: undefined
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const arr = $stateGet(objRoot, variablePath);
                          arr.push(value);
                          return arr;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCrisis"] != null &&
                    typeof $steps["updateCrisis"] === "object" &&
                    typeof $steps["updateCrisis"].then === "function"
                  ) {
                    $steps["updateCrisis"] = await $steps["updateCrisis"];
                  }
                }}
              >
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__nKycP)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vJwUt
                  )}
                >
                  {"Ajouter"}
                </div>
              </Stack__>
              <AntdSelect
                data-plasmic-name={"ddDispo"}
                data-plasmic-override={overrides.ddDispo}
                allowClear={true}
                bordered={true}
                className={classNames("__wab_instance", sty.ddDispo)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens
                )}
                mode={"tags"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["ddDispo", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                options={[]}
                placeholder={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__huSzH)}
                  >
                    <Vector2Icon
                      className={classNames(projectcss.all, sty.svg__jxSst)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pXniO
                      )}
                    >
                      {"Ajouter"}
                    </div>
                  </Stack__>
                }
                popupScopeClassName={sty["ddDispo__popup"]}
                showSearch={true}
                size={"large"}
                value={generateStateValueProp($state, ["ddDispo", "value"])}
              />
            </FormItemWrapper>
            <Stack__
              as={"div"}
              data-plasmic-name={"crisisForm"}
              data-plasmic-override={overrides.crisisForm}
              hasGap={true}
              className={classNames(projectcss.all, sty.crisisForm)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.crisis;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.formCrisis),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["formCrisis", __plasmic_idx_0, "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    key: currentIndex,
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["formCrisis", __plasmic_idx_0, "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["formCrisis"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "formCrisis[].value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "formCrisis[].isSubmitting"
                      }
                    ],
                    [__plasmic_idx_0],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"formCrisis"}
                      data-plasmic-override={overrides.formCrisis}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__wh8W
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7HwhE
                            )}
                          >
                            {"id"}
                          </div>
                        }
                        name={"id"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput2"}
                          data-plasmic-override={overrides.textInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput2
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput2",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__lNhP
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ofUx
                            )}
                          >
                            {"Titre *"}
                          </div>
                        }
                        name={"title"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Titre"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__flt84
                        )}
                        initialValue={(() => {
                          try {
                            return currentItem.date;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m2YSn
                            )}
                          >
                            {"Date et heure"}
                          </div>
                        }
                        name={"date"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.timePicker
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["timePicker", __plasmic_idx_0, "value"],
                                AntdDatePicker_Helpers
                              ).apply(null, eventArgs);
                            },
                            popupScopeClassName:
                              sty["timePicker__datePickerPopup"],
                            showNow: false,
                            showTime: true,
                            value: generateStateValueProp($state, [
                              "timePicker",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "timePicker[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            AntdDatePicker_Helpers ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "timePicker[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  undefined
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdDatePicker
                              data-plasmic-name={"timePicker"}
                              data-plasmic-override={overrides.timePicker}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__suQJt
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sDxeg
                            )}
                          >
                            {"Bilan actualis\u00e9"}
                          </div>
                        }
                        name={"feedback"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput5"}
                          data-plasmic-override={overrides.textAreaInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput5
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput5",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Bilan actualis\u00e9"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__yTrkm
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bt8Ov
                            )}
                          >
                            {"Objectifs"}
                          </div>
                        }
                        name={"objectives"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput6"}
                          data-plasmic-override={overrides.textAreaInput6}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput6
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput6",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Objectifs"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__b3SY
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pekcr
                            )}
                          >
                            {"Id\u00e9e de manoeuvre / \u00c9x\u00e9cution"}
                          </div>
                        }
                        name={"execution"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput7"}
                          data-plasmic-override={overrides.textAreaInput7}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput7
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput7",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Id\u00e9e de manoeuvre / \u00c9x\u00e9cution"
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__k4Cgu
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fuBnz
                            )}
                          >
                            {
                              "Acteurs alert\u00e9s, inform\u00e9s, mobilis\u00e9s"
                            }
                          </div>
                        }
                        name={"people_concerned"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput8"}
                          data-plasmic-override={overrides.textAreaInput8}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput8
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput8",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Acteurs alert\u00e9s, inform\u00e9s, mobilis\u00e9s"
                          }
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fdb8F
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"minus"}
                          data-plasmic-override={overrides.minus}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.minus)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["postgresDeleteMany"] = (
                              currentItem.id ? true : false
                            )
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "v6umJuHyep6kPNyCAJjouT",
                                      opId: "67db1bd0-ad5e-4528-9631-e96bf9597f7b",
                                      userArgs: {
                                        conditions: [currentItem.id]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresDeleteMany"] != null &&
                              typeof $steps["postgresDeleteMany"] ===
                                "object" &&
                              typeof $steps["postgresDeleteMany"].then ===
                                "function"
                            ) {
                              $steps["postgresDeleteMany"] = await $steps[
                                "postgresDeleteMany"
                              ];
                            }

                            $steps["updateCrisis"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["crisis"]
                                    },
                                    operation: 6,
                                    deleteCount: 1,
                                    startIndex: (() => {
                                      try {
                                        return currentIndex;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const arr = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    arr.splice(startIndex, deleteCount);
                                    return arr;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCrisis"] != null &&
                              typeof $steps["updateCrisis"] === "object" &&
                              typeof $steps["updateCrisis"].then === "function"
                            ) {
                              $steps["updateCrisis"] = await $steps[
                                "updateCrisis"
                              ];
                            }
                          }}
                        >
                          <MinusIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s6FbQ
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bHlDu
                            )}
                          >
                            {"Retirer"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"save"}
                          data-plasmic-override={overrides.save}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.save)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["update"] = (currentItem.id ? true : false)
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["update"] != null &&
                              typeof $steps["update"] === "object" &&
                              typeof $steps["update"].then === "function"
                            ) {
                              $steps["update"] = await $steps["update"];
                            }

                            $steps["create"] = (!currentItem.id ? true : false)
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["timePicker2", "value"]
                                    },
                                    operation: 0
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["create"] != null &&
                              typeof $steps["create"] === "object" &&
                              typeof $steps["create"].then === "function"
                            ) {
                              $steps["create"] = await $steps["create"];
                            }

                            $steps["updateNewId"] = (
                              !currentItem.id ? true : false
                            )
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["newId"]
                                    },
                                    operation: 0,
                                    value: $steps.create?.data[0].id
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateNewId"] != null &&
                              typeof $steps["updateNewId"] === "object" &&
                              typeof $steps["updateNewId"].then === "function"
                            ) {
                              $steps["updateNewId"] = await $steps[
                                "updateNewId"
                              ];
                            }

                            $steps["runCode"] = (!currentItem.id ? true : false)
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (currentItem.id = $state.newId);
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <FloppyDiskBackIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bbbXp
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a8Yta
                            )}
                          >
                            {"Enregistrer"}
                          </div>
                        </Stack__>
                      </Stack__>
                    </FormWrapper>
                  );
                })();
              })}
            </Stack__>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__pio5P)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jwfKy
                  )}
                >
                  {"Anticipation"}
                </div>
              }
              name={"anticipation"}
            >
              <TextAreaInput
                data-plasmic-name={"textAreaInput2"}
                data-plasmic-override={overrides.textAreaInput2}
                className={classNames("__wab_instance", sty.textAreaInput2)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textAreaInput2",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"Anticipation"}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField___0AcbA)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__udkZ2
                  )}
                >
                  {"Actions en cours"}
                </div>
              }
              name={"current_actions"}
            >
              <TextAreaInput
                data-plasmic-name={"textAreaInput4"}
                data-plasmic-override={overrides.textAreaInput4}
                className={classNames("__wab_instance", sty.textAreaInput4)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textAreaInput4",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"Actions en cours"}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__xC8Tf)}
              initialValue={undefined}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ch0Bh
                  )}
                >
                  {"Faits marquants"}
                </div>
              }
              name={"main_facts"}
            >
              <TextAreaInput
                data-plasmic-name={"textAreaInput3"}
                data-plasmic-override={overrides.textAreaInput3}
                className={classNames("__wab_instance", sty.textAreaInput3)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textAreaInput3",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"Faits marquants"}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__xA2QW)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Dn9U
                  )}
                >
                  {"Fichier attach\u00e9"}
                </div>
              }
              name={"attached_file"}
            >
              <UploadWrapper
                data-plasmic-name={"upload"}
                data-plasmic-override={overrides.upload}
                accept={""}
                className={classNames("__wab_instance", sty.upload)}
                dragAndDropFiles={true}
                files={generateStateValueProp($state, ["upload", "files"])}
                maxCount={1}
                onFilesChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["upload", "files"]).apply(
                    null,
                    eventArgs
                  );
                }}
                showUploadList={true}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__x07S)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cDp6U
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Importer ou d\u00e9poser un fichier"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eF6D
                    )}
                  >
                    {"10 Mo max"}
                  </div>
                </AntdButton>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"uploadedFile"}
                  data-plasmic-override={overrides.uploadedFile}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.uploadedFile)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nDRrP)}
                  >
                    <PhPaperclipFillIcon
                      className={classNames(projectcss.all, sty.svg__oKrhn)}
                      role={"img"}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437254079"}
                      data-plasmic-override={overrides.frame1437254079}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437254079
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Hd2X
                        )}
                      >
                        {""}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ccZ4V
                        )}
                      >
                        {""}
                      </div>
                    </Stack__>
                  </Stack__>
                  <IconPhTrashIcon
                    className={classNames(projectcss.all, sty.svg__r0F0V)}
                    role={"img"}
                  />
                </Stack__>
              </UploadWrapper>
            </FormItemWrapper>
            <Button
              className={classNames("__wab_instance", sty.button__kqYnO)}
              label={"Enregistrer"}
              submitsForm={true}
            />
          </FormWrapper>
        );
      })()}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "select",
    "menuItem",
    "textInput",
    "dateStart",
    "timePicker2",
    "textAreaInput",
    "dispo",
    "button",
    "add",
    "ddDispo",
    "crisisForm",
    "formCrisis",
    "textInput2",
    "textInput3",
    "timePicker",
    "textAreaInput5",
    "textAreaInput6",
    "textAreaInput7",
    "textAreaInput8",
    "minus",
    "save",
    "textAreaInput2",
    "textAreaInput4",
    "textAreaInput3",
    "upload",
    "uploadedFile",
    "frame1437254079"
  ],
  form: [
    "form",
    "select",
    "menuItem",
    "textInput",
    "dateStart",
    "timePicker2",
    "textAreaInput",
    "dispo",
    "button",
    "add",
    "ddDispo",
    "crisisForm",
    "formCrisis",
    "textInput2",
    "textInput3",
    "timePicker",
    "textAreaInput5",
    "textAreaInput6",
    "textAreaInput7",
    "textAreaInput8",
    "minus",
    "save",
    "textAreaInput2",
    "textAreaInput4",
    "textAreaInput3",
    "upload",
    "uploadedFile",
    "frame1437254079"
  ],
  select: ["select", "menuItem"],
  menuItem: ["menuItem"],
  textInput: ["textInput"],
  dateStart: ["dateStart", "timePicker2"],
  timePicker2: ["timePicker2"],
  textAreaInput: ["textAreaInput"],
  dispo: ["dispo", "button", "add", "ddDispo"],
  button: ["button"],
  add: ["add"],
  ddDispo: ["ddDispo"],
  crisisForm: [
    "crisisForm",
    "formCrisis",
    "textInput2",
    "textInput3",
    "timePicker",
    "textAreaInput5",
    "textAreaInput6",
    "textAreaInput7",
    "textAreaInput8",
    "minus",
    "save"
  ],
  formCrisis: [
    "formCrisis",
    "textInput2",
    "textInput3",
    "timePicker",
    "textAreaInput5",
    "textAreaInput6",
    "textAreaInput7",
    "textAreaInput8",
    "minus",
    "save"
  ],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  timePicker: ["timePicker"],
  textAreaInput5: ["textAreaInput5"],
  textAreaInput6: ["textAreaInput6"],
  textAreaInput7: ["textAreaInput7"],
  textAreaInput8: ["textAreaInput8"],
  minus: ["minus"],
  save: ["save"],
  textAreaInput2: ["textAreaInput2"],
  textAreaInput4: ["textAreaInput4"],
  textAreaInput3: ["textAreaInput3"],
  upload: ["upload", "uploadedFile", "frame1437254079"],
  uploadedFile: ["uploadedFile", "frame1437254079"],
  frame1437254079: ["frame1437254079"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  select: typeof Select;
  menuItem: typeof MenuItem;
  textInput: typeof TextInput;
  dateStart: typeof FormItemWrapper;
  timePicker2: typeof AntdDatePicker;
  textAreaInput: typeof TextAreaInput;
  dispo: typeof FormItemWrapper;
  button: "button";
  add: "div";
  ddDispo: typeof AntdSelect;
  crisisForm: "div";
  formCrisis: typeof FormWrapper;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  timePicker: typeof AntdDatePicker;
  textAreaInput5: typeof TextAreaInput;
  textAreaInput6: typeof TextAreaInput;
  textAreaInput7: typeof TextAreaInput;
  textAreaInput8: typeof TextAreaInput;
  minus: "div";
  save: "div";
  textAreaInput2: typeof TextAreaInput;
  textAreaInput4: typeof TextAreaInput;
  textAreaInput3: typeof TextAreaInput;
  upload: typeof UploadWrapper;
  uploadedFile: "div";
  frame1437254079: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateUpdateSituation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateUpdateSituation__VariantsArgs;
    args?: PlasmicCreateUpdateSituation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateUpdateSituation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCreateUpdateSituation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateUpdateSituation__ArgProps,
          internalVariantPropNames: PlasmicCreateUpdateSituation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateUpdateSituation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreateUpdateSituation";
  } else {
    func.displayName = `PlasmicCreateUpdateSituation.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateUpdateSituation = Object.assign(
  // Top-level PlasmicCreateUpdateSituation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    select: makeNodeComponent("select"),
    menuItem: makeNodeComponent("menuItem"),
    textInput: makeNodeComponent("textInput"),
    dateStart: makeNodeComponent("dateStart"),
    timePicker2: makeNodeComponent("timePicker2"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    dispo: makeNodeComponent("dispo"),
    button: makeNodeComponent("button"),
    add: makeNodeComponent("add"),
    ddDispo: makeNodeComponent("ddDispo"),
    crisisForm: makeNodeComponent("crisisForm"),
    formCrisis: makeNodeComponent("formCrisis"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    timePicker: makeNodeComponent("timePicker"),
    textAreaInput5: makeNodeComponent("textAreaInput5"),
    textAreaInput6: makeNodeComponent("textAreaInput6"),
    textAreaInput7: makeNodeComponent("textAreaInput7"),
    textAreaInput8: makeNodeComponent("textAreaInput8"),
    minus: makeNodeComponent("minus"),
    save: makeNodeComponent("save"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    textAreaInput4: makeNodeComponent("textAreaInput4"),
    textAreaInput3: makeNodeComponent("textAreaInput3"),
    upload: makeNodeComponent("upload"),
    uploadedFile: makeNodeComponent("uploadedFile"),
    frame1437254079: makeNodeComponent("frame1437254079"),

    // Metadata about props expected for PlasmicCreateUpdateSituation
    internalVariantProps: PlasmicCreateUpdateSituation__VariantProps,
    internalArgProps: PlasmicCreateUpdateSituation__ArgProps
  }
);

export default PlasmicCreateUpdateSituation;
/* prettier-ignore-end */
